           //    1                                            ; HP-45 ROM source code from United States Patent 4,001,569
           //    2                                            ; keyed in by Eric Smith on 9-Mar-1995 - any errors are probably mine
           //    3                                            ; typo corrected in "if" instruction in "frac" routine, on 3-Jan-2003,
           //    4                                            ;     found by Peter Monta by OCRing the listing in the patent
           //    5                                            
           //    6                                            	.rom @00
           //    7                                            
0010101101 //    8   L00000:  ..1.1.11.1  -> L00053           pwo1:	jsb	pwo2
           //    9                                            
1100010000 //   10   L00001:  11...1....  -> L06002  *****    tms5:	select rom 6
           //   11                                            
0100101001 //   12   L00002:  .1..1.1..1  -> L00112           tms2:	jsb frac
1100101110 //   13   L00003:  11..1.111.                      	a exchange b[w]
1111100110 //   14   L00004:  11111..11.                      	a + 1 -> a[m]
0100111010 //   15   L00005:  .1..111.1.                      	a -> b[xs]
1101111010 //   16   L00006:  11.1111.1.                      	a - 1 -> a[xs]
1110001110 //   17   L00007:  111...111.                      	a + b -> a[w]
1011101010 //   18   L00010:  1.111.1.1.                      	0 -> a[x]
1110001001 //   19   L00011:  111...1..1  -> L00342           	jsb mlop
1110001001 //   20   L00012:  111...1..1  -> L00342           	jsb mlop
1011101010 //   21   L00013:  1.111.1.1.                      	0 -> a[x]
1100100101 //   22   L00014:  11..1..1.1  -> L00311           	jsb norm
0110010011 //   23   L00015:  .11..1..11  -> L00144           	go to tms4
           //   24                                            
1000010100 //   25   L00016:  1....1.1..                      dmdtz4:	if s8 # 1
0101000111 //   26   L00017:  .1.1...111  -> L00121           	     then go to dmt2
1000011101 //   27   L00020:  1....111.1  -> L00207           tdms:	jsb mode
1110101110 //   28   L00021:  111.1.111.                      	a exchange c[w]
0110001110 //   29   L00022:  .11...111.                      	c -> a[w]
0000001011 //   30   L00023:  ......1.11  -> L00002           	go to tms2
           //   31                                            
1010010000 //   32   L00024:  1.1..1....  -> L05025  *****    pwo3:	select rom 5
           //   33                                            
1000011101 //   34   L00025:  1....111.1  -> L00207           tpl4:	jsb mode
1110101110 //   35   L00026:  111.1.111.                      	a exchange c[w]
1000010000 //   36   L00027:  1....1....  -> L04030  *****    	select rom 4
           //   37                                            
0010010000 //   38   L00030:  ..1..1....  -> L01031  *****    ret1:	select rom 1
           //   39                                            
0011010100 //   40   L00031:  ..11.1.1..                      trc1z1:	if s3 # 1
0001100011 //   41   L00032:  ...11...11  -> L00030           	     then go to ret1
0100101000 //   42   L00033:  .1..1.1...                      	c -> stack
0011001110 //   43   L00034:  ..11..111.                      	0 -> c[w]
1001110000 //   44   L00035:  1..111....                      	c -> data address
0000000000 //   45   L00036:  ..........                      	no operation
1011111000 //   46   L00037:  1.11111...                      	data -> c
1110101110 //   47   L00040:  111.1.111.                      	a exchange c[w]
1001111001 //   48   L00041:  1..1111..1  -> L00236           	jsb div1
1100011001 //   49   L00042:  11...11..1  -> L00306           	jsb exch
1010001001 //   50   L00043:  1.1...1..1  -> L00242           	jsb mul1
1100011001 //   51   L00044:  11...11..1  -> L00306           	jsb exch
1011111110 //   52   L00045:  1.1111111.                      	0 -> a[s]
1011111000 //   53   L00046:  1.11111...                      	data -> c
0110111110 //   54   L00047:  .11.11111.                      	if c[s] = 0
0010110111 //   55   L00050:  ..1.11.111  -> L00055           	     then go to trc2
1101111110 //   56   L00051:  11.111111.                      	a - 1 -> a[s]
0010110101 //   57   L00052:  ..1.11.1.1  -> L00055           	jsb trc2
           //   58                                            
0001010011 //   59   L00053:  ...1.1..11  -> L00024           pwo2:	go to pwo3
           //   60                                            
0010010000 //   61   L00054:  ..1..1....  -> L01055  *****    sqt1:	select rom 1
           //   62                                            
1110101110 //   63   L00055:  111.1.111.                      trc2:	a exchange c[w]
1000010100 //   64   L00056:  1....1.1..                      	if s8 # 1
1111001011 //   65   L00057:  1111..1.11  -> L00362           	     then go to reg9z4
0011111110 //   66   L00060:  ..1111111.                      	0 - c - 1 -> c[s]
1111001001 //   67   L00061:  1111..1..1  -> L00362           	jsb reg9z4
           //   68                                            
0001010100 //   69   L00062:  ...1.1.1..                      sqrtz3:	if s1 #  1
0010110011 //   70   L00063:  ..1.11..11  -> L00054           	     then go to sqt1
1010010100 //   71   L00064:  1.1..1.1..                      	if s10 # 1
0110100111 //   72   L00065:  .11.1..111  -> L00151           	     then go to tn12
0011101011 //   73   L00066:  ..111.1.11  -> L00072           	go to mag1z1
           //   74                                            
0010010000 //   75   L00067:  ..1..1....  -> L01070  *****    tanx:	select rom 1
           //   76                                            
0110001110 //   77   L00070:  .11...111.                      sn12:	c -> a[w]
0010010000 //   78   L00071:  ..1..1....  -> L01072  *****    	select rom 1
           //   79                                            
1110101110 //   80   L00072:  111.1.111.                      mag1z1:	a exchange c[w]
0110001110 //   81   L00073:  .11...111.                      	c -> a[w]
0111111010 //   82   L00074:  .111111.1.                      	c + 1 -> c[xs]
0100011011 //   83   L00075:  .1...11.11  -> L00106           	if no carry go to mag3
0110101010 //   84   L00076:  .11.1.1.1.                      	if c[x] = 0
0100011011 //   85   L00077:  .1...11.11  -> L00106           	     then go to mag3
0011001110 //   86   L00100:  ..11..111.                      	0 -> c[w]
0000001100 //   87   L00101:  ......11..                      	0 -> p
0101011000 //   88   L00102:  .1.1.11...                      	load constant 5
1100001100 //   89   L00103:  11....11..                      	12 -> p
0111001010 //   90   L00104:  .111..1.1.                      	a + c -> c[x]
1110101111 //   91   L00105:  111.1.1111  -> L00353           	if no carry go to mag4
1010010100 //   92   L00106:  1.1..1.1..                      mag3:	if s10 # 1
0111010111 //   93   L00107:  .111.1.111  -> L00165           	     then go to rom1
1110101110 //   94   L00110:  111.1.111.                      	a exchange c[w]
0011100011 //   95   L00111:  ..111...11  -> L00070           	go to sn12
           //   96                                            
0011001010 //   97   L00112:  ..11..1.1.                      frac:	0 -> c[x]
0000001100 //   98   L00113:  ......11..                      	0 -> p
0101011000 //   99   L00114:  .1.1.11...                      	load constant 5
1101001010 //  100   L00115:  11.1..1.1.                      	a - c -> a[x]
1001111010 //  101   L00116:  1..1111.1.                      	if a[xs] >= 1
1100110011 //  102   L00117:  11..11..11  -> L00314           	     then go to frc1
1111111111 //  103   L00120:  1111111111  -> L00377           	go to err2
           //  104                                            
0100101001 //  105   L00121:  .1..1.1..1  -> L00112           dmt2:	jsb frac
1110001101 //  106   L00122:  111...11.1  -> L00343           	jsb mlp0
0000101110 //  107   L00123:  ....1.111.                      	0 -> b[w]
1100110010 //  108   L00124:  11..11..1.                      	a exchange b[wp]
1100101110 //  109   L00125:  11..1.111.                      	a exchange b[w]
0100001110 //  110   L00126:  .1....111.                      	shift left a[w]
1110010101 //  111   L00127:  111..1.1.1  -> L00345           	jsb mlp2
0111000100 //  112   L00130:  .111...1..                      	1 -> s7
1100100101 //  113   L00131:  11..1..1.1  -> L00311           	jsb norm
0011001110 //  114   L00132:  ..11..111.                      	0 -> c[w]
0011011000 //  115   L00133:  ..11.11...                      	load constant 3
0110011000 //  116   L00134:  .11..11...                      	load constant 6
1100001100 //  117   L00135:  11....11..                      	12 -> p
1001111001 //  118   L00136:  1..1111..1  -> L00236           	jsb div1
1000011001 //  119   L00137:  1....11..1  -> L00206           	jsb mod0
0111110111 //  120   L00140:  .11111.111  -> L00175           	go to fst0
           //  121                                            
0111101010 //  122   L00141:  .1111.1.1.                      rtfg:	c + 1 -> c[x]
0111100010 //  123   L00142:  .1111...1.                      	c + 1 -> c[p]
1000001111 //  124   L00143:  1.....1111  -> L00203           	if no carry go to dvml
           //  125                                            
0011001110 //  126   L00144:  ..11..111.                      tms4:	0 -> c[w]
0010001100 //  127   L00145:  ..1...11..                      	2 -> p
0100011000 //  128   L00146:  .1...11...                      	load constant 4
1110101110 //  129   L00147:  111.1.111.                      	a exchange c[w]
0000000111 //  130   L00150:  .......111  -> L00001           	go to tms5
           //  131                                            
0010010000 //  132   L00151:  ..1..1....  -> L01152  *****    tn12:	select rom 1
           //  133                                            
0111000100 //  134   L00152:  .111...1..                      tpol:	1 -> s7
0100010100 //  135   L00153:  .1...1.1..                      	if s4 # 1
0111001111 //  136   L00154:  .111..1111  -> L00163           	     then go to tpl3
1010101110 //  137   L00155:  1.1.1.111.                      	c + c -> c[w]
0111011110 //  138   L00156:  .111.1111.                      	a + c -> c[s]
1001100110 //  139   L00157:  1..11..11.                      	if a[m] >= 1
0111001011 //  140   L00160:  .111..1.11  -> L00162           	     then go to tpl2
0011111110 //  141   L00161:  ..1111111.                      	0 - c - 1 -> c[s]
1010011001 //  142   L00162:  1.1..11..1  -> L00246           tpl2:	jsb sub1
0001000100 //  143   L00163:  ...1...1..                      tpl3:	1 -> s1
0001010111 //  144   L00164:  ...1.1.111  -> L00025           	go to tpl4
           //  145                                            
0010010000 //  146   L00165:  ..1..1....  -> L01166  *****    rom1:	select rom 1
           //  147                                            
1000010100 //  148   L00166:  1....1.1..                      drg1z1:	if s8 # 1
0110101011 //  149   L00167:  .11.1.1.11  -> L00152           	     then go to tpol
1000011101 //  150   L00170:  1....111.1  -> L00207           drg0:	jsb mode
0001000100 //  151   L00171:  ...1...1..                      	1 -> s1
1010010100 //  152   L00172:  1.1..1.1..                      	if s10 # 1
0011101011 //  153   L00173:  ..111.1.11  -> L00072           	     then go to mag1z1
1111001111 //  154   L00174:  1111..1111  -> L00363           	go to regx
           //  155                                            
1110101110 //  156   L00175:  111.1.111.                      fst0:	a exchange c[w]
0110010000 //  157   L00176:  .11..1....  -> L03177  *****    fst1:	select rom 3
           //  158                                            
0101101010 //  159   L00177:  .1.11.1.1.                      gtfd:	c - 1 -> c[x]
0101101010 //  160   L00200:  .1.11.1.1.                      	c - 1 -> c[x]
0111000100 //  161   L00201:  .111...1..                      	1 -> s7
0101100010 //  162   L00202:  .1.11...1.                      dtfr:	c - 1 -> c[p]
1010010100 //  163   L00203:  1.1..1.1..                      dvml:	if s10 # 1
1001111011 //  164   L00204:  1..1111.11  -> L00236           	     then go to div1
1010001011 //  165   L00205:  1.1...1.11  -> L00242           	go to mul1
           //  166                                            
1010100100 //  167   L00206:  1.1.1..1..                      mod0:	0 -> s10
0111000100 //  168   L00207:  .111...1..                      mode:	1 -> s7
0100100100 //  169   L00210:  .1..1..1..                      	0 -> s4
0110000100 //  170   L00211:  .11....1..                      	1 -> s6
1010101000 //  171   L00212:  1.1.1.1...                      	m -> c
0110111110 //  172   L00213:  .11.11111.                      	if c[s] = 0
1000111011 //  173   L00214:  1...111.11  -> L00216           	     then go to mod2
0100000100 //  174   L00215:  .1.....1..                      	1 -> s4
0111111110 //  175   L00216:  .11111111.                      mod2:	c + 1 -> c[s]
1001000111 //  176   L00217:  1..1...111  -> L00221           	if no carry go to mod3
0110100100 //  177   L00220:  .11.1..1..                      	0 -> s6
0011001110 //  178   L00221:  ..11..111.                      mod3:	0 -> c[w]
0111101010 //  179   L00222:  .1111.1.1.                      	c + 1 -> c[x]
0001010100 //  180   L00223:  ...1.1.1..                      	if s1 # 1
1100000011 //  181   L00224:  11......11  -> L00300           	     then go to degr
0100010100 //  182   L00225:  .1...1.1..                      	if s4 # 1
1110000111 //  183   L00226:  111....111  -> L00341           	     then go to ret0
0111100100 //  184   L00227:  .1111..1..                      	0 -> s7
0110010100 //  185   L00230:  .11..1.1..                      	if s6 # 1
1000001011 //  186   L00231:  1.....1.11  -> L00202           	     then go to dtfr
0110000111 //  187   L00232:  .11....111  -> L00141           	go to rtfg
           //  188                                            
1010101011 //  189   L00233:  1.1.1.1.11  -> L00252           add3z1:	go to add3
           //  190                                            
1010010100 //  191   L00234:  1.1..1.1..                      mldv:	if s10 # 1
1010001011 //  192   L00235:  1.1...1.11  -> L00242           	     then go to mul1
1011000100 //  193   L00236:  1.11...1..                      div1:	1 -> s11
0001100100 //  194   L00237:  ...11..1..                      div0:	0 -> s1
0000101110 //  195   L00240:  ....1.111.                      	0 -> b[w]
1010010111 //  196   L00241:  1.1..1.111  -> L00245           	go to divx
           //  197                                            
1011000100 //  198   L00242:  1.11...1..                      mul1:	1 -> s11
0001100100 //  199   L00243:  ...11..1..                      mul0:	0 -> s1
0010010000 //  200   L00244:  ..1..1....  -> L01245  *****    mulx:	select rom 1
           //  201                                            
0010010000 //  202   L00245:  ..1..1....  -> L01246  *****    divx:	select rom 1
           //  203                                            
1011000100 //  204   L00246:  1.11...1..                      sub1:	1 -> s11
0011111110 //  205   L00247:  ..1111111.                      sub0:	0 - c - 1 -> c[s]
0001100100 //  206   L00250:  ...11..1..                      add0zx:	0 -> s1
0010100100 //  207   L00251:  ..1.1..1..                      	0 -> s2
0000101110 //  208   L00252:  ....1.111.                      add3:	0 -> b[w]
1111111010 //  209   L00253:  1111111.1.                      	a + 1 -> a[xs]
1111111010 //  210   L00254:  1111111.1.                      	a + 1 -> a[xs]
0111111010 //  211   L00255:  .111111.1.                      	c + 1 -> c[xs]
0111111010 //  212   L00256:  .111111.1.                      	c + 1 -> c[xs]
0001001010 //  213   L00257:  ...1..1.1.                      	if a >= c[x]
1011001011 //  214   L00260:  1.11..1.11  -> L00262           	     then go to add4
1110101110 //  215   L00261:  111.1.111.                      	a exchange c[w]
1110100110 //  216   L00262:  111.1..11.                      add4:	a exchange c[m]
0110100110 //  217   L00263:  .11.1..11.                      	if c[m] = 0
1011011011 //  218   L00264:  1.11.11.11  -> L00266           	     then go to add5
1110101110 //  219   L00265:  111.1.111.                      	a exchange c[w]
1000100110 //  220   L00266:  1...1..11.                      add5:	b exchange c[m]
0001001010 //  221   L00267:  ...1..1.1.                      add6:	if a >= c[x]
1011111011 //  222   L00270:  1.11111.11  -> L00276           	     then go to add7
1010001110 //  223   L00271:  1.1...111.                      add8:	shift right b[w]
1111101010 //  224   L00272:  11111.1.1.                      	a + 1 -> a[x]
0000001110 //  225   L00273:  ......111.                      	if b[w] = 0
1011111011 //  226   L00274:  1.11111.11  -> L00276           	     then go to add7
1011011111 //  227   L00275:  1.11.11111  -> L00267           	go to add6
           //  228                                            
0010010000 //  229   L00276:  ..1..1....  -> L01277  *****    add7:	select rom 1
           //  230                                            
1111111111 //  231   L00277:  1111111111  -> L00377           err2z1:	go to err2
           //  232                                            
0110010100 //  233   L00300:  .11..1.1..                      degr:	if s6 # 1
1110000111 //  234   L00301:  111....111  -> L00341           	     then go to ret0
0111100100 //  235   L00302:  .1111..1..                      	0 -> s7
0100010100 //  236   L00303:  .1...1.1..                      	if s4 # 1
1000001011 //  237   L00304:  1.....1.11  -> L00202           	     then go to dtfr
0111111111 //  238   L00305:  .111111111  -> L00177           	go to gtfd
           //  239                                            
0110101000 //  240   L00306:  .11.1.1...                      exch:	stack -> a
0100101000 //  241   L00307:  .1..1.1...                      	c -> stack
0000110000 //  242   L00310:  ....11....                      	return
           //  243                                            
1011000100 //  244   L00311:  1.11...1..                      norm:	1 -> s11
0010010000 //  245   L00312:  ..1..1....  -> L01313  *****    	select rom 1
           //  246                                            
0010010000 //  247   L00313:  ..1..1....  -> L01314  *****    pii2:	select rom 1
           //  248                                            
1000100110 //  249   L00314:  1...1..11.                      frc1:	b exchange c[m]
1010001110 //  250   L00315:  1.1...111.                      frc2:	shift right b[w]
1111101010 //  251   L00316:  11111.1.1.                      	a + 1 -> a[x]
1100110111 //  252   L00317:  11..11.111  -> L00315           	if no carry go to frc2
1011101110 //  253   L00320:  1.111.111.                      	0 -> a[w]
0110001100 //  254   L00321:  .11...11..                      	6 -> p
0000110000 //  255   L00322:  ....11....                      	return
           //  256                                            
1011010100 //  257   L00323:  1.11.1.1..                      pii4:	if s11 # 1
1101100011 //  258   L00324:  11.11...11  -> L00330           	     then go to pirt
1010101110 //  259   L00325:  1.1.1.111.                      	c + c -> c[w]
0111000100 //  260   L00326:  .111...1..                      	1 -> s7
1001110011 //  261   L00327:  1..111..11  -> L00234           	go to mldv
           //  262                                            
0010010000 //  263   L00330:  ..1..1....  -> L01331  *****    pirt:	select rom 1
           //  264                                            
1100001100 //  265   L00331:  11....11..                      pii4z1:	12 -> p
1101001111 //  266   L00332:  11.1..1111  -> L00323           	go to pii4
           //  267                                            
1011010100 //  268   L00333:  1.11.1.1..                      retnz1:	if s11 # 1
1111100111 //  269   L00334:  11111..111  -> L00371           	     then go to rtrn
1011000100 //  270   L00335:  1.11...1..                      	1 -> s11
0111010100 //  271   L00336:  .111.1.1..                      	if s7 # 1
1100101111 //  272   L00337:  11..1.1111  -> L00313           	     then go to pii2
1011100100 //  273   L00340:  1.111..1..                      	0 -> s11
0000110000 //  274   L00341:  ....11....                      ret0:	return
           //  275                                            
0000101110 //  276   L00342:  ....1.111.                      mlop:	0 -> b[w]
1100110010 //  277   L00343:  11..11..1.                      mlp0:	a exchange b[wp]
1010001110 //  278   L00344:  1.1...111.                      	shift right b[w]
1010001100 //  279   L00345:  1.1...11..                      mlp2:	10 -> p
1110001110 //  280   L00346:  111...111.                      mlp3:	a + b -> a[w]
0000011100 //  281   L00347:  .....111..                      	p - 1 -> p
0100101100 //  282   L00350:  .1..1.11..                      	if p # 4
1110011011 //  283   L00351:  111..11.11  -> L00346           	     then go to mlp3
0000110000 //  284   L00352:  ....11....                      	return
           //  285                                            
0011001110 //  286   L00353:  ..11..111.                      mag4:	0 -> c[w]
0111100010 //  287   L00354:  .1111...1.                      	c + 1 -> c[p]
1010010100 //  288   L00355:  1.1..1.1..                      	if s10 # 1
0011011111 //  289   L00356:  ..11.11111  -> L00067           	     then go to tanx
0110100111 //  290   L00357:  .11.1..111  -> L00151           	go to tn12
           //  291                                            
0001010100 //  292   L00360:  ...1.1.1..                      reg9:	if s1 # 1
0111111011 //  293   L00361:  .111111.11  -> L00176           	     then go to fst1
1110101110 //  294   L00362:  111.1.111.                      reg9z4:	a exchange c[w]
0011001110 //  295   L00363:  ..11..111.                      regx:	0 -> c[w]
0101100010 //  296   L00364:  .1.11...1.                      	c - 1 -> c[p]
1001110000 //  297   L00365:  1..111....                      	c -> data address
0011001110 //  298   L00366:  ..11..111.                      	0 -> c[w]
1011110000 //  299   L00367:  1.1111....                      	c -> data
0111110111 //  300   L00370:  .11111.111  -> L00175           	go to fst0
           //  301                                            
0011010100 //  302   L00371:  ..11.1.1..                      rtrn:	if s3 # 1
1111000011 //  303   L00372:  1111....11  -> L00360           	     then go to reg9
1010010100 //  304   L00373:  1.1..1.1..                      	if s10 # 1
1111111011 //  305   L00374:  1111111.11  -> L00376           	     then go to ret5
1000010000 //  306   L00375:  1....1....  -> L04376  *****    ret4:	select rom 4
           //  307                                            
1010010000 //  308   L00376:  1.1..1....  -> L05377  *****    ret5:	select rom 5
           //  309                                            
0100010000 //  310   L00377:  .1...1....  -> L02000  *****    err2:	select rom 2
           //  311                                            
           //  313                                            
           //  314                                            	.rom @01
           //  315                                            
1000111110 //  316   L01000:  1...11111.                      	b exchange c[s]
1111001111 //  317   L01001:  1111..1111  -> L01363           	go to tan13
           //  318                                            
1100101110 //  319   L01002:  11..1.111.                      tan15:	a exchange b[w]
0011000001 //  320   L01003:  ..11.....1  -> L01060           	jsb tnm11
1011111000 //  321   L01004:  1.11111...                      	data -> c
1110101110 //  322   L01005:  111.1.111.                      	a exchange c[w]
0011000001 //  323   L01006:  ..11.....1  -> L01060           	jsb tnm11
1011111000 //  324   L01007:  1.11111...                      	data -> c
1110101110 //  325   L01010:  111.1.111.                      	a exchange c[w]
1001010100 //  326   L01011:  1..1.1.1..                      tanx:	if s9 # 1
0000110011 //  327   L01012:  ....11..11  -> L01014           	     then go to tan16
1110101110 //  328   L01013:  111.1.111.                      	a exchange c[w]
0101010100 //  329   L01014:  .1.1.1.1..                      tan16:	if s5 # 1
0001101011 //  330   L01015:  ...11.1.11  -> L01032           	     then go to asn12
0001111110 //  331   L01016:  ...111111.                      	if c[s] >= 1
0001000111 //  332   L01017:  ...1...111  -> L01021           	     then go to tan17
1000100100 //  333   L01020:  1...1..1..                      	0 -> s8
0011011110 //  334   L01021:  ..11.1111.                      tan17:	0 -> c[s]
1010011001 //  335   L01022:  1.1..11..1  -> L01246           	jsb div11
1011110000 //  336   L01023:  1.1111....                      asn11:	c -> data
1010010101 //  337   L01024:  1.1..1.1.1  -> L01245           	jsb mpy11
1001100001 //  338   L01025:  1..11....1  -> L01230           	jsb add10
0010110101 //  339   L01026:  ..1.11.1.1  -> L01055           	jsb sqt11
1011111000 //  340   L01027:  1.11111...                      	data -> c
0000010000 //  341   L01030:  .....1....  -> L00031  *****    	select rom 0
           //  342                                            
1110101110 //  343   L01031:  111.1.111.                      asn1z0:	a exchange c[w]
1010011001 //  344   L01032:  1.1..11..1  -> L01246           asn12:	jsb div11
1010010100 //  345   L01033:  1.1..1.1..                      	if s10 # 1
1101101011 //  346   L01034:  11.11.1.11  -> L01332           	     then go to rtn12
1011101110 //  347   L01035:  1.111.111.                      atn11:	0 -> a[w]
1111100010 //  348   L01036:  11111...1.                      	a + 1 -> a[p]
0100100110 //  349   L01037:  .1..1..11.                      	a -> b[m]
1110100110 //  350   L01040:  111.1..11.                      	a exchange c[m]
0101101010 //  351   L01041:  .1.11.1.1.                      atn12:	c - 1 -> c[x]
1010010010 //  352   L01042:  1.1..1..1.                      	shift right b[wp]
0110111010 //  353   L01043:  .11.111.1.                      	if c[xs] = 0
0010000111 //  354   L01044:  ..1....111  -> L01041           	     then go to atn12
1011010010 //  355   L01045:  1.11.1..1.                      atn13:	shift right a[wp]
0111101010 //  356   L01046:  .1111.1.1.                      	c + 1 -> c[x]
0010010111 //  357   L01047:  ..1..1.111  -> L01045           	if no carry go to atn13
1011001110 //  358   L01050:  1.11..111.                      	shift right a[w]
1010001110 //  359   L01051:  1.1...111.                      	shift right b[w]
1011110000 //  360   L01052:  1.1111....                      	c -> data
1000101110 //  361   L01053:  1...1.111.                      atn14:	b exchange c[w]
0100011011 //  362   L01054:  .1...11.11  -> L01106           	go to atn18
           //  363                                            
1000101110 //  364   L01055:  1...1.111.                      sqt11:	b exchange c[w]
0100001100 //  365   L01056:  .1....11..                      	4 -> p
1101111011 //  366   L01057:  11.1111.11  -> L01336           	go to sqt14
           //  367                                            
1011110000 //  368   L01060:  1.1111....                      tnm11:	c -> data
1110101110 //  369   L01061:  111.1.111.                      	a exchange c[w]
0110100010 //  370   L01062:  .11.1...1.                      	if c[p] = 0
0011010111 //  371   L01063:  ..11.1.111  -> L01065           	     then go to tnm12
0010101110 //  372   L01064:  ..1.1.111.                      	0 - c -> c[w]
0110001110 //  373   L01065:  .11...111.                      tnm12:	c -> a[w]
0010001010 //  374   L01066:  ..1...1.1.                      	b -> c[x]
1100101111 //  375   L01067:  11..1.1111  -> L01313           	go to add15
           //  376                                            
0000100111 //  377   L01070:  ....1..111  -> L01011           tanxz0:	go to tanx
           //  378                                            
0000010000 //  379   L01071:  .....1....  -> L00072  *****    tploxj:	select rom 0
           //  380                                            
0101010100 //  381   L01072:  .1.1.1.1..                      sin12:	if s5 # 1
0001110111 //  382   L01073:  ...111.111  -> L01035           	     then go to atn11
0011111110 //  383   L01074:  ..1111111.                      	0 - c - 1 -> c[s]
1110111110 //  384   L01075:  111.11111.                      	a exchange c[s]
0001001111 //  385   L01076:  ...1..1111  -> L01023           	go to asn11
           //  386                                            
1010010010 //  387   L01077:  1.1..1..1.                      atn15:	shift right b[wp]
1101111110 //  388   L01100:  11.111111.                      atn16:	a - 1 -> a[s]
0011111111 //  389   L01101:  ..11111111  -> L01077           	if no carry go to atn15
0111111110 //  390   L01102:  .11111111.                      	c + 1 -> c[s]
1100110010 //  391   L01103:  11..11..1.                      	a exchange b[wp]
0111010010 //  392   L01104:  .111.1..1.                      	a + c -> c[wp]
1100101110 //  393   L01105:  11..1.111.                      	a exchange b[w]
0100101110 //  394   L01106:  .1..1.111.                      atn18:	a -> b[w]
1101010010 //  395   L01107:  11.1.1..1.                      	a - c -> a[wp]
0100000011 //  396   L01110:  .1......11  -> L01100           	if no carry go to atn16
1110101110 //  397   L01111:  111.1.111.                      	a exchange c[w]
1011111000 //  398   L01112:  1.11111...                      	data -> c
1001001110 //  399   L01113:  1..1..111.                      	shift right c[w]
1110111110 //  400   L01114:  111.11111.                      	a exchange c[s]
1100101110 //  401   L01115:  11..1.111.                      	a exchange b[w]
0100010010 //  402   L01116:  .1...1..1.                      	shift left a[wp]
1011110000 //  403   L01117:  1.1111....                      	c -> data
1111111110 //  404   L01120:  111111111.                      	a + 1 -> a[s]
1111111110 //  405   L01121:  111111111.                      	a + 1 -> a[s]
0010101111 //  406   L01122:  ..1.1.1111  -> L01053           	if no carry go to atn14
0011001110 //  407   L01123:  ..11..111.                      	0 -> c[w]
0000101010 //  408   L01124:  ....1.1.1.                      	0 -> b[x]
1011010110 //  409   L01125:  1.11.1.11.                      	shift right a[ms]
1011001001 //  410   L01126:  1.11..1..1  -> L01262           	jsb div14
1101100010 //  411   L01127:  11.11...1.                      	a - 1 -> a[p]
1011111000 //  412   L01130:  1.11111...                      	data -> c
0100001100 //  413   L01131:  .1....11..                      	4 -> p
1010010001 //  414   L01132:  1.1..1...1  -> L01244           atn17:	jsb pqo13
0110001100 //  415   L01133:  .11...11..                      	6 -> p
1001101101 //  416   L01134:  1..11.11.1  -> L01233           	jsb pmu11
1000001100 //  417   L01135:  1.....11..                      	8 -> p
1001101101 //  418   L01136:  1..11.11.1  -> L01233           	jsb pmu11
0010001100 //  419   L01137:  ..1...11..                      	2 -> p
1000011000 //  420   L01140:  1....11...                      	load constant 8
1010001100 //  421   L01141:  1.1...11..                      	10 -> p
1001101101 //  422   L01142:  1..11.11.1  -> L01233           	jsb pmu11
1000111001 //  423   L01143:  1...111..1  -> L01216           	jsb atcd1
1001101101 //  424   L01144:  1..11.11.1  -> L01233           	jsb pmu11
1100110001 //  425   L01145:  11..11...1  -> L01314           	jsb atc1
0100001110 //  426   L01146:  .1....111.                      	shift left a[w]
1001101101 //  427   L01147:  1..11.11.1  -> L01233           	jsb pmu11
0010001110 //  428   L01150:  ..1...111.                      	b -> c[w]
1100101101 //  429   L01151:  11..1.11.1  -> L01313           	jsb add15
1100110001 //  430   L01152:  11..11...1  -> L01314           tan12:	jsb atc1
1010101110 //  431   L01153:  1.1.1.111.                      	c + c -> c[w]
1010010100 //  432   L01154:  1.1..1.1..                      	if s10 # 1
0111010111 //  433   L01155:  .111.1.111  -> L01165           	     then go to rom0
1001010100 //  434   L01156:  1..1.1.1..                      	if s9 # 1
0111010111 //  435   L01157:  .111.1.111  -> L01165           	     then go to rom0
1110101110 //  436   L01160:  111.1.111.                      	a exchange c[w]
0011111110 //  437   L01161:  ..1111111.                      	0 - c - 1 -> c[s]
1001101001 //  438   L01162:  1..11.1..1  -> L01232           	jsb add11
1100110001 //  439   L01163:  11..11...1  -> L01314           	jsb atc1
1010101110 //  440   L01164:  1.1.1.111.                      	c + c -> c[w]
0000010000 //  441   L01165:  .....1....  -> L00166  *****    rom0:	select rom 0
           //  442                                            
1100110001 //  443   L01166:  11..11...1  -> L01314           lpi11:	jsb atc1
1010101110 //  444   L01167:  1.1.1.111.                      	c + c -> c[w]
1010101110 //  445   L01170:  1.1.1.111.                      	c + c -> c[w]
1001010101 //  446   L01171:  1..1.1.1.1  -> L01225           	jsb rtn11
1010101110 //  447   L01172:  1.1.1.111.                      	c + c -> c[w]
1110101101 //  448   L01173:  111.1.11.1  -> L01353           	jsb pre11
1100110001 //  449   L01174:  11..11...1  -> L01314           	jsb atc1
1010001100 //  450   L01175:  1.1...11..                      	10 -> p
1001110001 //  451   L01176:  1..111...1  -> L01234           	jsb pqo11
1000111001 //  452   L01177:  1...111..1  -> L01216           	jsb atcd1
1000001100 //  453   L01200:  1.....11..                      	8 -> p
1001110101 //  454   L01201:  1..111.1.1  -> L01235           	jsb pqo12
0010001100 //  455   L01202:  ..1...11..                      	2 -> p
1000011000 //  456   L01203:  1....11...                      	load constant 8
0110001100 //  457   L01204:  .11...11..                      	6 -> p
1001110001 //  458   L01205:  1..111...1  -> L01234           	jsb pqo11
0100001100 //  459   L01206:  .1....11..                      	4 -> p
1001110001 //  460   L01207:  1..111...1  -> L01234           	jsb pqo11
1001110001 //  461   L01210:  1..111...1  -> L01234           	jsb pqo11
1100101110 //  462   L01211:  11..1.111.                      	a exchange b[w]
1001001110 //  463   L01212:  1..1..111.                      	shift right c[w]
1101001100 //  464   L01213:  11.1..11..                      	13 -> p
0101011000 //  465   L01214:  .1.1.11...                      	load constant 5
1111110011 //  466   L01215:  111111..11  -> L01374           	go to tan14
           //  467                                            
0110001100 //  468   L01216:  .11...11..                      atcd1:	6 -> p
1000011000 //  469   L01217:  1....11...                      	load constant 8
0110011000 //  470   L01220:  .11..11...                      	load constant 6
0101011000 //  471   L01221:  .1.1.11...                      	load constant 5
0010011000 //  472   L01222:  ..1..11...                      	load constant 2
0100011000 //  473   L01223:  .1...11...                      	load constant 4
1001011000 //  474   L01224:  1..1.11...                      	load constant 9
0001010100 //  475   L01225:  ...1.1.1..                      rtn11:	if s1 # 1
1101101011 //  476   L01226:  11.11.1.11  -> L01332           	     then go to rtn12
0000110000 //  477   L01227:  ....11....                      	return
           //  478                                            
1011101110 //  479   L01230:  1.111.111.                      add10:	0 -> a[w]
1111100010 //  480   L01231:  11111...1.                      	a + 1 -> a[p]
0000010000 //  481   L01232:  .....1....  -> L00233  *****    add11:	select rom 0
           //  482                                            
0100010000 //  483   L01233:  .1...1....  -> L02234  *****    pmu11:	select rom 2
           //  484                                            
0100001110 //  485   L01234:  .1....111.                      pqo11:	shift left a[w]
1010010110 //  486   L01235:  1.1..1.11.                      pqo12:	shift right b[ms]
1000101110 //  487   L01236:  1...1.111.                      	b exchange c[w]
1010000111 //  488   L01237:  1.1....111  -> L01241           	go to pqo16
           //  489                                            
0111111110 //  490   L01240:  .11111111.                      pqo15:	c + 1 -> c[s]
1100001110 //  491   L01241:  11....111.                      pqo16:	a - b -> a[w]
1010000011 //  492   L01242:  1.1.....11  -> L01240           	if no carry go to pqo15
1110001110 //  493   L01243:  111...111.                      	a + b -> a[w]
0100010000 //  494   L01244:  .1...1....  -> L02245  *****    pqo13:	select rom 2
           //  495                                            
0100010000 //  496   L01245:  .1...1....  -> L02246  *****    mpy11:	select rom 2
           //  497                                            
0101001010 //  498   L01246:  .1.1..1.1.                      div11:	a - c -> c[x]
0100010000 //  499   L01247:  .1...1....  -> L02250  *****    	select rom 2
           //  500                                            
0111100010 //  501   L01250:  .1111...1.                      sqt15:	c + 1 -> c[p]
1101001110 //  502   L01251:  11.1..111.                      sqt16:	a - c -> a[w]
1010100011 //  503   L01252:  1.1.1...11  -> L01250           	if no carry go to sqt15
1111001110 //  504   L01253:  1111..111.                      	a + c -> a[w]
0100001110 //  505   L01254:  .1....111.                      	shift left a[w]
0000011100 //  506   L01255:  .....111..                      	p - 1 -> p
1001010010 //  507   L01256:  1..1.1..1.                      sqt17:	shift right c[wp]
0000101100 //  508   L01257:  ....1.11..                      	if p # 0
1010100111 //  509   L01260:  1.1.1..111  -> L01251           	     then go to sqt16
0011010111 //  510   L01261:  ..11.1.111  -> L01065           	go to tnm12
           //  511                                            
0111100010 //  512   L01262:  .1111...1.                      div14:	c + 1 -> c[p]
1100010110 //  513   L01263:  11...1.11.                      div15:	a - b -> a[ms]
1011001011 //  514   L01264:  1.11..1.11  -> L01262           	if no carry go to div14
1110010110 //  515   L01265:  111..1.11.                      	a + b -> a[ms]
0100010110 //  516   L01266:  .1...1.11.                      	shift left a[ms]
0000011100 //  517   L01267:  .....111..                      div16:	p - 1 -> p
0000101100 //  518   L01270:  ....1.11..                      	if p # 0
1011001111 //  519   L01271:  1.11..1111  -> L01263           	     then go to div15
0011010111 //  520   L01272:  ..11.1.111  -> L01065           	go to tnm12
           //  521                                            
0000011100 //  522   L01273:  .....111..                      sqt12:	p - 1 -> p
1110010110 //  523   L01274:  111..1.11.                      	a + b -> a[ms]
1101101111 //  524   L01275:  11.11.1111  -> L01333           	if no carry go to sqt18
0000010000 //  525   L01276:  .....1....  -> L00277  *****    	select rom 0
           //  526                                            
0101111010 //  527   L01277:  .1.1111.1.                      add12:	c - 1 -> c[xs]
0101111010 //  528   L01300:  .1.1111.1.                      	c - 1 -> c[xs]
1011101010 //  529   L01301:  1.111.1.1.                      	0 -> a[x]
1101011110 //  530   L01302:  11.1.1111.                      	a - c -> a[s]
1001111110 //  531   L01303:  1..111111.                      	if a[s] >= 1
1100011011 //  532   L01304:  11...11.11  -> L01306           	     then go to add13
0100010000 //  533   L01305:  .1...1....  -> L02306  *****    	select rom 2
           //  534                                            
1000000110 //  535   L01306:  1......11.                      add13:	if a >= b[m]
1100101011 //  536   L01307:  11..1.1.11  -> L01312           	     then go to add14
0011111110 //  537   L01310:  ..1111111.                      	0 - c - 1 -> c[s]
1100101110 //  538   L01311:  11..1.111.                      	a exchange b[w]
1100001110 //  539   L01312:  11....111.                      add14:	a - b -> a[w]
0100010000 //  540   L01313:  .1...1....  -> L02314  *****    add15:	select rom 2
0011001110 //  541   L01314:  ..11..111.                      atc1:	0 -> c[w]
1011001100 //  542   L01315:  1.11..11..                      	11 -> p
0111011000 //  543   L01316:  .111.11...                      	load constant 7
1000011000 //  544   L01317:  1....11...                      	load constant 8
0101011000 //  545   L01320:  .1.1.11...                      	load constant 5
0011011000 //  546   L01321:  ..11.11...                      	load constant 3
1001011000 //  547   L01322:  1..1.11...                      	load constant 9
1000011000 //  548   L01323:  1....11...                      	load constant 8
0001011000 //  549   L01324:  ...1.11...                      	load constant 1
0110011000 //  550   L01325:  .11..11...                      	load constant 6
0011011000 //  551   L01326:  ..11.11...                      	load constant 3
0101011000 //  552   L01327:  .1.1.11...                      	load constant 5
0000010000 //  553   L01330:  .....1....  -> L00331  *****    	select rom 0
           //  554                                            
0000110000 //  555   L01331:  ....11....                      	return
           //  556                                            
0000010000 //  557   L01332:  .....1....  -> L00333  *****    rtn12:	select rom 0
           //  558                                            
1110001010 //  559   L01333:  111...1.1.                      sqt18:	a + b -> a[x]
1101111011 //  560   L01334:  11.1111.11  -> L01336           	if no carry go to sqt14
0101100010 //  561   L01335:  .1.11...1.                      	c - 1 -> c[p]
0111111110 //  562   L01336:  .11111111.                      sqt14:	c + 1 -> c[s]
0000101100 //  563   L01337:  ....1.11..                      	if p # 0
1011101111 //  564   L01340:  1.111.1111  -> L01273           	     then go to sqt12
1110101010 //  565   L01341:  111.1.1.1.                      	a exchange c[x]
1011101010 //  566   L01342:  1.111.1.1.                      	0 -> a[x]
0001100010 //  567   L01343:  ...11...1.                      	if c[p] >= 1
1110011011 //  568   L01344:  111..11.11  -> L01346           	     then go to sqt13
1011001110 //  569   L01345:  1.11..111.                      	shift right a[w]
1001001110 //  570   L01346:  1..1..111.                      sqt13:	shift right c[w]
1000101010 //  571   L01347:  1...1.1.1.                      	b exchange c[x]
0011001010 //  572   L01350:  ..11..1.1.                      	0 -> c[x]
1100001100 //  573   L01351:  11....11..                      	12 -> p
1010111011 //  574   L01352:  1.1.111.11  -> L01256           	go to sqt17
           //  575                                            
0100010000 //  576   L01353:  .1...1....  -> L02354  *****    pre11:	select rom 2
           //  577                                            
1010010010 //  578   L01354:  1.1..1..1.                      tan18:	shift right b[wp]
1010010010 //  579   L01355:  1.1..1..1.                      	shift right b[wp]
0101111110 //  580   L01356:  .1.111111.                      tan19:	c - 1 -> c[s]
1110110011 //  581   L01357:  111.11..11  -> L01354           	if no carry go to tan18
0111010010 //  582   L01360:  .111.1..1.                      	a + c -> c[wp]
1100010010 //  583   L01361:  11...1..1.                      	a - b -> a[wp]
1000110010 //  584   L01362:  1...11..1.                      	b exchange c[wp]
0010001110 //  585   L01363:  ..1...111.                      tan13:	b -> c[w]
1101111110 //  586   L01364:  11.111111.                      	a - 1 -> a[s]
1110111011 //  587   L01365:  111.111.11  -> L01356           	if no carry go to tan19
1110111110 //  588   L01366:  111.11111.                      	a exchange c[s]
1011111000 //  589   L01367:  1.11111...                      	data -> c
1110101110 //  590   L01370:  111.1.111.                      	a exchange c[w]
0000011110 //  591   L01371:  .....1111.                      	if b[s] = 0
0000001011 //  592   L01372:  ......1.11  -> L01002           	     then go to tan15
0100001110 //  593   L01373:  .1....111.                      	shift left a[w]
1110110010 //  594   L01374:  111.11..1.                      tan14:	a exchange c[wp]
1011110000 //  595   L01375:  1.1111....                      	c -> data
1010010010 //  596   L01376:  1.1..1..1.                      	shift right b[wp]
0101111110 //  597   L01377:  .1.111111.                      	c - 1 -> c[s]
           //  598                                            
           //  600                                            
           //  601                                            	.rom @02
           //  602                                            
1100010000 //  603   L02000:  11...1....  -> L06001  *****    err21:	select rom 6
1100111110 //  604   L02001:  11..11111.                      ln24:	a exchange b[s]
1111111110 //  605   L02002:  111111111.                      	a + 1 -> a[s]
1001010110 //  606   L02003:  1..1.1.11.                      	shift right c[ms]
0100010010 //  607   L02004:  .1...1..1.                      	shift left a[wp]
0001001011 //  608   L02005:  ...1..1.11  -> L02022           	go to ln26
           //  609                                            
0110101000 //  610   L02006:  .11.1.1...                      xty22:	stack -> a
1010011001 //  611   L02007:  1.1..11..1  -> L02246           	jsb mpy21
           //  612                                            
0110001110 //  613   L02010:  .11...111.                      xty21:	c -> a[w]
1000010100 //  614   L02011:  1....1.1..                      	if s8 # 1
0100001011 //  615   L02012:  .1....1.11  -> L02102           	     then go to exp21
1011101110 //  616   L02013:  1.111.111.                      ln22:	0 -> a[w]
1101000110 //  617   L02014:  11.1...11.                      	a - c -> a[m]
0000000011 //  618   L02015:  ........11  -> L02000           	if no carry go to err21
1011001110 //  619   L02016:  1.11..111.                      	shift right a[w]
0101111110 //  620   L02017:  .1.111111.                      	c - 1 -> c[s]
0000000011 //  621   L02020:  ........11  -> L02000           	if no carry go to err21
0111111110 //  622   L02021:  .11111111.                      ln25:	c + 1 -> c[s]
0100101110 //  623   L02022:  .1..1.111.                      ln26:	a -> b[w]
1001011001 //  624   L02023:  1..1.11..1  -> L02226           	jsb eca22
1101100010 //  625   L02024:  11.11...1.                      	a - 1 -> a[p]
0001000111 //  626   L02025:  ...1...111  -> L02021           	if no carry go to ln25
1100110010 //  627   L02026:  11..11..1.                      	a exchange b[wp]
1110011110 //  628   L02027:  111..1111.                      	a + b -> a[s]
0000000111 //  629   L02030:  .......111  -> L02001           	if no carry go to ln24
0111001100 //  630   L02031:  .111..11..                      	7 -> p
0110110101 //  631   L02032:  .11.11.1.1  -> L02155           	jsb pqo23
1000001100 //  632   L02033:  1.....11..                      	8 -> p
1001110101 //  633   L02034:  1..111.1.1  -> L02235           	jsb pmu22
1001001100 //  634   L02035:  1..1..11..                      	9 -> p
1001110001 //  635   L02036:  1..111...1  -> L02234           	jsb pmu21
1111111001 //  636   L02037:  1111111..1  -> L02376           	jsb lncd3
1010001100 //  637   L02040:  1.1...11..                      	10 -> p
1001110001 //  638   L02041:  1..111...1  -> L02234           	jsb pmu21
0111110101 //  639   L02042:  .11111.1.1  -> L02175           	jsb lncd2
1011001100 //  640   L02043:  1.11..11..                      	11 -> p
1001110001 //  641   L02044:  1..111...1  -> L02234           	jsb pmu21
1101111101 //  642   L02045:  11.11111.1  -> L02337           	jsb lncd1
1001110001 //  643   L02046:  1..111...1  -> L02234           	jsb pmu21
1011100101 //  644   L02047:  1.111..1.1  -> L02271           	jsb lnc2
1001110001 //  645   L02050:  1..111...1  -> L02234           	jsb pmu21
1111011001 //  646   L02051:  1111.11..1  -> L02366           	jsb lnc10
1110101110 //  647   L02052:  111.1.111.                      	a exchange c[w]
0101001110 //  648   L02053:  .1.1..111.                      	a - c -> c[w]
0000011010 //  649   L02054:  .....11.1.                      	if b[xs] = 0
0010111111 //  650   L02055:  ..1.111111  -> L02057           	     then go to ln27
0101001110 //  651   L02056:  .1.1..111.                      	a - c -> c[w]
1100101110 //  652   L02057:  11..1.111.                      ln27:	a exchange b[w]
0000011100 //  653   L02060:  .....111..                      ln28:	p - 1 -> p
0100001110 //  654   L02061:  .1....111.                      	shift left a[w]
0001101100 //  655   L02062:  ...11.11..                      	if p # 1
0011000011 //  656   L02063:  ..11....11  -> L02060           	     then go to ln28
1110101110 //  657   L02064:  111.1.111.                      	a exchange c[w]
0110111110 //  658   L02065:  .11.11111.                      	if c[s] = 0
0011100011 //  659   L02066:  ..111...11  -> L02070           	     then go to ln29
0011100110 //  660   L02067:  ..111..11.                      	0 - c - 1 -> c[m]
0111101010 //  661   L02070:  .1111.1.1.                      ln29:	c + 1 -> c[x]
1011001100 //  662   L02071:  1.11..11..                      	11 -> p
1100010101 //  663   L02072:  11...1.1.1  -> L02305           	jsb mpy27
1001010100 //  664   L02073:  1..1.1.1..                      	if s9 # 1
0000011011 //  665   L02074:  .....11.11  -> L02006           	     then go to xty22
0101010100 //  666   L02075:  .1.1.1.1..                      	if s5 # 1
1001010011 //  667   L02076:  1..1.1..11  -> L02224           	     then go to rtn21
1111011001 //  668   L02077:  1111.11..1  -> L02366           	jsb lnc10
1010011101 //  669   L02100:  1.1..111.1  -> L02247           	jsb mpy22
1001010011 //  670   L02101:  1..1.1..11  -> L02224           	go to rtn21
           //  671                                            
1111011001 //  672   L02102:  1111.11..1  -> L02366           exp21:	jsb lnc10
1110110001 //  673   L02103:  111.11...1  -> L02354           	jsb pre21
1011100101 //  674   L02104:  1.111..1.1  -> L02271           	jsb lnc2
1011001100 //  675   L02105:  1.11..11..                      	11 -> p
1001101101 //  676   L02106:  1..11.11.1  -> L02233           	jsb pqo21
1101111101 //  677   L02107:  11.11111.1  -> L02337           	jsb lncd1
1010001100 //  678   L02110:  1.1...11..                      	10 -> p
1001101101 //  679   L02111:  1..11.11.1  -> L02233           	jsb pqo21
0111110101 //  680   L02112:  .11111.1.1  -> L02175           	jsb lncd2
1001001100 //  681   L02113:  1..1..11..                      	9 -> p
1001101101 //  682   L02114:  1..11.11.1  -> L02233           	jsb pqo21
1111111001 //  683   L02115:  1111111..1  -> L02376           	jsb lncd3
1000001100 //  684   L02116:  1.....11..                      	8 -> p
1001101101 //  685   L02117:  1..11.11.1  -> L02233           	jsb pqo21
1001101101 //  686   L02120:  1..11.11.1  -> L02233           	jsb pqo21
1001101101 //  687   L02121:  1..11.11.1  -> L02233           	jsb pqo21
0110001100 //  688   L02122:  .11...11..                      	6 -> p
1011110010 //  689   L02123:  1.1111..1.                      	0 -> a[wp]
1101001100 //  690   L02124:  11.1..11..                      	13 -> p
1000101110 //  691   L02125:  1...1.111.                      	b exchange c[w]
1110101110 //  692   L02126:  111.1.111.                      	a exchange c[w]
0110011000 //  693   L02127:  .11..11...                      	load constant 6
1000111011 //  694   L02130:  1...111.11  -> L02216           	go to exp23
           //  695                                            
0010010100 //  696   L02131:  ..1..1.1..                      pre23:	if s2 # 1
0101111011 //  697   L02132:  .1.1111.11  -> L02136           	     then go to pre24
1111101010 //  698   L02133:  11111.1.1.                      	a + 1 -> a[x]
1001111010 //  699   L02134:  1..1111.1.                      pre29:	if a[xs] >= 1
1100001011 //  700   L02135:  11....1.11  -> L02302           	     then go to pre27
1100010110 //  701   L02136:  11...1.11.                      pre24:	a - b -> a[ms]
0101100111 //  702   L02137:  .1.11..111  -> L02131           	if no carry go to pre23
1110010110 //  703   L02140:  111..1.11.                      	a + b -> a[ms]
0100001110 //  704   L02141:  .1....111.                      	shift left a[w]
0101101010 //  705   L02142:  .1.11.1.1.                      	c - 1 -> c[x]
0101110011 //  706   L02143:  .1.111..11  -> L02134           	if no carry go to pre29
1011001110 //  707   L02144:  1.11..111.                      pre25:	shift right a[w]
0011010010 //  708   L02145:  ..11.1..1.                      	0 -> c[wp]
1110101010 //  709   L02146:  111.1.1.1.                      	a exchange c[x]
0110111110 //  710   L02147:  .11.11111.                      pre26:	if c[s] = 0
0110110011 //  711   L02150:  .11.11..11  -> L02154           	     then go to pre28
1100101110 //  712   L02151:  11..1.111.                      	a exchange b[w]
1100001110 //  713   L02152:  11....111.                      	a - b -> a[w]
0011101110 //  714   L02153:  ..111.111.                      	0 - c - 1 -> c[w]
1011001110 //  715   L02154:  1.11..111.                      pre28:	shift right a[w]
1000101110 //  716   L02155:  1...1.111.                      pqo23:	b exchange c[w]
0011001110 //  717   L02156:  ..11..111.                      	0 -> c[w]
0101100110 //  718   L02157:  .1.11..11.                      	c - 1 -> c[m]
0010010100 //  719   L02160:  ..1..1.1..                      	if s2 # 1
0111011011 //  720   L02161:  .111.11.11  -> L02166           	     then go to pqo28
0100011000 //  721   L02162:  .1...11...                      	load constant 4
0111100110 //  722   L02163:  .1111..11.                      	c + 1 -> c[m]
0111100111 //  723   L02164:  .1111..111  -> L02171           	if no carry go to pqo24
0110011000 //  724   L02165:  .11..11...                      pqo27:	load constant 6
0001101100 //  725   L02166:  ...11.11..                      pqo28:	if p # 1
0111010111 //  726   L02167:  .111.1.111  -> L02165           	     then go to pqo27
1001001110 //  727   L02170:  1..1..111.                      	shift right c[w]
1001001110 //  728   L02171:  1..1..111.                      pqo24:	shift right c[w]
0010010100 //  729   L02172:  ..1..1.1..                      nrm26:	if s2 # 1
1001010011 //  730   L02173:  1..1.1..11  -> L02224           	     then go to rtn21
0000110000 //  731   L02174:  ....11....                      	return
           //  732                                            
0111001100 //  733   L02175:  .111..11..                      lncd2:	7 -> p
0011011000 //  734   L02176:  ..11.11...                      lnc6:	load constant 3
0011011000 //  735   L02177:  ..11.11...                      	load constant 3
0000011000 //  736   L02200:  .....11...                      	load constant 0
1000011000 //  737   L02201:  1....11...                      lnc7:	load constant 8
0101011000 //  738   L02202:  .1.1.11...                      	load constant 5
0000011000 //  739   L02203:  .....11...                      	load constant 0
1001011000 //  740   L02204:  1..1.11...                      	load constant 9
1110101011 //  741   L02205:  111.1.1.11  -> L02352           	go to lnc9
           //  742                                            
1001011001 //  743   L02206:  1..1.11..1  -> L02226           exp29:	jsb eca22
1111100010 //  744   L02207:  11111...1.                      	a + 1 -> a[p]
0100101110 //  745   L02210:  .1..1.111.                      exp22:	a -> b[w]
0101111110 //  746   L02211:  .1.111111.                      	c - 1 -> c[s]
1000011011 //  747   L02212:  1....11.11  -> L02206           	if no carry go to exp29
1011010010 //  748   L02213:  1.11.1..1.                      	shift right a[wp]
1110101110 //  749   L02214:  111.1.111.                      	a exchange c[w]
0100010110 //  750   L02215:  .1...1.11.                      	shift left a[ms]
1110101110 //  751   L02216:  111.1.111.                      exp23:	a exchange c[w]
1101111110 //  752   L02217:  11.111111.                      	a - 1 -> a[s]
1000100011 //  753   L02220:  1...1...11  -> L02210           	if no carry go to exp22
1100101110 //  754   L02221:  11..1.111.                      	a exchange b[w]
1111100010 //  755   L02222:  11111...1.                      	a + 1 -> a[p]
1100110001 //  756   L02223:  11..11...1  -> L02314           	jsb nrm21
0010010000 //  757   L02224:  ..1..1....  -> L01225  *****    rtn21:	select rom 1
           //  758                                            
1011010010 //  759   L02225:  1.11.1..1.                      eca21:	shift right a[wp]
1101111110 //  760   L02226:  11.111111.                      eca22:	a - 1 -> a[s]
1001010111 //  761   L02227:  1..1.1.111  -> L02225           	if no carry go to eca21
1011111110 //  762   L02230:  1.1111111.                      	0 -> a[s]
1110001110 //  763   L02231:  111...111.                      	a + b -> a[w]
0000110000 //  764   L02232:  ....11....                      	return
           //  765                                            
0010010000 //  766   L02233:  ..1..1....  -> L01234  *****    pqo21:	select rom 1
           //  767                                            
1011001110 //  768   L02234:  1.11..111.                      pmu21:	shift right a[w]
1000101110 //  769   L02235:  1...1.111.                      pmu22:	b exchange c[w]
1010000011 //  770   L02236:  1.1.....11  -> L02240           	go to pmu24
           //  771                                            
1110001110 //  772   L02237:  111...111.                      pmu23:	a + b -> a[w]
0101111110 //  773   L02240:  .1.111111.                      pmu24:	c - 1 -> c[s]
1001111111 //  774   L02241:  1..1111111  -> L02237           	if no carry go to pmu23
1110101110 //  775   L02242:  111.1.111.                      	a exchange c[w]
0100010110 //  776   L02243:  .1...1.11.                      	shift left a[ms]
1110101110 //  777   L02244:  111.1.111.                      	a exchange c[w]
0110110111 //  778   L02245:  .11.11.111  -> L02155           	go to pqo23
           //  779                                            
0011001100 //  780   L02246:  ..11..11..                      mpy21:	3 -> p
0111001010 //  781   L02247:  .111..1.1.                      mpy22:	a + c -> c[x]
0101011110 //  782   L02250:  .1.1.1111.                      div21:	a - c -> c[s]
1010101111 //  783   L02251:  1.1.1.1111  -> L02253           	if no carry go to div22
0010111110 //  784   L02252:  ..1.11111.                      	0 - c -> c[s]
1100100110 //  785   L02253:  11..1..11.                      div22:	a exchange b[m]
1011101110 //  786   L02254:  1.111.111.                      	0 -> a[w]
1100101100 //  787   L02255:  11..1.11..                      	if p # 12
1100010111 //  788   L02256:  11...1.111  -> L02305           	     then go to mpy27
0001100110 //  789   L02257:  ...11..11.                      	if c[m] >= 1
1011011011 //  790   L02260:  1.11.11.11  -> L02266           	     then go to div23
0001010100 //  791   L02261:  ...1.1.1..                      	if s1 # 1
0000000011 //  792   L02262:  ........11  -> L02000           	     then go to err21
1010010000 //  793   L02263:  1.1..1....  -> L05264  *****    	select rom 5
1101101111 //  794   L02264:  11.11.1111  -> L02333           	go to nrm25
           //  795                                            
0000000000 //  796   L02265:  ..........                      	no operation
           //  797                                            
1000110010 //  798   L02266:  1...11..1.                      div23:	b exchange c[wp]
1110100110 //  799   L02267:  111.1..11.                      	a exchange c[m]
0010010000 //  800   L02270:  ..1..1....  -> L01271  *****    	select rom 1
           //  801                                            
1000100100 //  802   L02271:  1...1..1..                      lnc2:	0 -> s8
0110011000 //  803   L02272:  .11..11...                      	load constant 6
1001011000 //  804   L02273:  1..1.11...                      	load constant 9
0011011000 //  805   L02274:  ..11.11...                      	load constant 3
0001011000 //  806   L02275:  ...1.11...                      	load constant 1
0100011000 //  807   L02276:  .1...11...                      	load constant 4
0111011000 //  808   L02277:  .111.11...                      	load constant 7
0001011000 //  809   L02300:  ...1.11...                      	load constant 1
1110011011 //  810   L02301:  111..11.11  -> L02346           	go to lnc8
           //  811                                            
1111100110 //  812   L02302:  11111..11.                      pre27:	a + 1 -> a[m]
0110010011 //  813   L02303:  .11..1..11  -> L02144           	if no carry go to pre25
1110001110 //  814   L02304:  111...111.                      mpy26:	a + b -> a[w]
0101100010 //  815   L02305:  .1.11...1.                      mpy27:	c - 1 -> c[p]
1100010011 //  816   L02306:  11...1..11  -> L02304           	if no carry go to mpy26
1011001110 //  817   L02307:  1.11..111.                      mpy28:	shift right a[w]
0000111100 //  818   L02310:  ....1111..                      	p + 1 -> p
1101101100 //  819   L02311:  11.11.11..                      	if p # 13
1100010111 //  820   L02312:  11...1.111  -> L02305           	     then go to mpy27
0111101010 //  821   L02313:  .1111.1.1.                      nrm20:	c + 1 -> c[x]
1011111110 //  822   L02314:  1.1111111.                      nrm21:	0 -> a[s]
1100001100 //  823   L02315:  11....11..                      	12 -> p
0000101110 //  824   L02316:  ....1.111.                      	0 -> b[w]
1001100010 //  825   L02317:  1..11...1.                      nrm23:	if a[p] >= 1
1101011011 //  826   L02320:  11.1.11.11  -> L02326           	     then go to nrm24
0100001110 //  827   L02321:  .1....111.                      	shift left a[w]
0101101010 //  828   L02322:  .1.11.1.1.                      	c - 1 -> c[x]
1001101110 //  829   L02323:  1..11.111.                      	if a[w] >= 1
1100111111 //  830   L02324:  11..111111  -> L02317           	     then go to nrm23
0011001110 //  831   L02325:  ..11..111.                      	0 -> c[w]
0100101010 //  832   L02326:  .1..1.1.1.                      nrm24:	a -> b[x]
1110001110 //  833   L02327:  111...111.                      	a + b -> a[w]
1001111110 //  834   L02330:  1..111111.                      	if a[s] >= 1
1100011111 //  835   L02331:  11...11111  -> L02307           	     then go to mpy28
1110100110 //  836   L02332:  111.1..11.                      	a exchange c[m]
0110001110 //  837   L02333:  .11...111.                      nrm25:	c -> a[w]
0000101110 //  838   L02334:  ....1.111.                      	0 -> b[w]
1100001100 //  839   L02335:  11....11..                      nrm27:	12 -> p
0111101011 //  840   L02336:  .1111.1.11  -> L02172           	go to nrm26
           //  841                                            
1001001100 //  842   L02337:  1..1..11..                      lncd1:	9 -> p
0011011000 //  843   L02340:  ..11.11...                      	load constant 3
0001011000 //  844   L02341:  ...1.11...                      	load constant 1
0000011000 //  845   L02342:  .....11...                      	load constant 0
0001011000 //  846   L02343:  ...1.11...                      	load constant 1
0111011000 //  847   L02344:  .111.11...                      	load constant 7
1001011000 //  848   L02345:  1..1.11...                      	load constant 9
1000011000 //  849   L02346:  1....11...                      lnc8:	load constant 8
0000011000 //  850   L02347:  .....11...                      	load constant 0
0101011000 //  851   L02350:  .1.1.11...                      	load constant 5
0101011000 //  852   L02351:  .1.1.11...                      	load constant 5
0011011000 //  853   L02352:  ..11.11...                      lnc9:	load constant 3
1101110111 //  854   L02353:  11.111.111  -> L02335           	go to nrm27
           //  855                                            
1110101110 //  856   L02354:  111.1.111.                      pre21:	a exchange c[w]
0100101110 //  857   L02355:  .1..1.111.                      	a -> b[w]
0110000110 //  858   L02356:  .11....11.                      	c -> a[m]
1010111010 //  859   L02357:  1.1.111.1.                      	c + c -> c[xs]
0101111011 //  860   L02360:  .1.1111.11  -> L02136           	if no carry go to pre24
0111111010 //  861   L02361:  .111111.1.                      	c + 1 -> c[xs]
1011001110 //  862   L02362:  1.11..111.                      pre22:	shift right a[w]
0111101010 //  863   L02363:  .1111.1.1.                      	c + 1 -> c[x]
1111001011 //  864   L02364:  1111..1.11  -> L02362           	if no carry go to pre22
0110011111 //  865   L02365:  .11..11111  -> L02147           	go to pre26
           //  866                                            
0011001110 //  867   L02366:  ..11..111.                      lnc10:	0 -> c[w]
1100001100 //  868   L02367:  11....11..                      	12 -> p
0010011000 //  869   L02370:  ..1..11...                      	load constant 2
0011011000 //  870   L02371:  ..11.11...                      	load constant 3
0000011000 //  871   L02372:  .....11...                      	load constant 0
0010011000 //  872   L02373:  ..1..11...                      	load constant 2
0101011000 //  873   L02374:  .1.1.11...                      	load constant 5
1000000111 //  874   L02375:  1......111  -> L02201           	go to lnc7
           //  875                                            
0101001100 //  876   L02376:  .1.1..11..                      lncd3:	5 -> p
0111111011 //  877   L02377:  .111111.11  -> L02176           	go to lnc6
           //  878                                            
           //  880                                            
           //  881                                            	.rom @03
           //  882                                            
1000010000 //  883   L03000:  1....1....  -> L04001  *****    prfx:	select rom 4
           //  884                                            
0000000000 //  885   L03001:  ..........                      	no operation
           //  886                                            
0100101011 //  887   L03002:  .1..1.1.11  -> L03112           fix1:	go to fix2
           //  888                                            
0101100111 //  889   L03003:  .1.11..111  -> L03131           exp0:	go to exp1
           //  890                                            
0101101011 //  891   L03004:  .1.11.1.11  -> L03132           lnnn:	go to lnn2z4
           //  892                                            
0000000000 //  893   L03005:  ..........                      	no operation
0100010011 //  894   L03006:  .1...1..11  -> L03104           invx:	go to inv1
           //  895                                            
0100010000 //  896   L03007:  .1...1....  -> L02010  *****    lexx:	select rom 2
           //  897                                            
1000010000 //  898   L03010:  1....1....  -> L04011  *****    perc:	select rom 4
           //  899                                            
1100010000 //  900   L03011:  11...1....  -> L06012  *****    rnd0:	select rom 6
           //  901                                            
0110011011 //  902   L03012:  .11..11.11  -> L03146           rcal:	go to rcl0
           //  903                                            
0110100011 //  904   L03013:  .11.1...11  -> L03150           stor:	go to str0
           //  905                                            
1100101000 //  906   L03014:  11..1.1...                      rold:	down rotate
0111111111 //  907   L03015:  .111111111  -> L03177           	go to fst1zx
           //  908                                            
0110101000 //  909   L03016:  .11.1.1...                      exc1:	stack -> a
0100101000 //  910   L03017:  .1..1.1...                      	c -> stack
0111111011 //  911   L03020:  .111111.11  -> L03176           	go to fstxzj
           //  912                                            
0011111111 //  913   L03021:  ..11111111  -> L03077           fst2z5:	go to ent2
           //  914                                            
1111101110 //  915   L03022:  11111.111.                      dig6:	a + 1 -> a[w]
1111101110 //  916   L03023:  11111.111.                      dig5:	a + 1 -> a[w]
1111101110 //  917   L03024:  11111.111.                      dig4:	a + 1 -> a[w]
0001101011 //  918   L03025:  ...11.1.11  -> L03032           	if no carry go to dig3
           //  919                                            
1000010000 //  920   L03026:  1....1....  -> L04027  *****    addd:	select rom 4
           //  921                                            
1000011101 //  922   L03027:  1....111.1  -> L03207           fix3:	jsb dsp0z4
0100001110 //  923   L03030:  .1....111.                      	shift left a[w]
0101001011 //  924   L03031:  .1.1..1.11  -> L03122           	go to fmt1
           //  925                                            
1111101110 //  926   L03032:  11111.111.                      dig3:	a + 1 -> a[w]
1111101110 //  927   L03033:  11111.111.                      dig2:	a + 1 -> a[w]
1111101110 //  928   L03034:  11111.111.                      dig1:	a + 1 -> a[w]
0000110000 //  929   L03035:  ....11....                      	return
           //  930                                            
1000010000 //  931   L03036:  1....1....  -> L04037  *****    mult:	select rom 4
           //  932                                            
0011010000 //  933   L03037:  ..11.1....                      tkra:	keys -> rom address
           //  934                                            
1000100100 //  935   L03040:  1...1..1..                      sig1:	0 -> s8
1000010000 //  936   L03041:  1....1....  -> L04042  *****    	select rom 4
           //  937                                            
0010000011 //  938   L03042:  ..1.....11  -> L03040           sigp:	go to sig1
           //  939                                            
0011001100 //  940   L03043:  ..11..11..                      dcpt:	3 -> p
0000110000 //  941   L03044:  ....11....                      dig0:	return
           //  942                                            
1000010000 //  943   L03045:  1....1....  -> L04046  *****    dvid:	select rom 4
           //  944                                            
0010010111 //  945   L03046:  ..1..1.111  -> L03045           divd:	go to dvid
           //  946                                            
0101000100 //  947   L03047:  .1.1...1..                      tan2:	1 -> s5
0110010001 //  948   L03050:  .11..1...1  -> L03144           tang:	jsb sav9
0100001011 //  949   L03051:  .1....1.11  -> L03102           	go to sqt1z4
           //  950                                            
0100110011 //  951   L03052:  .1..11..11  -> L03114           coss:	go to cos2
           //  952                                            
0010011111 //  953   L03053:  ..1..11111  -> L03047           sinn:	go to tan2
           //  954                                            
1000010000 //  955   L03054:  1....1....  -> L04055  *****    tpol:	select rom 4
           //  956                                            
0000000000 //  957   L03055:  ..........                      	no operation
           //  958                                            
0110000101 //  959   L03056:  .11....1.1  -> L03141           sqar:	jsb save
0100100011 //  960   L03057:  .1..1...11  -> L03110           	go to mul0
           //  961                                            
0000000000 //  962   L03060:  ..........                      	no operation
           //  963                                            
0000010000 //  964   L03061:  .....1....  -> L00062  *****    sqt2:	select rom 0
           //  965                                            
1111101110 //  966   L03062:  11111.111.                      dig9:	a + 1 -> a[w]
1111101110 //  967   L03063:  11111.111.                      dig8:	a + 1 -> a[w]
1111101110 //  968   L03064:  11111.111.                      dig7:	a + 1 -> a[w]
0001001011 //  969   L03065:  ...1..1.11  -> L03022           	if no carry go to dig6
           //  970                                            
1000010000 //  971   L03066:  1....1....  -> L04067  *****    subt:	select rom 4
           //  972                                            
0000000000 //  973   L03067:  ..........                      	no operation
           //  974                                            
1010011001 //  975   L03070:  1.1..11..1  -> L03246           clrx:	jsb ofl2
1000000111 //  976   L03071:  1......111  -> L03201           	go to fst2zx
           //  977                                            
1011101111 //  978   L03072:  1.111.1111  -> L03273           eexx:	go to eex2
           //  979                                            
1100000111 //  980   L03073:  11.....111  -> L03301           chs1:	go to chs2
           //  981                                            
0000101110 //  982   L03074:  ....1.111.                      clok:	0 -> b[w]
1110010000 //  983   L03075:  111..1....  -> L07076  *****    	select rom 7
           //  984                                            
0100101000 //  985   L03076:  .1..1.1...                      ent1:	c -> stack
1010011101 //  986   L03077:  1.1..111.1  -> L03247           ent2:	jsb ofl3
1000000111 //  987   L03100:  1......111  -> L03201           	go to fst2zx
           //  988                                            
0110000101 //  989   L03101:  .11....1.1  -> L03141           sqt0:	jsb save
1001100100 //  990   L03102:  1..11..1..                      sqt1z4:	0 -> s9
0011000111 //  991   L03103:  ..11...111  -> L03061           sqt1:	go to sqt2
           //  992                                            
0110000101 //  993   L03104:  .11....1.1  -> L03141           inv1:	jsb save
1011101110 //  994   L03105:  1.111.111.                      	0 -> a[w]
1111100010 //  995   L03106:  11111...1.                      	a + 1 -> a[p]
0100100111 //  996   L03107:  .1..1..111  -> L03111           	if no carry go to div0
1000010000 //  997   L03110:  1....1....  -> L04111  *****    mul0:	select rom 4
           //  998                                            
1000010000 //  999   L03111:  1....1....  -> L04112  *****    div0:	select rom 4
           // 1000                                            
1001100100 // 1001   L03112:  1..11..1..                      fix2:	0 -> s9
0001011111 // 1002   L03113:  ...1.11111  -> L03027           	go to fix3
           // 1003                                            
0110010001 // 1004   L03114:  .11..1...1  -> L03144           cos2:	jsb sav9
1001000100 // 1005   L03115:  1..1...1..                      cos2z4:	1 -> s9
0101000100 // 1006   L03116:  .1.1...1..                      trecz4:	1 -> s5
0011000111 // 1007   L03117:  ..11...111  -> L03061           	go to sqt2
           // 1008                                            
0100001110 // 1009   L03120:  .1....111.                      frmt:	shift left a[w]
1111101110 // 1010   L03121:  11111.111.                      	a + 1 -> a[w]
0100001110 // 1011   L03122:  .1....111.                      fmt1:	shift left a[w]
0010101000 // 1012   L03123:  ..1.1.1...                      	c exchange m
1110101010 // 1013   L03124:  111.1.1.1.                      	a exchange c[x]
0010101000 // 1014   L03125:  ..1.1.1...                      	c exchange m
0111001011 // 1015   L03126:  .111..1.11  -> L03162           fstpz4:	go to fstp
           // 1016                                            
0000000000 // 1017   L03127:  ..........                      	no operation
0000000000 // 1018   L03130:  ..........                      	no operation
           // 1019                                            
1000100100 // 1020   L03131:  1...1..1..                      exp1:	0 -> s8
1001000100 // 1021   L03132:  1..1...1..                      lnn2z4:	1 -> s9
0110000101 // 1022   L03133:  .11....1.1  -> L03141           	jsb save
0010000100 // 1023   L03134:  ..1....1..                      nty1z4:	1 -> s2
0000011111 // 1024   L03135:  .....11111  -> L03007           	go to lexx
           // 1025                                            
1000011101 // 1026   L03136:  1....111.1  -> L03207           sci2z4:	jsb dsp0z4
0101000011 // 1027   L03137:  .1.1....11  -> L03120           	go to frmt
           // 1028                                            
0011000100 // 1029   L03140:  ..11...1..                      sav1:	1 -> s3
1010100100 // 1030   L03141:  1.1.1..1..                      save:	0 -> s10
1100010000 // 1031   L03142:  11...1....  -> L06143  *****    	select rom 6
           // 1032                                            
1100010000 // 1033   L03143:  11...1....  -> L06144  *****    sav2:	select rom 6
           // 1034                                            
0001000100 // 1035   L03144:  ...1...1..                      sav9:	1 -> s1
0110000111 // 1036   L03145:  .11....111  -> L03141           	go to save
           // 1037                                            
1001000100 // 1038   L03146:  1..1...1..                      rcl0:	1 -> s9
0110100111 // 1039   L03147:  .11.1..111  -> L03151           	go to str1
           // 1040                                            
1001100100 // 1041   L03150:  1..11..1..                      str0:	0 -> s9
0010000100 // 1042   L03151:  ..1....1..                      str1:	1 -> s2
1000011101 // 1043   L03152:  1....111.1  -> L03207           	jsb dsp0z4
0111010101 // 1044   L03153:  .111.1.1.1  -> L03165           	jsb chk0
0110001101 // 1045   L03154:  .11...11.1  -> L03143           	jsb sav2
1001010100 // 1046   L03155:  1..1.1.1..                      	if s9 # 1
0111000111 // 1047   L03156:  .111...111  -> L03161           	     then go to str2
1111011001 // 1048   L03157:  1111.11..1  -> L03366           	jsb fst4
0111111011 // 1049   L03160:  .111111.11  -> L03176           	go to fstxzj
           // 1050                                            
1011110000 // 1051   L03161:  1.1111....                      str2:	c -> data
0111010100 // 1052   L03162:  .111.1.1..                      fstp:	if s7 # 1
0011111111 // 1053   L03163:  ..11111111  -> L03077           	     then go to ent2
0111111111 // 1054   L03164:  .111111111  -> L03177           	go to fst1zx
           // 1055                                            
0000001100 // 1056   L03165:  ......11..                      chk0:	0 -> p
1001100010 // 1057   L03166:  1..11...1.                      	if a[p] >= 1
1111111111 // 1058   L03167:  1111111111  -> L03377           	     then go to retnzx
0111001011 // 1059   L03170:  .111..1.11  -> L03162           fstpz5:	go to fstp
           // 1060                                            
1000011101 // 1061   L03171:  1....111.1  -> L03207           asmdz4:	jsb dsp0z4
0111010101 // 1062   L03172:  .111.1.1.1  -> L03165           	jsb chk0
1000010000 // 1063   L03173:  1....1....  -> L04174  *****    	select rom 4
           // 1064                                            
0000000000 // 1065   L03174:  ..........                      	no operation
0000000000 // 1066   L03175:  ..........                      	no operation
           // 1067                                            
1110101110 // 1068   L03176:  111.1.111.                      fstxzj:	a exchange c[w]
1010011101 // 1069   L03177:  1.1..111.1  -> L03247           fst1zx:	jsb ofl3
0111000100 // 1070   L03200:  .111...1..                      fst1zj:	1 -> s7
1000010101 // 1071   L03201:  1....1.1.1  -> L03205           fst2zx:	jsb dsp1
1111010101 // 1072   L03202:  1111.1.1.1  -> L03365           	jsb fst3
1101011011 // 1073   L03203:  11.1.11.11  -> L03326           	go to den2
           // 1074                                            
0011111110 // 1075   L03204:  ..1111111.                      chs3:	0 - c - 1 -> c[s]
1010100100 // 1076   L03205:  1.1.1..1..                      dsp1:	0 -> s10
1000100011 // 1077   L03206:  1...1...11  -> L03210           	go to dsp7
1011001110 // 1078   L03207:  1.11..111.                      dsp0z4:	shift right a[w]
0110011110 // 1079   L03210:  .11..1111.                      dsp7:	c -> a[s]
1000100100 // 1080   L03211:  1...1..1..                      	0 -> s8
1001010011 // 1081   L03212:  1..1.1..11  -> L03224           	go to dsp8
0111111010 // 1082   L03213:  .111111.1.                      dsp2:	c + 1 -> c[xs]
1000000100 // 1083   L03214:  1......1..                      dsp3:	1 -> s8
0101010100 // 1084   L03215:  .1.1.1.1..                      	if s5 # 1
1001001011 // 1085   L03216:  1..1..1.11  -> L03222           	     then go to dsp5
0111101010 // 1086   L03217:  .1111.1.1.                      	c + 1 -> c[x]
1000101111 // 1087   L03220:  1...1.1111  -> L03213           	if no carry go to dsp2
0000101000 // 1088   L03221:  ....1.1...                      dsp4:	display toggle
0000010100 // 1089   L03222:  .....1.1..                      dsp5:	if s0 # 1
1000110011 // 1090   L03223:  1...11..11  -> L03214           	     then go to dsp3
0000100100 // 1091   L03224:  ....1..1..                      dsp8:	0 -> s0
0000011100 // 1092   L03225:  .....111..                      dsp6:	p - 1 -> p
1100101100 // 1093   L03226:  11..1.11..                      	if p # 12
1001010111 // 1094   L03227:  1..1.1.111  -> L03225           	     then go to dsp6
1000101000 // 1095   L03230:  1...1.1...                      	display off
1000010100 // 1096   L03231:  1....1.1..                      	if s8 # 1
1001000111 // 1097   L03232:  1..1...111  -> L03221           	     then go to dsp4
0100001110 // 1098   L03233:  .1....111.                      	shift left a[w]
0101100100 // 1099   L03234:  .1.11..1..                      	0 -> s5
1010010100 // 1100   L03235:  1.1..1.1..                      	if s10 # 1
0001111111 // 1101   L03236:  ...1111111  -> L03037           	     then go to tkra
1000010000 // 1102   L03237:  1....1....  -> L04240  *****    	select rom 4
           // 1103                                            
0000000000 // 1104   L03240:  ..........                      	no operation
           // 1105                                            
0011010010 // 1106   L03241:  ..11.1..1.                      ofl1:	0 -> c[wp]
0101110010 // 1107   L03242:  .1.111..1.                      	c - 1 -> c[wp]
0011011010 // 1108   L03243:  ..11.11.1.                      	0 -> c[xs]
1110001010 // 1109   L03244:  111...1.1.                      	a + b -> a[x]
1010011111 // 1110   L03245:  1.1..11111  -> L03247           	if no carry go to ofl3
0011001110 // 1111   L03246:  ..11..111.                      ofl2:	0 -> c[w]
0000110100 // 1112   L03247:  ....11.1..                      ofl3:	clear status
0110001110 // 1113   L03250:  .11...111.                      	c -> a[w]
1100001100 // 1114   L03251:  11....11..                      ofl4:	12 -> p
0100101010 // 1115   L03252:  .1..1.1.1.                      	a -> b[x]
0110001010 // 1116   L03253:  .11...1.1.                      	c -> a[x]
0110111010 // 1117   L03254:  .11.111.1.                      	if c[xs] = 0
1011000111 // 1118   L03255:  1.11...111  -> L03261           	     then go to ofl5
0010101010 // 1119   L03256:  ..1.1.1.1.                      	0 - c -> c[x]
0101111010 // 1120   L03257:  .1.1111.1.                      	c - 1 -> c[xs]
1010000111 // 1121   L03260:  1.1....111  -> L03241           	if no carry go to ofl1
1110101010 // 1122   L03261:  111.1.1.1.                      ofl5:	a exchange c[x]
0100010100 // 1123   L03262:  .1...1.1..                      	if s4 # 1
0000100111 // 1124   L03263:  ....1..111  -> L03011           	     then go to rnd0
1100101010 // 1125   L03264:  11..1.1.1.                      	a exchange b[x]
0000101010 // 1126   L03265:  ....1.1.1.                      	0 -> b[x]
1000010101 // 1127   L03266:  1....1.1.1  -> L03205           	jsb dsp1
1100101100 // 1128   L03267:  11..1.11..                      	if p # 12
1000011111 // 1129   L03270:  1....11111  -> L03207           	     then go to dsp0z4
0100001010 // 1130   L03271:  .1....1.1.                      	shift left a[x]
1011111011 // 1131   L03272:  1.11111.11  -> L03276           	go to eex3
0100000100 // 1132   L03273:  .1.....1..                      eex2:	1 -> s4
1011010100 // 1133   L03274:  1.11.1.1..                      	if s11 # 1
0001110011 // 1134   L03275:  ...111..11  -> L03034           	     then go to dig1
1011001110 // 1135   L03276:  1.11..111.                      eex3:	shift right a[w]
1110110010 // 1136   L03277:  111.11..1.                      	a exchange c[wp]
1100011011 // 1137   L03300:  11...11.11  -> L03306           	go to eex4
           // 1138                                            
1011001110 // 1139   L03301:  1.11..111.                      chs2:	shift right a[w]
0100010100 // 1140   L03302:  .1...1.1..                      	if s4 # 1
1000010011 // 1141   L03303:  1....1..11  -> L03204           	     then go to chs3
1110110010 // 1142   L03304:  111.11..1.                      	a exchange c[wp]
0011111010 // 1143   L03305:  ..11111.1.                      	0 - c - 1 -> c[xs]
0110001110 // 1144   L03306:  .11...111.                      eex4:	c -> a[w]
0110111010 // 1145   L03307:  .11.111.1.                      	if c[xs] = 0
1100101111 // 1146   L03310:  11..1.1111  -> L03313           	     then go to eex5
0011011010 // 1147   L03311:  ..11.11.1.                      	0 -> c[xs]
0010101010 // 1148   L03312:  ..1.1.1.1.                      	0 - c -> c[x]
1101001100 // 1149   L03313:  11.1..11..                      eex5:	13 -> p
0100010110 // 1150   L03314:  .1...1.11.                      eex6:	shift left a[ms]
0101101010 // 1151   L03315:  .1.11.1.1.                      	c - 1 -> c[x]
1001111110 // 1152   L03316:  1..111111.                      	if a[s] >= 1
1110110011 // 1153   L03317:  111.11..11  -> L03354           	     then go to eex8
1001110110 // 1154   L03320:  1..111.11.                      	if a[ms] >= 1
1100110011 // 1155   L03321:  11..11..11  -> L03314           	     then go to eex6
0011001010 // 1156   L03322:  ..11..1.1.                      	0 -> c[x]
1000010101 // 1157   L03323:  1....1.1.1  -> L03205           den1:	jsb dsp1
1011010110 // 1158   L03324:  1.11.1.11.                      	shift right a[ms]
0110011110 // 1159   L03325:  .11..1111.                      den7:	c -> a[s]
1100101100 // 1160   L03326:  11..1.11..                      den2:	if p # 12
1101111111 // 1161   L03327:  11.1111111  -> L03337           	     then go to den4
0010001110 // 1162   L03330:  ..1...111.                      	b -> c[w]
0111101110 // 1163   L03331:  .1111.111.                      	c + 1 -> c[w]
0001001100 // 1164   L03332:  ...1..11..                      	1 -> p
0100010010 // 1165   L03333:  .1...1..1.                      den3:	shift left a[wp]
0000111100 // 1166   L03334:  ....1111..                      	p + 1 -> p
0110100010 // 1167   L03335:  .11.1...1.                      	if c[p] = 0
1101101111 // 1168   L03336:  11.11.1111  -> L03333           	     then go to den3
1110101110 // 1169   L03337:  111.1.111.                      den4:	a exchange c[w]
0011101100 // 1170   L03340:  ..111.11..                      	if p # 3
1110010111 // 1171   L03341:  111..1.111  -> L03345           	     then go to den5
0011001010 // 1172   L03342:  ..11..1.1.                      	0 -> c[x]
0110000100 // 1173   L03343:  .11....1..                      	1 -> s6
1100011011 // 1174   L03344:  11...11.11  -> L03306           	go to eex4
           // 1175                                            
0110010100 // 1176   L03345:  .11..1.1..                      den5:	if s6 # 1
1110100011 // 1177   L03346:  111.1...11  -> L03350           	     then go to den6
0000011100 // 1178   L03347:  .....111..                      	p - 1 -> p
1010010010 // 1179   L03350:  1.1..1..1.                      den6:	shift right b[wp]
1100011001 // 1180   L03351:  11...11..1  -> L03306           	jsb eex4
0000011100 // 1181   L03352:  .....111..                      eex7:	p - 1 -> p
0111101010 // 1182   L03353:  .1111.1.1.                      	c + 1 -> c[x]
0000000010 // 1183   L03354:  ........1.                      eex8:	if b[p] = 0
1110101011 // 1184   L03355:  111.1.1.11  -> L03352           	     then go to eex7
1011000100 // 1185   L03356:  1.11...1..                      	1 -> s11
1011010110 // 1186   L03357:  1.11.1.11.                      	shift right a[ms]
1110100110 // 1187   L03360:  111.1..11.                      	a exchange c[m]
0100010100 // 1188   L03361:  .1...1.1..                      	if s4 # 1
1101001111 // 1189   L03362:  11.1..1111  -> L03323           	     then go to den1
1010100101 // 1190   L03363:  1.1.1..1.1  -> L03251           eex9:	jsb ofl4
1000000111 // 1191   L03364:  1......111  -> L03201           	go to fst2zx
           // 1192                                            
1011110110 // 1193   L03365:  1.1111.11.                      fst3:	0 -> a[ms]
0111010100 // 1194   L03366:  .111.1.1..                      fst4:	if s7 # 1
1111100111 // 1195   L03367:  11111..111  -> L03371           	     then go to fst5
0100101000 // 1196   L03370:  .1..1.1...                      	c -> stack
0111000100 // 1197   L03371:  .111...1..                      fst5:	1 -> s7
0011001110 // 1198   L03372:  ..11..111.                      	0 -> c[w]
0101101110 // 1199   L03373:  .1.11.111.                      	c - 1 -> c[w]
0010111110 // 1200   L03374:  ..1.11111.                      	0 - c -> c[s]
0111111110 // 1201   L03375:  .11111111.                      	c + 1 -> c[s]
1000101110 // 1202   L03376:  1...1.111.                      	b exchange c[w]
0000110000 // 1203   L03377:  ....11....                      retnzx:	return
           // 1204                                            
           // 1206                                            
           // 1207                                            	.rom @04
           // 1208                                            
0000000000 // 1209   L04000:  ..........                      prfx:	no operation
1000010011 // 1210   L04001:  1....1..11  -> L04204           prfxz3:	go to pfx1
           // 1211                                            
0101110011 // 1212   L04002:  .1.111..11  -> L04134           sci1:	go to sci2
           // 1213                                            
1100100011 // 1214   L04003:  11..1...11  -> L04310           tenx:	go to tnx2
           // 1215                                            
0101100011 // 1216   L04004:  .1.11...11  -> L04130           logg:	go to log2
           // 1217                                            
1100010000 // 1218   L04005:  11...1....  -> L06006  *****    tnx3:	select rom 6
           // 1219                                            
0110000101 // 1220   L04006:  .11....1.1  -> L04141           xtoy:	jsb save
0101101011 // 1221   L04007:  .1.11.1.11  -> L04132           	go to xty1
           // 1222                                            
1001100011 // 1223   L04010:  1..11...11  -> L04230           dpct:	go to dpc1
           // 1224                                            
0100001011 // 1225   L04011:  .1....1.11  -> L04102           percz3:	go to pct1
           // 1226                                            
1000100100 // 1227   L04012:  1...1..1..                      dmst:	0 -> s8
0001000011 // 1228   L04013:  ...1....11  -> L04020           tdms:	go to tdm1
           // 1229                                            
0010000011 // 1230   L04014:  ..1.....11  -> L04040           stdd:	go to std1
           // 1231                                            
0000010000 // 1232   L04015:  .....1....  -> L00016  *****    dmsd:	select rom 0
           // 1233                                            
0110000101 // 1234   L04016:  .11....1.1  -> L04141           fact:	jsb save
1111111111 // 1235   L04017:  1111111111  -> L04377           	go to fac2
           // 1236                                            
0110000101 // 1237   L04020:  .11....1.1  -> L04141           tdm1:	jsb save
0000110111 // 1238   L04021:  ....11.111  -> L04015           	go to dmsd
           // 1239                                            
1000001011 // 1240   L04022:  1.....1.11  -> L04202           dig6:	go to dsp0
1000001011 // 1241   L04023:  1.....1.11  -> L04202           dig5:	go to dsp0
1000001011 // 1242   L04024:  1.....1.11  -> L04202           dig4:	go to dsp0
           // 1243                                            
1010010000 // 1244   L04025:  1.1..1....  -> L05026  *****    sig2:	select rom 5
           // 1245                                            
0000000000 // 1246   L04026:  ..........                      addd:	no operation
0110100011 // 1247   L04027:  .11.1...11  -> L04150           adddz3:	go to amd1
           // 1248                                            
1011010111 // 1249   L04030:  1.11.1.111  -> L04265           tpolz0:	go to tpl3
           // 1250                                            
0000000000 // 1251   L04031:  ..........                      	no operation
           // 1252                                            
1000001011 // 1253   L04032:  1.....1.11  -> L04202           dig3:	go to dsp0
1000001011 // 1254   L04033:  1.....1.11  -> L04202           dig2:	go to dsp0
1000001011 // 1255   L04034:  1.....1.11  -> L04202           dig1:	go to dsp0
           // 1256                                            
0000000000 // 1257   L04035:  ..........                      	no operation
           // 1258                                            
0000000000 // 1259   L04036:  ..........                      mult:	no operation
0110111011 // 1260   L04037:  .11.111.11  -> L04156           multz3:	go to amd4
           // 1261                                            
0110000001 // 1262   L04040:  .11......1  -> L04140           std1:	jsb sav1
1010010000 // 1263   L04041:  1.1..1....  -> L05042  *****    	select rom 5
           // 1264                                            
1101000011 // 1265   L04042:  11.1....11  -> L04320           sigmz3:	go to sgma
           // 1266                                            
0111001011 // 1267   L04043:  .111..1.11  -> L04162           dspt:	go to piii
           // 1268                                            
0111000111 // 1269   L04044:  .111...111  -> L04161           dig0:	go to cons
0000000000 // 1270   L04045:  ..........                      	no operation
           // 1271                                            
0111001111 // 1272   L04046:  .111..1111  -> L04163           divdz3:	go to amd5
           // 1273                                            
0101000100 // 1274   L04047:  .1.1...1..                      atn2:	1 -> s5
0101111001 // 1275   L04050:  .1.1111..1  -> L04136           atan:	jsb sav9
0100000111 // 1276   L04051:  .1.....111  -> L04101           	go to sqt1
           // 1277                                            
0100101111 // 1278   L04052:  .1..1.1111  -> L04113           acos:	go to acs1
           // 1279                                            
0010011111 // 1280   L04053:  ..1..11111  -> L04047           asin:	go to atn2
           // 1281                                            
1001001111 // 1282   L04054:  1..1..1111  -> L04223           trec:	go to trc1
           // 1283                                            
1010100011 // 1284   L04055:  1.1.1...11  -> L04250           tpolz3:	go to tpl1
           // 1285                                            
0110000101 // 1286   L04056:  .11....1.1  -> L04141           sqrt:	jsb save
0100000111 // 1287   L04057:  .1.....111  -> L04101           	go to sqt1
           // 1288                                            
0000000000 // 1289   L04060:  ..........                      	no operation
0000000000 // 1290   L04061:  ..........                      	no operation
           // 1291                                            
1111101110 // 1292   L04062:  11111.111.                      dig9:	a + 1 -> a[w]
1111101110 // 1293   L04063:  11111.111.                      dig8:	a + 1 -> a[w]
0111000011 // 1294   L04064:  .111....11  -> L04160           dig7:	if no carry go to con1
           // 1295                                            
1010010000 // 1296   L04065:  1.1..1....  -> L05066  *****    tpl6:	select rom 5
           // 1297                                            
0000000000 // 1298   L04066:  ..........                      subt:	no operation
0110101111 // 1299   L04067:  .11.1.1111  -> L04153           subtz3:	go to amd2
           // 1300                                            
0110000101 // 1301   L04070:  .11....1.1  -> L04141           cler:	jsb save
1111010111 // 1302   L04071:  1111.1.111  -> L04365           	go to clr2
           // 1303                                            
1111101110 // 1304   L04072:  11111.111.                      grad:	a + 1 -> a[w]
0011111111 // 1305   L04073:  ..11111111  -> L04077           radn:	if no carry go to mode
           // 1306                                            
0000000000 // 1307   L04074:  ..........                      clok:	no operation
0000000000 // 1308   L04075:  ..........                      	no operation
1101101110 // 1309   L04076:  11.11.111.                      degr:	a - 1 -> a[w]
0000001100 // 1310   L04077:  ......11..                      mode:	0 -> p
0100111011 // 1311   L04100:  .1..111.11  -> L04116           	go to shft
           // 1312                                            
0110010000 // 1313   L04101:  .11..1....  -> L03102  *****    sqt1:	select rom 3
           // 1314                                            
0110000001 // 1315   L04102:  .11......1  -> L04140           pct1:	jsb sav1
1000100100 // 1316   L04103:  1...1..1..                      	0 -> s8
1100101000 // 1317   L04104:  11..1.1...                      c100:	down rotate
0100101000 // 1318   L04105:  .1..1.1...                      	c -> stack
0101101010 // 1319   L04106:  .1.11.1.1.                      	c - 1 -> c[x]
0101101010 // 1320   L04107:  .1.11.1.1.                      	c - 1 -> c[x]
1000010100 // 1321   L04110:  1....1.1..                      	if s8 # 1
1010001111 // 1322   L04111:  1.1...1111  -> L04243           mul0z3:	     then go to mul0
1010000111 // 1323   L04112:  1.1....111  -> L04241           div0z3:	go to div0
           // 1324                                            
0101111001 // 1325   L04113:  .1.1111..1  -> L04136           acs1:	jsb sav9
0110010000 // 1326   L04114:  .11..1....  -> L03115  *****    	select rom 3
           // 1327                                            
0110010000 // 1328   L04115:  .11..1....  -> L03116  *****    trc2:	select rom 3
           // 1329                                            
0100001110 // 1330   L04116:  .1....111.                      shft:	shift left a[w]
0000111100 // 1331   L04117:  ....1111..                      	p + 1 -> p
1101101100 // 1332   L04120:  11.11.11..                      	if p # 13
0100111011 // 1333   L04121:  .1..111.11  -> L04116           	     then go to shft
0010101000 // 1334   L04122:  ..1.1.1...                      mrg0:	c exchange m
1110100010 // 1335   L04123:  111.1...1.                      	a exchange c[p]
0010101000 // 1336   L04124:  ..1.1.1...                      mreg:	c exchange m
0110010000 // 1337   L04125:  .11..1....  -> L03126  *****    	select rom 3
           // 1338                                            
0000000000 // 1339   L04126:  ..........                      	no operation
0000000000 // 1340   L04127:  ..........                      	no operation
           // 1341                                            
0101000100 // 1342   L04130:  .1.1...1..                      log2:	1 -> s5
0110010000 // 1343   L04131:  .11..1....  -> L03132  *****    	select rom 3
           // 1344                                            
1000011101 // 1345   L04132:  1....111.1  -> L04207           xty1:	jsb exch
0110010000 // 1346   L04133:  .11..1....  -> L03134  *****    	select rom 3
           // 1347                                            
1010100100 // 1348   L04134:  1.1.1..1..                      sci2:	0 -> s10
0110010000 // 1349   L04135:  .11..1....  -> L03136  *****    	select rom 3
           // 1350                                            
0001000100 // 1351   L04136:  ...1...1..                      sav9:	1 -> s1
0110000111 // 1352   L04137:  .11....111  -> L04141           	go to save
           // 1353                                            
0011000100 // 1354   L04140:  ..11...1..                      sav1:	1 -> s3
1010000100 // 1355   L04141:  1.1....1..                      save:	1 -> s10
1100010000 // 1356   L04142:  11...1....  -> L06143  *****    	select rom 6
           // 1357                                            
1100010000 // 1358   L04143:  11...1....  -> L06144  *****    savx:	select rom 6
           // 1359                                            
1100010000 // 1360   L04144:  11...1....  -> L06145  *****    adr9:	select rom 6
           // 1361                                            
1010000100 // 1362   L04145:  1.1....1..                      sav2:	1 -> s10
0011000100 // 1363   L04146:  ..11...1..                      	1 -> s3
0110001111 // 1364   L04147:  .11...1111  -> L04143           	go to savx
           // 1365                                            
0110000100 // 1366   L04150:  .11....1..                      amd1:	1 -> s6
0100000100 // 1367   L04151:  .1.....1..                      	1 -> s4
0111010111 // 1368   L04152:  .111.1.111  -> L04165           	go to amd7
           // 1369                                            
0110100100 // 1370   L04153:  .11.1..1..                      amd2:	0 -> s6
0100000100 // 1371   L04154:  .1.....1..                      amd3:	1 -> s4
0111010111 // 1372   L04155:  .111.1.111  -> L04165           	go to amd7
           // 1373                                            
0110000100 // 1374   L04156:  .11....1..                      amd4:	1 -> s6
0111010011 // 1375   L04157:  .111.1..11  -> L04164           	go to amd6
           // 1376                                            
1111101110 // 1377   L04160:  11111.111.                      con1:	a + 1 -> a[w]
1100010000 // 1378   L04161:  11...1....  -> L06162  *****    cons:	select rom 6
           // 1379                                            
1100010000 // 1380   L04162:  11...1....  -> L06163  *****    piii:	select rom 6
           // 1381                                            
0110100100 // 1382   L04163:  .11.1..1..                      amd5:	0 -> s6
0100100100 // 1383   L04164:  .1..1..1..                      amd6:	0 -> s4
0010010100 // 1384   L04165:  ..1..1.1..                      amd7:	if s2 # 1
0111111111 // 1385   L04166:  .111111111  -> L04177           	     then go to amd8
1010100100 // 1386   L04167:  1.1.1..1..                      	0 -> s10
0110010000 // 1387   L04170:  .11..1....  -> L03171  *****    	select rom 3
           // 1388                                            
1010100100 // 1389   L04171:  1.1.1..1..                      am13:	0 -> s10
1010010000 // 1390   L04172:  1.1..1....  -> L05173  *****    	select rom 5
           // 1391                                            
0000000000 // 1392   L04173:  ..........                      	no operation
           // 1393                                            
1000101111 // 1394   L04174:  1...1.1111  -> L04213           amd9z3:	go to amd9
           // 1395                                            
0000000000 // 1396   L04175:  ..........                      	no operation
           // 1397                                            
0110010000 // 1398   L04176:  .11..1....  -> L03177  *****    fst1:	select rom 3
           // 1399                                            
0110000101 // 1400   L04177:  .11....1.1  -> L04141           amd8:	jsb save
0110101000 // 1401   L04200:  .11.1.1...                      	stack -> a
0111100111 // 1402   L04201:  .1111..111  -> L04171           	go to am13
           // 1403                                            
1010100100 // 1404   L04202:  1.1.1..1..                      dsp0:	0 -> s10
1000010111 // 1405   L04203:  1....1.111  -> L04205           	go to dspx
           // 1406                                            
1010000100 // 1407   L04204:  1.1....1..                      pfx1:	1 -> s10
1001100100 // 1408   L04205:  1..11..1..                      dspx:	0 -> s9
0110010000 // 1409   L04206:  .11..1....  -> L03207  *****    	select rom 3
           // 1410                                            
0110101000 // 1411   L04207:  .11.1.1...                      exch:	stack -> a
0100101000 // 1412   L04210:  .1..1.1...                      exc1:	c -> stack
1110101110 // 1413   L04211:  111.1.111.                      	a exchange c[w]
0000110000 // 1414   L04212:  ....11....                      	return
           // 1415                                            
1001010100 // 1416   L04213:  1..1.1.1..                      amd9:	if s9 # 1
1001000011 // 1417   L04214:  1..1....11  -> L04220           	     then go to am12
0110000001 // 1418   L04215:  .11......1  -> L04140           am10:	jsb sav1
1110101110 // 1419   L04216:  111.1.111.                      am11:	a exchange c[w]
0111100111 // 1420   L04217:  .1111..111  -> L04171           	go to am13
           // 1421                                            
0110010101 // 1422   L04220:  .11..1.1.1  -> L04145           am12:	jsb sav2
1011110000 // 1423   L04221:  1.1111....                      	c -> data
1000111011 // 1424   L04222:  1...111.11  -> L04216           	go to am11
           // 1425                                            
0101111001 // 1426   L04223:  .1.1111..1  -> L04136           trc1:	jsb sav9
0110101000 // 1427   L04224:  .11.1.1...                      	stack -> a
0011000100 // 1428   L04225:  ..11...1..                      	1 -> s3
1010100100 // 1429   L04226:  1.1.1..1..                      	0 -> s10
0100110111 // 1430   L04227:  .1..11.111  -> L04115           	go to trc2
           // 1431                                            
0110000001 // 1432   L04230:  .11......1  -> L04140           dpc1:	jsb sav1
1100101000 // 1433   L04231:  11..1.1...                      	down rotate
0100101000 // 1434   L04232:  .1..1.1...                      	c -> stack
1010011001 // 1435   L04233:  1.1..11..1  -> L04246           	jsb sub1
0100010011 // 1436   L04234:  .1...1..11  -> L04104           	go to c100
           // 1437                                            
0000000000 // 1438   L04235:  ..........                      	no operation
0000000000 // 1439   L04236:  ..........                      	no operation
           // 1440                                            
1010010000 // 1441   L04237:  1.1..1....  -> L05240  *****    rcxy:	select rom 5
           // 1442                                            
0011010000 // 1443   L04240:  ..11.1....                      tkraz3:	keys -> rom address
           // 1444                                            
0011100100 // 1445   L04241:  ..111..1..                      div0:	0 -> s3
1010010111 // 1446   L04242:  1.1..1.111  -> L04245           	go to div1
           // 1447                                            
0011100100 // 1448   L04243:  ..111..1..                      mul0:	0 -> s3
0010010000 // 1449   L04244:  ..1..1....  -> L01245  *****    mul1:	select rom 1
           // 1450                                            
0010010000 // 1451   L04245:  ..1..1....  -> L01246  *****    div1:	select rom 1
           // 1452                                            
0011111110 // 1453   L04246:  ..1111111.                      sub1:	0 - c - 1 -> c[s]
0000010000 // 1454   L04247:  .....1....  -> L00250  *****    add1:	select rom 0
           // 1455                                            
0101111001 // 1456   L04250:  .1.1111..1  -> L04136           tpl1:	jsb sav9
0011000100 // 1457   L04251:  ..11...1..                      	1 -> s3
0100100100 // 1458   L04252:  .1..1..1..                      	0 -> s4
0110111110 // 1459   L04253:  .11.11111.                      	if c[s] = 0
1010111011 // 1460   L04254:  1.1.111.11  -> L04256           	     then go to tpl2
0100000100 // 1461   L04255:  .1.....1..                      	1 -> s4
1100101000 // 1462   L04256:  11..1.1...                      tpl2:	down rotate
1000100001 // 1463   L04257:  1...1....1  -> L04210           	jsb exc1
1001100110 // 1464   L04260:  1..11..11.                      	if a[m] >= 1
0011010111 // 1465   L04261:  ..11.1.111  -> L04065           	     then go to tpl6
0011010010 // 1466   L04262:  ..11.1..1.                      	0 -> c[wp]
0111100010 // 1467   L04263:  .1111...1.                      	c + 1 -> c[p]
0011010101 // 1468   L04264:  ..11.1.1.1  -> L04065           	jsb tpl6
           // 1469                                            
0001100100 // 1470   L04265:  ...11..1..                      tpl3:	0 -> s1
1000011101 // 1471   L04266:  1....111.1  -> L04207           	jsb exch
0110001110 // 1472   L04267:  .11...111.                      	c -> a[w]
1010010001 // 1473   L04270:  1.1..1...1  -> L04244           	jsb mul1
1011110000 // 1474   L04271:  1.1111....                      	c -> data
1100101101 // 1475   L04272:  11..1.11.1  -> L04313           	jsb rest
0110010001 // 1476   L04273:  .11..1...1  -> L04144           	jsb adr9
1010010001 // 1477   L04274:  1.1..1...1  -> L04244           	jsb mul1
1011111000 // 1478   L04275:  1.11111...                      	data -> c
1010011101 // 1479   L04276:  1.1..111.1  -> L04247           	jsb add1
1101111010 // 1480   L04277:  11.1111.1.                      	a - 1 -> a[xs]
1101111010 // 1481   L04300:  11.1111.1.                      	a - 1 -> a[xs]
1101111010 // 1482   L04301:  11.1111.1.                      	a - 1 -> a[xs]
1100010111 // 1483   L04302:  11...1.111  -> L04305           	if no carry go to tpl5
0101111010 // 1484   L04303:  .1.1111.1.                      	c - 1 -> c[xs]
1111000101 // 1485   L04304:  1111...1.1  -> L04361           	jsb reg9
           // 1486                                            
0110001110 // 1487   L04305:  .11...111.                      tpl5:	c -> a[w]
0100000101 // 1488   L04306:  .1.....1.1  -> L04101           	jsb sqt1
1111000111 // 1489   L04307:  1111...111  -> L04361           	go to reg9	
           // 1490                                            
0110000101 // 1491   L04310:  .11....1.1  -> L04141           tnx2:	jsb save
0010000100 // 1492   L04311:  ..1....1..                      	1 -> s2
0000010111 // 1493   L04312:  .....1.111  -> L04005           	go to tnx3
           // 1494                                            
0011001110 // 1495   L04313:  ..11..111.                      rest:	0 -> c[w]
1001110000 // 1496   L04314:  1..111....                      	c -> data address
0000000000 // 1497   L04315:  ..........                      	no operation
1011111000 // 1498   L04316:  1.11111...                      	data -> c
0000110000 // 1499   L04317:  ....11....                      	return
           // 1500                                            
1001010100 // 1501   L04320:  1..1.1.1..                      sgma:	if s9 # 1
1101001111 // 1502   L04321:  11.1..1111  -> L04323           	     then go to sig1
1001111111 // 1503   L04322:  1..1111111  -> L04237           	go to rcxy
           // 1504                                            
0110000001 // 1505   L04323:  .11......1  -> L04140           sig1:	jsb sav1
0001010111 // 1506   L04324:  ...1.1.111  -> L04025           	go to sig2
           // 1507                                            
0000000000 // 1508   L04325:  ..........                      	no operation
0000000000 // 1509   L04326:  ..........                      	no operation
0000000000 // 1510   L04327:  ..........                      	no operation
0000000000 // 1511   L04330:  ..........                      	no operation
0000000000 // 1512   L04331:  ..........                      	no operation
0000000000 // 1513   L04332:  ..........                      	no operation
0000000000 // 1514   L04333:  ..........                      	no operation
0000000000 // 1515   L04334:  ..........                      	no operation
0000000000 // 1516   L04335:  ..........                      	no operation
0000000000 // 1517   L04336:  ..........                      	no operation
0000000000 // 1518   L04337:  ..........                      	no operation
0000000000 // 1519   L04340:  ..........                      	no operation
0000000000 // 1520   L04341:  ..........                      	no operation
0000000000 // 1521   L04342:  ..........                      	no operation
0000000000 // 1522   L04343:  ..........                      	no operation
0000000000 // 1523   L04344:  ..........                      	no operation
0000000000 // 1524   L04345:  ..........                      	no operation
0000000000 // 1525   L04346:  ..........                      	no operation
0000000000 // 1526   L04347:  ..........                      	no operation
0000000000 // 1527   L04350:  ..........                      	no operation
0000000000 // 1528   L04351:  ..........                      	no operation
0000000000 // 1529   L04352:  ..........                      	no operation
0000000000 // 1530   L04353:  ..........                      	no operation
0000000000 // 1531   L04354:  ..........                      	no operation
0000000000 // 1532   L04355:  ..........                      	no operation
0000000000 // 1533   L04356:  ..........                      	no operation
0000000000 // 1534   L04357:  ..........                      	no operation
0000000000 // 1535   L04360:  ..........                      	no operation
           // 1536                                            
0000010000 // 1537   L04361:  .....1....  -> L00362  *****    reg9:	select rom 0
           // 1538                                            
0000000000 // 1539   L04362:  ..........                      	no operation
0000000000 // 1540   L04363:  ..........                      	no operation
0000000000 // 1541   L04364:  ..........                      	no operation
           // 1542                                            
1010010000 // 1543   L04365:  1.1..1....  -> L05366  *****    clr2:	select rom 5
           // 1544                                            
0000000000 // 1545   L04366:  ..........                      	no operation
0000000000 // 1546   L04367:  ..........                      	no operation
0000000000 // 1547   L04370:  ..........                      	no operation
0000000000 // 1548   L04371:  ..........                      	no operation
0000000000 // 1549   L04372:  ..........                      	no operation
0000000000 // 1550   L04373:  ..........                      	no operation
0000000000 // 1551   L04374:  ..........                      	no operation
0000000000 // 1552   L04375:  ..........                      	no operation
           // 1553                                            
0000110000 // 1554   L04376:  ....11....                      retnzx:	return
           // 1555                                            
1100010000 // 1556   L04377:  11...1....  -> L06000  *****    fac2:	select rom 6
           // 1557                                            
           // 1559                                            
           // 1560                                            	.rom @05
           // 1561                                            
1100010000 // 1562   L05000:  11...1....  -> L06001  *****    err2:	select rom 6
           // 1563                                            
0111100010 // 1564   L05001:  .1111...1.                      adr5:	c + 1 -> c[p]
0111100010 // 1565   L05002:  .1111...1.                      adr6:	c + 1 -> c[p]
0111100010 // 1566   L05003:  .1111...1.                      adr7:	c + 1 -> c[p]
0111100010 // 1567   L05004:  .1111...1.                      adr8:	c + 1 -> c[p]
0111100010 // 1568   L05005:  .1111...1.                      adr9:	c + 1 -> c[p]
0101001110 // 1569   L05006:  .1.1..111.                      adr0:	a - c -> c[w]
1001110000 // 1570   L05007:  1..111....                      	c -> data address
0000000000 // 1571   L05010:  ..........                      	no operation
1011111000 // 1572   L05011:  1.11111...                      	data -> c
0100010100 // 1573   L05012:  .1...1.1..                      	if s4 # 1
1111111111 // 1574   L05013:  1111111111  -> L05377           	     then go to retnzx
1110101110 // 1575   L05014:  111.1.111.                      	a exchange c[w]
1000010100 // 1576   L05015:  1....1.1..                      	if s8 # 1
1010011111 // 1577   L05016:  1.1..11111  -> L05247           	     then go to add1
1010011011 // 1578   L05017:  1.1..11.11  -> L05246           	go to sub1
           // 1579                                            
0110010000 // 1580   L05020:  .11..1....  -> L03021  *****    fst2:	select rom 3
           // 1581                                            
0000000000 // 1582   L05021:  ..........                      	no operation
0000000000 // 1583   L05022:  ..........                      	no operation
0000000000 // 1584   L05023:  ..........                      	no operation
0000000000 // 1585   L05024:  ..........                      	no operation
           // 1586                                            
1110010011 // 1587   L05025:  111..1..11  -> L05344           pwo2z0:	go to pwo2
           // 1588                                            
0100000100 // 1589   L05026:  .1.....1..                      sgmaz4:	1 -> s4
1010100100 // 1590   L05027:  1.1.1..1..                      	0 -> s10
1010010001 // 1591   L05030:  1.1..1...1  -> L05244           	jsb mul1
0000001001 // 1592   L05031:  ......1..1  -> L05002           	jsb adr6
1011101101 // 1593   L05032:  1.111.11.1  -> L05273           	jsb stor
0010110101 // 1594   L05033:  ..1.11.1.1  -> L05055           	jsb rest
0110001110 // 1595   L05034:  .11...111.                      	c -> a[w]
0000001101 // 1596   L05035:  ......11.1  -> L05003           	jsb adr7
0010001111 // 1597   L05036:  ..1...1111  -> L05043           	go to sig1
           // 1598                                            
0000000000 // 1599   L05037:  ..........                      	no operation
0000000000 // 1600   L05040:  ..........                      	no operation
0000000000 // 1601   L05041:  ..........                      	no operation
           // 1602                                            
0100001011 // 1603   L05042:  .1....1.11  -> L05102           stddz4:	go to stdd
           // 1604                                            
1011101101 // 1605   L05043:  1.111.11.1  -> L05273           sig1:	jsb stor
0011001001 // 1606   L05044:  ..11..1..1  -> L05062           	jsb yget
0000010001 // 1607   L05045:  .....1...1  -> L05004           	jsb adr8
1011101101 // 1608   L05046:  1.111.11.1  -> L05273           	jsb stor
0011001110 // 1609   L05047:  ..11..111.                      	0 -> c[w]
0111100010 // 1610   L05050:  .1111...1.                      	c + 1 -> c[p]
0110001110 // 1611   L05051:  .11...111.                      	c -> a[w]
0000000101 // 1612   L05052:  .......1.1  -> L05001           	jsb adr5
1011101101 // 1613   L05053:  1.111.11.1  -> L05273           	jsb stor
0001000011 // 1614   L05054:  ...1....11  -> L05020           	go to fst2
           // 1615                                            
0011001110 // 1616   L05055:  ..11..111.                      rest:	0 -> c[w]
1001110000 // 1617   L05056:  1..111....                      	c -> data address
0000000000 // 1618   L05057:  ..........                      	no operation
1011111000 // 1619   L05060:  1.11111...                      	data -> c
0000110000 // 1620   L05061:  ....11....                      	return
           // 1621                                            
1100101000 // 1622   L05062:  11..1.1...                      yget:	down rotate
0100101000 // 1623   L05063:  .1..1.1...                      	c -> stack
0110001110 // 1624   L05064:  .11...111.                      	c -> a[w]
0000110000 // 1625   L05065:  ....11....                      	return
           // 1626                                            
1000100100 // 1627   L05066:  1...1..1..                      tploz4:	0 -> s8
1001100100 // 1628   L05067:  1..11..1..                      	0 -> s9
1010010101 // 1629   L05070:  1.1..1.1.1  -> L05245           tpl0zj:	jsb div1
           // 1630                                            
0000000000 // 1631   L05071:  ..........                      	no operation
0000000000 // 1632   L05072:  ..........                      	no operation
0000000000 // 1633   L05073:  ..........                      	no operation
0000000000 // 1634   L05074:  ..........                      	no operation
0000000000 // 1635   L05075:  ..........                      	no operation
0000000000 // 1636   L05076:  ..........                      	no operation
0000000000 // 1637   L05077:  ..........                      	no operation
0000000000 // 1638   L05100:  ..........                      	no operation
           // 1639                                            
0110010000 // 1640   L05101:  .11..1....  -> L03102  *****    sqt1:	select rom 3
           // 1641                                            
1010100100 // 1642   L05102:  1.1.1..1..                      stdd:	0 -> s10
0100100100 // 1643   L05103:  .1..1..1..                      	0 -> s4
0000001101 // 1644   L05104:  ......11.1  -> L05003           	jsb adr7
0110001110 // 1645   L05105:  .11...111.                      	c -> a[w]
1010010001 // 1646   L05106:  1.1..1...1  -> L05244           	jsb mul1
0000000101 // 1647   L05107:  .......1.1  -> L05001           	jsb adr5
0001111110 // 1648   L05110:  ...111111.                      	if c[s] >= 1
0000000011 // 1649   L05111:  ........11  -> L05000           	     then go to err2
1010010101 // 1650   L05112:  1.1..1.1.1  -> L05245           	jsb div1
0000001001 // 1651   L05113:  ......1..1  -> L05002           	jsb adr6
1110101110 // 1652   L05114:  111.1.111.                      	a exchange c[w]
1010011001 // 1653   L05115:  1.1..11..1  -> L05246           	jsb sub1
0100101000 // 1654   L05116:  .1..1.1...                      	c -> stack
0000000101 // 1655   L05117:  .......1.1  -> L05001           	jsb adr5
1110101110 // 1656   L05120:  111.1.111.                      	a exchange c[w]
0011001110 // 1657   L05121:  ..11..111.                      	0 -> c[w]
0111100010 // 1658   L05122:  .1111...1.                      	c + 1 -> c[p]
1010011001 // 1659   L05123:  1.1..11..1  -> L05246           	jsb sub1
0110101000 // 1660   L05124:  .11.1.1...                      	stack -> a
1010010101 // 1661   L05125:  1.1..1.1.1  -> L05245           	jsb div1
0100000101 // 1662   L05126:  .1.....1.1  -> L05101           	jsb sqt1
0100101000 // 1663   L05127:  .1..1.1...                      	c -> stack
0000001101 // 1664   L05130:  ......11.1  -> L05003           	jsb adr7
0110001110 // 1665   L05131:  .11...111.                      	c -> a[w]
0000000101 // 1666   L05132:  .......1.1  -> L05001           	jsb adr5
1010000101 // 1667   L05133:  1.1....1.1  -> L05241           	jsb div0
0100100100 // 1668   L05134:  .1..1..1..                      rcxy:	0 -> s4
0111010100 // 1669   L05135:  .111.1.1..                      	if s7 # 1
0110000011 // 1670   L05136:  .11.....11  -> L05140           	     then go to rxy1
0100101000 // 1671   L05137:  .1..1.1...                      	c -> stack
0110001110 // 1672   L05140:  .11...111.                      rxy1:	c -> a[w]
0000010001 // 1673   L05141:  .....1...1  -> L05004           	jsb adr8
0100101000 // 1674   L05142:  .1..1.1...                      	c -> stack
0110001110 // 1675   L05143:  .11...111.                      	c -> a[w]
0000001101 // 1676   L05144:  ......11.1  -> L05003           	jsb adr7
0111111011 // 1677   L05145:  .111111.11  -> L05176           	go to fst1
           // 1678                                            
0000000000 // 1679   L05146:  ..........                      	no operation
0000000000 // 1680   L05147:  ..........                      	no operation
0000000000 // 1681   L05150:  ..........                      	no operation
0000000000 // 1682   L05151:  ..........                      	no operation
0000000000 // 1683   L05152:  ..........                      	no operation
0000000000 // 1684   L05153:  ..........                      	no operation
0000000000 // 1685   L05154:  ..........                      	no operation
0000000000 // 1686   L05155:  ..........                      	no operation
0000000000 // 1687   L05156:  ..........                      	no operation
0000000000 // 1688   L05157:  ..........                      	no operation
0000000000 // 1689   L05160:  ..........                      	no operation
0000000000 // 1690   L05161:  ..........                      	no operation
0000000000 // 1691   L05162:  ..........                      	no operation
0000000000 // 1692   L05163:  ..........                      	no operation
0000000000 // 1693   L05164:  ..........                      	no operation
           // 1694                                            
1011101101 // 1695   L05165:  1.111.11.1  -> L05273           am10:	jsb stor
1110101110 // 1696   L05166:  111.1.111.                      	a exchange c[w]
0110010000 // 1697   L05167:  .11..1....  -> L03170  *****    	select rom 3
           // 1698                                            
0000000000 // 1699   L05170:  ..........                      	no operation
0000000000 // 1700   L05171:  ..........                      	no operation
0000000000 // 1701   L05172:  ..........                      	no operation
           // 1702                                            
1101110001 // 1703   L05173:  11.111...1  -> L05334           amd0z4:	jsb dcod
1001010100 // 1704   L05174:  1..1.1.1..                      	if s9 # 1
0111010111 // 1705   L05175:  .111.1.111  -> L05165           	     then go to am10
0110010000 // 1706   L05176:  .11..1....  -> L03177  *****    fst1:	select rom 3
           // 1707                                            
0000000000 // 1708   L05177:  ..........                      	no operation
0000000000 // 1709   L05200:  ..........                      	no operation
0000000000 // 1710   L05201:  ..........                      	no operation
0000000000 // 1711   L05202:  ..........                      	no operation
0000000000 // 1712   L05203:  ..........                      	no operation
0000000000 // 1713   L05204:  ..........                      	no operation
0000000000 // 1714   L05205:  ..........                      	no operation
0000000000 // 1715   L05206:  ..........                      	no operation
0000000000 // 1716   L05207:  ..........                      	no operation
0000000000 // 1717   L05210:  ..........                      	no operation
0000000000 // 1718   L05211:  ..........                      	no operation
0000000000 // 1719   L05212:  ..........                      	no operation
0000000000 // 1720   L05213:  ..........                      	no operation
0000000000 // 1721   L05214:  ..........                      	no operation
0000000000 // 1722   L05215:  ..........                      	no operation
0000000000 // 1723   L05216:  ..........                      	no operation
0000000000 // 1724   L05217:  ..........                      	no operation
0000000000 // 1725   L05220:  ..........                      	no operation
0000000000 // 1726   L05221:  ..........                      	no operation
0000000000 // 1727   L05222:  ..........                      	no operation
0000000000 // 1728   L05223:  ..........                      	no operation
0000000000 // 1729   L05224:  ..........                      	no operation
0000000000 // 1730   L05225:  ..........                      	no operation
0000000000 // 1731   L05226:  ..........                      	no operation
0000000000 // 1732   L05227:  ..........                      	no operation
0000000000 // 1733   L05230:  ..........                      	no operation
0000000000 // 1734   L05231:  ..........                      	no operation
0000000000 // 1735   L05232:  ..........                      	no operation
0000000000 // 1736   L05233:  ..........                      	no operation
0000000000 // 1737   L05234:  ..........                      	no operation
0000000000 // 1738   L05235:  ..........                      	no operation
0000000000 // 1739   L05236:  ..........                      	no operation
0000000000 // 1740   L05237:  ..........                      	no operation
           // 1741                                            
0101110011 // 1742   L05240:  .1.111..11  -> L05134           rcxyz4:	go to rcxy
           // 1743                                            
0011100100 // 1744   L05241:  ..111..1..                      div0:	0 -> s3
1010010111 // 1745   L05242:  1.1..1.111  -> L05245           	go to div1
           // 1746                                            
0011100100 // 1747   L05243:  ..111..1..                      mul0:	0 -> s3
0010010000 // 1748   L05244:  ..1..1....  -> L01245  *****    mul1:	select rom 1
           // 1749                                            
0010010000 // 1750   L05245:  ..1..1....  -> L01246  *****    div1:	select rom 1
           // 1751                                            
0011111110 // 1752   L05246:  ..1111111.                      sub1:	0 - c - 1 -> c[s]
0000010000 // 1753   L05247:  .....1....  -> L00250  *****    add1:	select rom 0
           // 1754                                            
0000000000 // 1755   L05250:  ..........                      	no operation
0000000000 // 1756   L05251:  ..........                      	no operation
0000000000 // 1757   L05252:  ..........                      	no operation
0000000000 // 1758   L05253:  ..........                      	no operation
0000000000 // 1759   L05254:  ..........                      	no operation
0000000000 // 1760   L05255:  ..........                      	no operation
0000000000 // 1761   L05256:  ..........                      	no operation
0000000000 // 1762   L05257:  ..........                      	no operation
           // 1763                                            
0011010010 // 1764   L05260:  ..11.1..1.                      dvof:	0 -> c[wp]
0101110010 // 1765   L05261:  .1.111..1.                      	c - 1 -> c[wp]
0011011010 // 1766   L05262:  ..11.11.1.                      	0 -> c[xs]
0100010000 // 1767   L05263:  .1...1....  -> L02264  *****    	select rom 2
           // 1768                                            
1011000011 // 1769   L05264:  1.11....11  -> L05260           dvofz2:	go to dvof
           // 1770                                            
0011010010 // 1771   L05265:  ..11.1..1.                      ofl1:	0 -> c[wp]
0101110010 // 1772   L05266:  .1.111..1.                      	c - 1 -> c[wp]
0011011010 // 1773   L05267:  ..11.11.1.                      	0 -> c[xs]
1110001010 // 1774   L05270:  111...1.1.                      	a + b -> a[x]
1011101111 // 1775   L05271:  1.111.1111  -> L05273           	if no carry go to stor
0011001110 // 1776   L05272:  ..11..111.                      	0 -> c[w]
0110001110 // 1777   L05273:  .11...111.                      stor:	c -> a[w]
1100001100 // 1778   L05274:  11....11..                      ofl4:	12 -> p
0100101010 // 1779   L05275:  .1..1.1.1.                      	a -> b[x]
0110001010 // 1780   L05276:  .11...1.1.                      	c -> a[x]
0110111010 // 1781   L05277:  .11.111.1.                      	if c[xs] = 0
1100010011 // 1782   L05300:  11...1..11  -> L05304           	     then go to ofl5
0010101010 // 1783   L05301:  ..1.1.1.1.                      	0 - c -> c[x]
0101111010 // 1784   L05302:  .1.1111.1.                      	c - 1 -> c[xs]
1011010111 // 1785   L05303:  1.11.1.111  -> L05265           	if no carry go to ofl1
1110110110 // 1786   L05304:  111.11.11.                      ofl5:	a exchange c[ms]
1011111000 // 1787   L05305:  1.11111...                      	data -> c
1110101110 // 1788   L05306:  111.1.111.                      	a exchange c[w]
1011110000 // 1789   L05307:  1.1111....                      	c -> data
0000110000 // 1790   L05310:  ....11....                      	return
           // 1791                                            
0000000000 // 1792   L05311:  ..........                      	no operation
0000000000 // 1793   L05312:  ..........                      	no operation
0000000000 // 1794   L05313:  ..........                      	no operation
0000000000 // 1795   L05314:  ..........                      	no operation
0000000000 // 1796   L05315:  ..........                      	no operation
0000000000 // 1797   L05316:  ..........                      	no operation
0000000000 // 1798   L05317:  ..........                      	no operation
0000000000 // 1799   L05320:  ..........                      	no operation
0000000000 // 1800   L05321:  ..........                      	no operation
0000000000 // 1801   L05322:  ..........                      	no operation
0000000000 // 1802   L05323:  ..........                      	no operation
0000000000 // 1803   L05324:  ..........                      	no operation
0000000000 // 1804   L05325:  ..........                      	no operation
0000000000 // 1805   L05326:  ..........                      	no operation
0000000000 // 1806   L05327:  ..........                      	no operation
0000000000 // 1807   L05330:  ..........                      	no operation
0000000000 // 1808   L05331:  ..........                      	no operation
0000000000 // 1809   L05332:  ..........                      	no operation
0000000000 // 1810   L05333:  ..........                      	no operation
           // 1811                                            
0100010100 // 1812   L05334:  .1...1.1..                      dcod:	if s4 # 1
1110000111 // 1813   L05335:  111....111  -> L05341           	     then go to dcd1
0110010100 // 1814   L05336:  .11..1.1..                      	if s6 # 1
1010011011 // 1815   L05337:  1.1..11.11  -> L05246           	     then go to sub1
1010011111 // 1816   L05340:  1.1..11111  -> L05247           	go to add1
           // 1817                                            
0110010100 // 1818   L05341:  .11..1.1..                      dcd1:	if s6 # 1
1010010111 // 1819   L05342:  1.1..1.111  -> L05245           	     then go to div1
1010010011 // 1820   L05343:  1.1..1..11  -> L05244           	go to mul1
           // 1821                                            
0011001110 // 1822   L05344:  ..11..111.                      pwo2:	0 -> c[w]
0101111110 // 1823   L05345:  .1.111111.                      	c - 1 -> c[s]
0010001100 // 1824   L05346:  ..1...11..                      	2 -> p
0010011000 // 1825   L05347:  ..1..11...                      	load constant 2
0010101000 // 1826   L05350:  ..1.1.1...                      	c exchange m
0011001110 // 1827   L05351:  ..11..111.                      	0 -> c[w]
1011101110 // 1828   L05352:  1.111.111.                      clr2:	0 -> a[w]
1100001100 // 1829   L05353:  11....11..                      	12 -> p
0101100010 // 1830   L05354:  .1.11...1.                      clr3:	c - 1 -> c[p]
1001110000 // 1831   L05355:  1..111....                      	c -> data address
1110101110 // 1832   L05356:  111.1.111.                      	a exchange c[w]
0100101000 // 1833   L05357:  .1..1.1...                      	c -> stack
1011110000 // 1834   L05360:  1.1111....                      	c -> data
1110101110 // 1835   L05361:  111.1.111.                      	a exchange c[w]
0111100010 // 1836   L05362:  .1111...1.                      	c + 1 -> c[p]
0111100010 // 1837   L05363:  .1111...1.                      	c + 1 -> c[p]
1110110011 // 1838   L05364:  111.11..11  -> L05354           	if no carry go to clr3
0111111011 // 1839   L05365:  .111111.11  -> L05176           	go to fst1
           // 1840                                            
0011001110 // 1841   L05366:  ..11..111.                      clr1z4:	0 -> c[w]
0110011000 // 1842   L05367:  .11..11...                      	load constant 6
1110101011 // 1843   L05370:  111.1.1.11  -> L05352           	go to clr2
           // 1844                                            
0000000000 // 1845   L05371:  ..........                      	no operation
0000000000 // 1846   L05372:  ..........                      	no operation
0000000000 // 1847   L05373:  ..........                      	no operation
0000000000 // 1848   L05374:  ..........                      	no operation
0000000000 // 1849   L05375:  ..........                      	no operation
0000000000 // 1850   L05376:  ..........                      	no operation
           // 1851                                            
0000110000 // 1852   L05377:  ....11....                      retnzx:	return
           // 1853                                            
           // 1855                                            
           // 1856                                            	.rom @06
           // 1857                                            
1011110011 // 1858   L06000:  1.1111..11  -> L06274           factz4:	go to fact
           // 1859                                            
0000011111 // 1860   L06001:  .....11111  -> L06007           err2z1:	go to errr
           // 1861                                            
0000110100 // 1862   L06002:  ....11.1..                      tdmsz0:	clear status
0111111111 // 1863   L06003:  .111111111  -> L06177           	go to tdmszj
           // 1864                                            
0111111010 // 1865   L06004:  .111111.1.                      oflw:	c + 1 -> c[xs]
0111111001 // 1866   L06005:  .111111..1  -> L06176           	jsb fst1
           // 1867                                            
1111010001 // 1868   L06006:  1111.1...1  -> L06364           tenxzj:	jsb tnx3
0011001110 // 1869   L06007:  ..11..111.                      errr:	0 -> c[w]
0000110100 // 1870   L06010:  ....11.1..                      	clear status
0101000100 // 1871   L06011:  .1.1...1..                      	1 -> s5
0110001110 // 1872   L06012:  .11...111.                      rnd0z3:	c -> a[w]
1010101000 // 1873   L06013:  1.1.1.1...                      	m -> c
1110101110 // 1874   L06014:  111.1.111.                      	a exchange c[w]
0001100111 // 1875   L06015:  ...11..111  -> L06031           	go to rndx
           // 1876                                            
1011010110 // 1877   L06016:  1.11.1.11.                      rnd3:	shift right a[ms]
1111101010 // 1878   L06017:  11111.1.1.                      	a + 1 -> a[x]
0000111011 // 1879   L06020:  ....111.11  -> L06016           	if no carry go to rnd3
1101001100 // 1880   L06021:  11.1..11..                      rnd4:	13 -> p
1100111010 // 1881   L06022:  11..111.1.                      rnd5:	a exchange b[xs]
0100111010 // 1882   L06023:  .1..111.1.                      	a -> b[xs]
0000011100 // 1883   L06024:  .....111..                      rnd6:	p - 1 -> p
0010101100 // 1884   L06025:  ..1.1.11..                      	if p # 2
0010110111 // 1885   L06026:  ..1.11.111  -> L06055           	     then go to rnd7
1011101110 // 1886   L06027:  1.111.111.                      rnof:	0 -> a[w]
1101101010 // 1887   L06030:  11.11.1.1.                      	a - 1 -> a[x]
0000101110 // 1888   L06031:  ....1.111.                      rndx:	0 -> b[w]
1000000100 // 1889   L06032:  1......1..                      	1 -> s8
0001001100 // 1890   L06033:  ...1..11..                      	1 -> p
0100111010 // 1891   L06034:  .1..111.1.                      	a -> b[xs]
0110000110 // 1892   L06035:  .11....11.                      	c -> a[m]
0100010110 // 1893   L06036:  .1...1.11.                      	shift left a[ms]
1001100010 // 1894   L06037:  1..11...1.                      	if a[p] >= 1
0001000111 // 1895   L06040:  ...1...111  -> L06021           	     then go to rnd4
1000100100 // 1896   L06041:  1...1..1..                      	0 -> s8
1110001100 // 1897   L06042:  111...11..                      	14 -> p
0110001010 // 1898   L06043:  .11...1.1.                      	c -> a[x]
0001111010 // 1899   L06044:  ...1111.1.                      	if c[xs] >= 1
0000111011 // 1900   L06045:  ....111.11  -> L06016           	     then go to rnd3
0000011100 // 1901   L06046:  .....111..                      rnd1:	p - 1 -> p
0010101100 // 1902   L06047:  ..1.1.11..                      	if p # 2
0010101011 // 1903   L06050:  ..1.1.1.11  -> L06052           	     then go to rnd2
0001011111 // 1904   L06051:  ...1.11111  -> L06027           	go to rnof
           // 1905                                            
1101101010 // 1906   L06052:  11.11.1.1.                      rnd2:	a - 1 -> a[x]
0010011011 // 1907   L06053:  ..1..11.11  -> L06046           	if no carry go to rnd1
0001001011 // 1908   L06054:  ...1..1.11  -> L06022           	go to rnd5
           // 1909                                            
1101111010 // 1910   L06055:  11.1111.1.                      rnd7:	a - 1 -> a[xs]
0001010011 // 1911   L06056:  ...1.1..11  -> L06024           	if no carry go to rnd6
0100100010 // 1912   L06057:  .1..1...1.                      	a -> b[p]
0000011100 // 1913   L06060:  .....111..                      	p - 1 -> p
1011110010 // 1914   L06061:  1.1111..1.                      	0 -> a[wp]
0110001010 // 1915   L06062:  .11...1.1.                      	c -> a[x]
1110010110 // 1916   L06063:  111..1.11.                      	a + b -> a[ms]
0011101011 // 1917   L06064:  ..111.1.11  -> L06072           	if no carry go to rnd8
1011010110 // 1918   L06065:  1.11.1.11.                      	shift right a[ms]
1111111110 // 1919   L06066:  111111111.                      	a + 1 -> a[s]
1111101010 // 1920   L06067:  11111.1.1.                      	a + 1 -> a[x]
1000010100 // 1921   L06070:  1....1.1..                      	if s8 # 1
0011101111 // 1922   L06071:  ..111.1111  -> L06073           	     then go to rnd9
0000111100 // 1923   L06072:  ....1111..                      rnd8:	p + 1 -> p
1011010110 // 1924   L06073:  1.11.1.11.                      rnd9:	shift right a[ms]
0000110110 // 1925   L06074:  ....11.11.                      	0 -> b[ms]
1101111010 // 1926   L06075:  11.1111.1.                      	a - 1 -> a[xs]
1001111010 // 1927   L06076:  1..1111.1.                      	if a[xs] >= 1
0100000111 // 1928   L06077:  .1.....111  -> L06101           	     then go to rn10
0001011111 // 1929   L06100:  ...1.11111  -> L06027           	go to rnof
           // 1930                                            
1111111010 // 1931   L06101:  1111111.1.                      rn10:	a + 1 -> a[xs]
1100101110 // 1932   L06102:  11..1.111.                      	a exchange b[w]
1111100010 // 1933   L06103:  11111...1.                      	a + 1 -> a[p]
1111100010 // 1934   L06104:  11111...1.                      	a + 1 -> a[p]
0100010110 // 1935   L06105:  .1...1.11.                      rn11:	shift left a[ms]
1101111010 // 1936   L06106:  11.1111.1.                      	a - 1 -> a[xs]
0100010111 // 1937   L06107:  .1...1.111  -> L06105           	if no carry go to rn11
1011110010 // 1938   L06110:  1.1111..1.                      	0 -> a[wp]
1101110010 // 1939   L06111:  11.111..1.                      	a - 1 -> a[wp]
1011010110 // 1940   L06112:  1.11.1.11.                      	shift right a[ms]
1100101110 // 1941   L06113:  11..1.111.                      	a exchange b[w]
1000010100 // 1942   L06114:  1....1.1..                      	if s8 # 1
0101010111 // 1943   L06115:  .1.1.1.111  -> L06125           	     then go to rnrt
1110101010 // 1944   L06116:  111.1.1.1.                      	a exchange c[x]
0000101010 // 1945   L06117:  ....1.1.1.                      	0 -> b[x]
0110111010 // 1946   L06120:  .11.111.1.                      	if c[xs] = 0
0101010011 // 1947   L06121:  .1.1.1..11  -> L06124           	     then go to rtrn
0010101010 // 1948   L06122:  ..1.1.1.1.                      	0 - c -> c[x]
0101111010 // 1949   L06123:  .1.1111.1.                      	c - 1 -> c[xs]
1110101010 // 1950   L06124:  111.1.1.1.                      rtrn:	a exchange c[x]
0101010100 // 1951   L06125:  .1.1.1.1..                      rnrt:	if s5 # 1
1111111011 // 1952   L06126:  1111111.11  -> L06376           	     then go to ret3
1000000011 // 1953   L06127:  1.......11  -> L06200           	go to fst2
           // 1954                                            
0000000000 // 1955   L06130:  ..........                      	no operation
0000000000 // 1956   L06131:  ..........                      	no operation
0000000000 // 1957   L06132:  ..........                      	no operation
0000000000 // 1958   L06133:  ..........                      	no operation
0000000000 // 1959   L06134:  ..........                      	no operation
0000000000 // 1960   L06135:  ..........                      	no operation
0000000000 // 1961   L06136:  ..........                      	no operation
0000000000 // 1962   L06137:  ..........                      	no operation
0000000000 // 1963   L06140:  ..........                      	no operation
0000000000 // 1964   L06141:  ..........                      	no operation
0000000000 // 1965   L06142:  ..........                      	no operation
           // 1966                                            
1011010011 // 1967   L06143:  1.11.1..11  -> L06264           savezx:	go to save
           // 1968                                            
1010010011 // 1969   L06144:  1.1..1..11  -> L06244           sav2zx:	go to sav2
           // 1970                                            
0110001110 // 1971   L06145:  .11...111.                      adr9z4:	c -> a[w]
0011001110 // 1972   L06146:  ..11..111.                      	0 -> c[w]
0101100010 // 1973   L06147:  .1.11...1.                      	c - 1 -> c[p]
1001110000 // 1974   L06150:  1..111....                      	c -> data address
1110101110 // 1975   L06151:  111.1.111.                      	a exchange c[w]
0110001110 // 1976   L06152:  .11...111.                      	c -> a[w]
1111101111 // 1977   L06153:  11111.1111  -> L06373           	go to svrt
           // 1978                                            
0000000000 // 1979   L06154:  ..........                      	no operation
0000000000 // 1980   L06155:  ..........                      	no operation
0000000000 // 1981   L06156:  ..........                      	no operation
0000000000 // 1982   L06157:  ..........                      	no operation
0000000000 // 1983   L06160:  ..........                      	no operation
0000000000 // 1984   L06161:  ..........                      	no operation
           // 1985                                            
1000000111 // 1986   L06162:  1......111  -> L06201           consz4:	go to cons
           // 1987                                            
0111011001 // 1988   L06163:  .111.11..1  -> L06166           piiiz4:	jsb push
0000110100 // 1989   L06164:  ....11.1..                      	clear status
0010010000 // 1990   L06165:  ..1..1....  -> L01166  *****    	select rom 1
           // 1991                                            
0111010100 // 1992   L06166:  .111.1.1..                      push:	if s7 # 1
0111100111 // 1993   L06167:  .1111..111  -> L06171           	     then go to pret
0100101000 // 1994   L06170:  .1..1.1...                      	c -> stack
0011001110 // 1995   L06171:  ..11..111.                      pret:	0 -> c[w]
0000110000 // 1996   L06172:  ....11....                      	return
           // 1997                                            
0000000000 // 1998   L06173:  ..........                      	no operation
           // 1999                                            
1010100100 // 2000   L06174:  1.1.1..1..                      lstxzj:	0 -> s10
0110010001 // 2001   L06175:  .11..1...1  -> L06144           	jsb sav2zx
0110010000 // 2002   L06176:  .11..1....  -> L03177  *****    fst1:	select rom 3
           // 2003                                            
0001100101 // 2004   L06177:  ...11..1.1  -> L06031           tdmszj:	jsb rndx
0110010000 // 2005   L06200:  .11..1....  -> L03201  *****    fst2:	select rom 3
           // 2006                                            
0100001110 // 2007   L06201:  .1....111.                      cons:	shift left a[w]
0100001110 // 2008   L06202:  .1....111.                      	shift left a[w]
0111011001 // 2009   L06203:  .111.11..1  -> L06166           	jsb push
1101111010 // 2010   L06204:  11.1111.1.                      	a - 1 -> a[xs]
1000011111 // 2011   L06205:  1....11111  -> L06207           	if no carry go to con7
0111110011 // 2012   L06206:  .11111..11  -> L06174           	go to lstxzj
           // 2013                                            
1101111010 // 2014   L06207:  11.1111.1.                      con7:	a - 1 -> a[xs]
1000110111 // 2015   L06210:  1...11.111  -> L06215           	if no carry go to con8
0010011000 // 2016   L06211:  ..1..11...                      	load constant 2
0101011000 // 2017   L06212:  .1.1.11...                      	load constant 5
0100011000 // 2018   L06213:  .1...11...                      	load constant 4
0111111011 // 2019   L06214:  .111111.11  -> L06176           	go to fst1
           // 2020                                            
1101111010 // 2021   L06215:  11.1111.1.                      con8:	a - 1 -> a[xs]
1001100111 // 2022   L06216:  1..11..111  -> L06231           	if no carry go to con9
0100011000 // 2023   L06217:  .1...11...                      	load constant 4
0101011000 // 2024   L06220:  .1.1.11...                      	load constant 5
0011011000 // 2025   L06221:  ..11.11...                      	load constant 3
0101011000 // 2026   L06222:  .1.1.11...                      	load constant 5
1001011000 // 2027   L06223:  1..1.11...                      	load constant 9
0010011000 // 2028   L06224:  ..1..11...                      	load constant 2
0011011000 // 2029   L06225:  ..11.11...                      	load constant 3
0111011000 // 2030   L06226:  .111.11...                      	load constant 7
0101101010 // 2031   L06227:  .1.11.1.1.                      	c - 1 -> c[x]
0111111001 // 2032   L06230:  .111111..1  -> L06176           	jsb fst1
           // 2033                                            
0011011000 // 2034   L06231:  ..11.11...                      con9:	load constant 3
0111011000 // 2035   L06232:  .111.11...                      	load constant 7
1000011000 // 2036   L06233:  1....11...                      	load constant 8
0101011000 // 2037   L06234:  .1.1.11...                      	load constant 5
0100011000 // 2038   L06235:  .1...11...                      	load constant 4
0001011000 // 2039   L06236:  ...1.11...                      	load constant 1
0001011000 // 2040   L06237:  ...1.11...                      	load constant 1
0111011000 // 2041   L06240:  .111.11...                      	load constant 7
1000011000 // 2042   L06241:  1....11...                      	load constant 8
0100011000 // 2043   L06242:  .1...11...                      	load constant 4
0111111011 // 2044   L06243:  .111111.11  -> L06176           	go to fst1
           // 2045                                            
0000001100 // 2046   L06244:  ......11..                      sav2:	0 -> p
0100001110 // 2047   L06245:  .1....111.                      sav1:	shift left a[w]
0000111100 // 2048   L06246:  ....1111..                      	p + 1 -> p
1100101100 // 2049   L06247:  11..1.11..                      	if p # 12
1010010111 // 2050   L06250:  1.1..1.111  -> L06245           	     then go to sav1
1011111110 // 2051   L06251:  1.1111111.                      	0 -> a[s]
1110101110 // 2052   L06252:  111.1.111.                      	a exchange c[w]
1001110000 // 2053   L06253:  1..111....                      	c -> data address
0010100100 // 2054   L06254:  ..1.1..1..                      	0 -> s2
1011111000 // 2055   L06255:  1.11111...                      	data -> c
1110101110 // 2056   L06256:  111.1.111.                      	a exchange c[w]
1011100100 // 2057   L06257:  1.111..1..                      	0 -> s11
0000101110 // 2058   L06260:  ....1.111.                      	0 -> b[w]
0001010100 // 2059   L06261:  ...1.1.1..                      	if s1 # 1
1111101111 // 2060   L06262:  11111.1111  -> L06373           	     then go to svrt
0110010111 // 2061   L06263:  .11..1.111  -> L06145           	go to adr9z4
           // 2062                                            
0100101110 // 2063   L06264:  .1..1.111.                      save:	a -> b[w]
1110101110 // 2064   L06265:  111.1.111.                      	a exchange c[w]
0011001110 // 2065   L06266:  ..11..111.                      	0 -> c[w]
1001110000 // 2066   L06267:  1..111....                      	c -> data address
0010001110 // 2067   L06270:  ..1...111.                      	b -> c[w]
1110101110 // 2068   L06271:  111.1.111.                      	a exchange c[w]
1011110000 // 2069   L06272:  1.1111....                      	c -> data
0110010011 // 2070   L06273:  .11..1..11  -> L06144           	go to sav2zx
           // 2071                                            
0001111110 // 2072   L06274:  ...111111.                      fact:	if c[s] >= 1
0000011111 // 2073   L06275:  .....11111  -> L06007           	     then go to errr
0001111010 // 2074   L06276:  ...1111.1.                      	if c[xs] >= 1
0000011111 // 2075   L06277:  .....11111  -> L06007           	     then go to errr
0001101010 // 2076   L06300:  ...11.1.1.                      fac0:	if c[x] >= 1
1100010011 // 2077   L06301:  11...1..11  -> L06304           	     then go to fac1
0000011100 // 2078   L06302:  .....111..                      	p - 1 -> p
1100101111 // 2079   L06303:  11..1.1111  -> L06313           	go to fact1
0000011100 // 2080   L06304:  .....111..                      fac1:	p - 1 -> p
0011101100 // 2081   L06305:  ..111.11..                      	if p # 3
1100100011 // 2082   L06306:  11..1...11  -> L06310           	     then go to fac2
0000010011 // 2083   L06307:  .....1..11  -> L06004           	go to oflw
           // 2084                                            
0101101010 // 2085   L06310:  .1.11.1.1.                      fac2:	c - 1 -> c[x]
1100000001 // 2086   L06311:  11.......1  -> L06300           	jsb fac0
0100010000 // 2087   L06312:  .1...1....  -> L02313  *****    nrm20:	select rom 2
           // 2088                                            
0001110010 // 2089   L06313:  ...111..1.                      fact1:	if c[wp] >= 1
0000011111 // 2090   L06314:  .....11111  -> L06007           	     then go to errr
1110101010 // 2091   L06315:  111.1.1.1.                      	a exchange c[x]
1011001100 // 2092   L06316:  1.11..11..                      	11 -> p
0110101010 // 2093   L06317:  .11.1.1.1.                      	if c[x] = 0
1101010111 // 2094   L06320:  11.1.1.111  -> L06325           	     then go to fact2
0101101010 // 2095   L06321:  .1.11.1.1.                      	c - 1 -> c[x]
0001101010 // 2096   L06322:  ...11.1.1.                      	if c[x] >= 1
0000010011 // 2097   L06323:  .....1..11  -> L06004           	     then go to oflw
0100001110 // 2098   L06324:  .1....111.                      	shift left a[w]
1110101110 // 2099   L06325:  111.1.111.                      fact2:	a exchange c[w]
1011101110 // 2100   L06326:  1.111.111.                      	0 -> a[w]
1111100010 // 2101   L06327:  11111...1.                      	a + 1 -> a[p]
0010101110 // 2102   L06330:  ..1.1.111.                      	0 - c -> c[w]
1100101011 // 2103   L06331:  11..1.1.11  -> L06312           	if no carry go to nrm20
1110101110 // 2104   L06332:  111.1.111.                      	a exchange c[w]
1001001110 // 2105   L06333:  1..1..111.                      	shift right c[w]
0111111110 // 2106   L06334:  .11111111.                      	c + 1 -> c[s]
1100001100 // 2107   L06335:  11....11..                      fact3:	12 -> p
0100110110 // 2108   L06336:  .1..11.11.                      	a -> b[ms]
1111001110 // 2109   L06337:  1111..111.                      fact4:	a + c -> a[w]
1101111111 // 2110   L06340:  11.1111111  -> L06337           	if no carry go to fact4
1101001110 // 2111   L06341:  11.1..111.                      	a - c -> a[w]
0100001110 // 2112   L06342:  .1....111.                      	shift left a[w]
1111001110 // 2113   L06343:  1111..111.                      fact5:	a + c -> a[w]
1110001111 // 2114   L06344:  111...1111  -> L06343           	if no carry go to fact5
1111111110 // 2115   L06345:  111111111.                      	a + 1 -> a[s]
1100101110 // 2116   L06346:  11..1.111.                      	a exchange b[w]
1111011001 // 2117   L06347:  1111.11..1  -> L06366           	jsb shft
1011001100 // 2118   L06350:  1.11..11..                      	11 -> p
1111011001 // 2119   L06351:  1111.11..1  -> L06366           	jsb shft
0010001110 // 2120   L06352:  ..1...111.                      	b -> c[w]
0000110010 // 2121   L06353:  ....11..1.                      	0 -> b[wp]
1010001110 // 2122   L06354:  1.1...111.                      	shift right b[w]
1100101110 // 2123   L06355:  11..1.111.                      	a exchange b[w]
1110010110 // 2124   L06356:  111..1.11.                      	a + b -> a[ms]
1101110111 // 2125   L06357:  11.111.111  -> L06335           	if no carry go to fact3
1110101110 // 2126   L06360:  111.1.111.                      	a exchange c[w]
1000101010 // 2127   L06361:  1...1.1.1.                      	b exchange c[x]
0111101010 // 2128   L06362:  .1111.1.1.                      fact6:	c + 1 -> c[x]
1100101001 // 2129   L06363:  11..1.1..1  -> L06312           fact7:	jsb nrm20
1000100100 // 2130   L06364:  1...1..1..                      tnx3:	0 -> s8
0100010000 // 2131   L06365:  .1...1....  -> L02366  *****    	select rom 2
           // 2132                                            
0000000010 // 2133   L06366:  ........1.                      shft:	if b[p] = 0
1111101011 // 2134   L06367:  11111.1.11  -> L06372           	     then go to shfr
1010010010 // 2135   L06370:  1.1..1..1.                      	shift right b[wp]
1111101010 // 2136   L06371:  11111.1.1.                      	a + 1 -> a[x]
0000110000 // 2137   L06372:  ....11....                      shfr:	return
           // 2138                                            
1010010100 // 2139   L06373:  1.1..1.1..                      svrt:	if s10 # 1
1111111011 // 2140   L06374:  1111111.11  -> L06376           	     then go to ret3
1000010000 // 2141   L06375:  1....1....  -> L04376  *****    ret4:	select rom 4
           // 2142                                            
0110010000 // 2143   L06376:  .11..1....  -> L03377  *****    ret3:	select rom 3
           // 2144                                            
0000000000 // 2145   L06377:  ..........                      	no operation
           // 2146                                            
           // 2148                                            
           // 2149                                            	.rom @07
           // 2150                                            
0000010111 // 2151   L07000:  .....1.111  -> L07005           prfx:	go to wt22
1010001011 // 2152   L07001:  1.1...1.11  -> L07242           wt30:	go to wt29
0000010111 // 2153   L07002:  .....1.111  -> L07005           fix1:	go to wt22
0000010111 // 2154   L07003:  .....1.111  -> L07005           expn:	go to wt22
0000010111 // 2155   L07004:  .....1.111  -> L07005           lnnn:	go to wt22
0000110111 // 2156   L07005:  ....11.111  -> L07015           wt22:	go to wt21
0000010111 // 2157   L07006:  .....1.111  -> L07005           invx:	go to wt22
0001000111 // 2158   L07007:  ...1...111  -> L07021           wt18:	go to wt17
0000010111 // 2159   L07010:  .....1.111  -> L07005           perc:	go to wt22
1010011111 // 2160   L07011:  1.1..11111  -> L07247           wt09:	go to wt08
0000010111 // 2161   L07012:  .....1.111  -> L07005           rcal:	go to wt22
0000010111 // 2162   L07013:  .....1.111  -> L07005           stor:	go to wt22
0000010111 // 2163   L07014:  .....1.111  -> L07005           rold:	go to wt22
1010010011 // 2164   L07015:  1.1..1..11  -> L07244           wt21:	go to wt20
0000010111 // 2165   L07016:  .....1.111  -> L07005           exc1:	go to wt22
1001011000 // 2166   L07017:  1..1.11...                      reg9:	load constant 9
1001001111 // 2167   L07020:  1..1..1111  -> L07223           	go to rega
1010010111 // 2168   L07021:  1.1..1.111  -> L07245           wt17:	go to wt16
0011000011 // 2169   L07022:  ..11....11  -> L07060           dig6:	go to reg6
0001111111 // 2170   L07023:  ...1111111  -> L07037           dig5:	go to reg5
0100011000 // 2171   L07024:  .1...11...                      dig4:	load constant 4
0111110111 // 2172   L07025:  .11111.111  -> L07175           	go to reg1
0000010111 // 2173   L07026:  .....1.111  -> L07005           addd:	go to wt22
1000011000 // 2174   L07027:  1....11...                      reg8:	load constant 8
1001001111 // 2175   L07030:  1..1..1111  -> L07223           	go to rega
1010100011 // 2176   L07031:  1.1.1...11  -> L07250           wt06:	go to wt05
0111101011 // 2177   L07032:  .1111.1.11  -> L07172           dig3:	go to reg3
0111110011 // 2178   L07033:  .11111..11  -> L07174           dig2:	go to reg2
0001011000 // 2179   L07034:  ...1.11...                      dig1:	load constant 1
0111110111 // 2180   L07035:  .11111.111  -> L07175           	go to reg1
0000010111 // 2181   L07036:  .....1.111  -> L07005           mult:	go to wt22
0101011000 // 2182   L07037:  .1.1.11...                      reg5:	load constant 5
1001001111 // 2183   L07040:  1..1..1111  -> L07223           	go to rega
0010011111 // 2184   L07041:  ..1..11111  -> L07047           wt11:	go to wt10
1001000011 // 2185   L07042:  1..1....11  -> L07220           sigp:	go to chs3
1101000111 // 2186   L07043:  11.1...111  -> L07321           dcpt:	go to retn
0000011000 // 2187   L07044:  .....11...                      dig0:	load constant 0
0111110111 // 2188   L07045:  .11111.111  -> L07175           	go to reg1
0000010111 // 2189   L07046:  .....1.111  -> L07005           divd:	go to wt22
0000100111 // 2190   L07047:  ....1..111  -> L07011           wt10:	go to wt09
0000010111 // 2191   L07050:  .....1.111  -> L07005           tang:	go to wt22
0010110111 // 2192   L07051:  ..1.11.111  -> L07055           dl06:	go to dl05
0000010111 // 2193   L07052:  .....1.111  -> L07005           coss:	go to wt22
0000010111 // 2194   L07053:  .....1.111  -> L07005           sinn:	go to wt22
0000010111 // 2195   L07054:  .....1.111  -> L07005           tpol:	go to wt22
0010111111 // 2196   L07055:  ..1.111111  -> L07057           dl05:	go to dl04
0000010111 // 2197   L07056:  .....1.111  -> L07005           sqar:	go to wt22
0011011111 // 2198   L07057:  ..11.11111  -> L07067           dl04:	go to dl03
0110011000 // 2199   L07060:  .11..11...                      reg6:	load constant 6
1001001111 // 2200   L07061:  1..1..1111  -> L07223           	go to rega
0000111111 // 2201   L07062:  ....111111  -> L07017           dig9:	go to reg9
0001011111 // 2202   L07063:  ...1.11111  -> L07027           dig8:	go to reg8
0111011000 // 2203   L07064:  .111.11...                      dig7:	load constant 7
0111110111 // 2204   L07065:  .11111.111  -> L07175           	go to reg1
0000010111 // 2205   L07066:  .....1.111  -> L07005           subt:	go to wt22
1111110111 // 2206   L07067:  111111.111  -> L07375           dl03:	go to rtrn
1011101110 // 2207   L07070:  1.111.111.                      clrx:	0 -> a[w]
0000110101 // 2208   L07071:  ....11.1.1  -> L07015           	jsb wt21
0111010011 // 2209   L07072:  .111.1..11  -> L07164           eexx:	go to eex1
1000111011 // 2210   L07073:  1...111.11  -> L07216           chs1:	go to chs2
0111001011 // 2211   L07074:  .111..1.11  -> L07162           clok:	go to chs4
0110010000 // 2212   L07075:  .11..1....  -> L03076  *****    ent1:	select rom 3
           // 2213                                            
1001010100 // 2214   L07076:  1..1.1.1..                      ent1z3:	if s9 # 1
0011110111 // 2215   L07077:  ..1111.111  -> L07075           	     then go to ent1
0000110100 // 2216   L07100:  ....11.1..                      init:	clear status
0001111110 // 2217   L07101:  ...111111.                      	if c[s] >= 1
1111111011 // 2218   L07102:  1111111.11  -> L07376           	     then go to err2
0101101010 // 2219   L07103:  .1.11.1.1.                      	c - 1 -> c[x]
0101101010 // 2220   L07104:  .1.11.1.1.                      	c - 1 -> c[x]
0110111010 // 2221   L07105:  .11.111.1.                      	if c[xs] = 0
1111111011 // 2222   L07106:  1111111.11  -> L07376           	     then go to err2
0100100111 // 2223   L07107:  .1..1..111  -> L07111           	go to int2
1001000110 // 2224   L07110:  1..1...11.                      int1:	shift right c[m]
0111101010 // 2225   L07111:  .1111.1.1.                      int2:	c + 1 -> c[x]
0100100011 // 2226   L07112:  .1..1...11  -> L07110           	if no carry go to int1
1110101110 // 2227   L07113:  111.1.111.                      int3:	a exchange c[w]
1010101000 // 2228   L07114:  1.1.1.1...                      	m -> c
0001011000 // 2229   L07115:  ...1.11...                      	load constant 1
0011011000 // 2230   L07116:  ..11.11...                      	load constant 3
0001000110 // 2231   L07117:  ...1...11.                      	if a >= c[m]
1111111011 // 2232   L07120:  1111111.11  -> L07376           	     then go to err2
0110011000 // 2233   L07121:  .11..11...                      	load constant 6
1010001100 // 2234   L07122:  1.1...11..                      	10 -> p
0001000010 // 2235   L07123:  ...1....1.                      	if a >= c[p]
1111111011 // 2236   L07124:  1111111.11  -> L07376           	     then go to err2
1000001100 // 2237   L07125:  1.....11..                      	8 -> p
1011010010 // 2238   L07126:  1.11.1..1.                      	shift right a[wp]
0111001100 // 2239   L07127:  .111..11..                      	7 -> p
0110011000 // 2240   L07130:  .11..11...                      	load constant 6
0111001100 // 2241   L07131:  .111..11..                      	7 -> p
0001000010 // 2242   L07132:  ...1....1.                      	if a >= c[p]
1111111011 // 2243   L07133:  1111111.11  -> L07376           	     then go to err2
0010101000 // 2244   L07134:  ..1.1.1...                      	c exchange m
0101001100 // 2245   L07135:  .1.1..11..                      	5 -> p
1011010010 // 2246   L07136:  1.11.1..1.                      	shift right a[wp]
1011010010 // 2247   L07137:  1.11.1..1.                      	shift right a[wp]
1011010010 // 2248   L07140:  1.11.1..1.                      	shift right a[wp]
1011010010 // 2249   L07141:  1.11.1..1.                      	shift right a[wp]
1100101110 // 2250   L07142:  11..1.111.                      	a exchange b[w]
1101110010 // 2251   L07143:  11.111..1.                      	a - 1 -> a[wp]
1011101010 // 2252   L07144:  1.111.1.1.                      	0 -> a[x]
1000001100 // 2253   L07145:  1.....11..                      	8 -> p
1101100010 // 2254   L07146:  11.11...1.                      	a - 1 -> a[p]
1011001100 // 2255   L07147:  1.11..11..                      	11 -> p
1111100010 // 2256   L07150:  11111...1.                      	a + 1 -> a[p]
1111100010 // 2257   L07151:  11111...1.                      	a + 1 -> a[p]
1101111110 // 2258   L07152:  11.111111.                      	a - 1 -> a[s]
1100101110 // 2259   L07153:  11..1.111.                      	a exchange b[w]
0000100100 // 2260   L07154:  ....1..1..                      key2:	0 -> s0
0010100101 // 2261   L07155:  ..1.1..1.1  -> L07051           	jsb dl06
0010100101 // 2262   L07156:  ..1.1..1.1  -> L07051           	jsb dl06
0000010100 // 2263   L07157:  .....1.1..                      	if s0 # 1
1000110011 // 2264   L07160:  1...11..11  -> L07214           	     then go to key3
1010011011 // 2265   L07161:  1.1..11.11  -> L07246           	go to wt12
           // 2266                                            
1010000100 // 2267   L07162:  1.1....1..                      chs4:	1 -> s10
1010010011 // 2268   L07163:  1.1..1..11  -> L07244           	go to wt20
           // 2269                                            
0000001010 // 2270   L07164:  ......1.1.                      eex1:	if b[x] = 0
1000100011 // 2271   L07165:  1...1...11  -> L07210           	     then go to eex2
0000101010 // 2272   L07166:  ....1.1.1.                      	0 -> b[x]
0000011111 // 2273   L07167:  .....11111  -> L07007           	go to wt18
           // 2274                                            
0000000000 // 2275   L07170:  ..........                      	no operation
0000000000 // 2276   L07171:  ..........                      	no operation
           // 2277                                            
0011011000 // 2278   L07172:  ..11.11...                      reg3:	load constant 3
1001001111 // 2279   L07173:  1..1..1111  -> L07223           	go to rega
           // 2280                                            
0010011000 // 2281   L07174:  ..1..11...                      reg2:	load constant 2
1001001111 // 2282   L07175:  1..1..1111  -> L07223           reg1:	go to rega
           // 2283                                            
0110010000 // 2284   L07176:  .11..1....  -> L03177  *****    fst1:	select rom 3
           // 2285                                            
0000010100 // 2286   L07177:  .....1.1..                      key1:	if s0 # 1
0000000111 // 2287   L07200:  .......111  -> L07001           	     then go to wt30
1000010100 // 2288   L07201:  1....1.1..                      	if s8 # 1
0110110011 // 2289   L07202:  .11.11..11  -> L07154           	     then go to key2
1000101000 // 2290   L07203:  1...1.1...                      	display off
1000100100 // 2291   L07204:  1...1..1..                      	0 -> s8
1100001100 // 2292   L07205:  11....11..                      	12 -> p
0011001110 // 2293   L07206:  ..11..111.                      	0 -> c[w]
0011010000 // 2294   L07207:  ..11.1....                      	keys -> rom address
           // 2295                                            
1100101010 // 2296   L07210:  11..1.1.1.                      eex2:	a exchange b[x]
1101101010 // 2297   L07211:  11.11.1.1.                      	a - 1 -> a[x]
1100101010 // 2298   L07212:  11..1.1.1.                      	a exchange b[x]
1010010111 // 2299   L07213:  1.1..1.111  -> L07245           	go to wt16
           // 2300                                            
1000000100 // 2301   L07214:  1......1..                      key3:	1 -> s8
0010000111 // 2302   L07215:  ..1....111  -> L07041           	go to wt11
           // 2303                                            
1010010100 // 2304   L07216:  1.1..1.1..                      chs2:	if s10 # 1
0111001011 // 2305   L07217:  .111..1.11  -> L07162           	     then go to chs4
1010100100 // 2306   L07220:  1.1.1..1..                      chs3:	0 -> s10
1001110000 // 2307   L07221:  1..111....                      	c -> data address
1001011011 // 2308   L07222:  1..1.11.11  -> L07226           	go to chs5
           // 2309                                            
1001110000 // 2310   L07223:  1..111....                      rega:	c -> data address
1010010100 // 2311   L07224:  1.1..1.1..                      	if s10 # 1
1001101111 // 2312   L07225:  1..11.1111  -> L07233           	     then go to regb
1110101110 // 2313   L07226:  111.1.111.                      chs5:	a exchange c[w]
0110001110 // 2314   L07227:  .11...111.                      	c -> a[w]
1001000110 // 2315   L07230:  1..1...11.                      	shift right c[m]
1011110000 // 2316   L07231:  1.1111....                      	c -> data
1010011011 // 2317   L07232:  1.1..11.11  -> L07246           	go to wt12
           // 2318                                            
1011111000 // 2319   L07233:  1.11111...                      regb:	data -> c
1100001100 // 2320   L07234:  11....11..                      	12 -> p
0110100010 // 2321   L07235:  .11.1...1.                      	if c[p] = 0
1010000011 // 2322   L07236:  1.1.....11  -> L07240           	     then go to regc
0011001110 // 2323   L07237:  ..11..111.                      	0 -> c[w]
1110101110 // 2324   L07240:  111.1.111.                      regc:	a exchange c[w]
0100010110 // 2325   L07241:  .1...1.11.                      	shift left a[ms]
0010110101 // 2326   L07242:  ..1.11.1.1  -> L07055           wt29:	jsb dl05
0010111101 // 2327   L07243:  ..1.1111.1  -> L07057           wt24:	jsb dl04
0010111101 // 2328   L07244:  ..1.1111.1  -> L07057           wt20:	jsb dl04
0010111101 // 2329   L07245:  ..1.1111.1  -> L07057           wt16:	jsb dl04
0010111101 // 2330   L07246:  ..1.1111.1  -> L07057           wt12:	jsb dl04
0011011101 // 2331   L07247:  ..11.111.1  -> L07067           wt08:	jsb dl03
1010101000 // 2332   L07250:  1.1.1.1...                      wt05:	m -> c
1000101000 // 2333   L07251:  1...1.1...                      	display off
0000101000 // 2334   L07252:  ....1.1...                      	display toggle
1010010100 // 2335   L07253:  1.1..1.1..                      	if s10 # 1
0111111111 // 2336   L07254:  .111111111  -> L07177           	     then go to key1
           // 2337                                            
0001001100 // 2338   L07255:  ...1..11..                      tim0:	1 -> p			; increment hundredths of seconds
1111110010 // 2339   L07256:  111111..1.                      	a + 1 -> a[wp]
0111111111 // 2340   L07257:  .111111111  -> L07177           	if no carry go to key1
           // 2341                                            
0110001100 // 2342   L07260:  .11...11..                      	6 -> p			; increment seconds
1111100010 // 2343   L07261:  11111...1.                      	a + 1 -> a[p]
1010001011 // 2344   L07262:  1.1...1.11  -> L07242           	if no carry go to wt29
0111001100 // 2345   L07263:  .111..11..                      	7 -> p
1111100010 // 2346   L07264:  11111...1.                      	a + 1 -> a[p]
0001000010 // 2347   L07265:  ...1....1.                      	if a >= c[p]
1011100011 // 2348   L07266:  1.111...11  -> L07270           	     then go to tim1
1010001111 // 2349   L07267:  1.1...1111  -> L07243           	go to wt24
           // 2350                                            
1011110010 // 2351   L07270:  1.1111..1.                      tim1:	0 -> a[wp]
           // 2352                                            
1001001100 // 2353   L07271:  1..1..11..                      	9 -> p			; increment minutes
1111100010 // 2354   L07272:  11111...1.                      	a + 1 -> a[p]
0000110111 // 2355   L07273:  ....11.111  -> L07015           	if no carry go to wt21
1010001100 // 2356   L07274:  1.1...11..                      	10 -> p
1111100010 // 2357   L07275:  11111...1.                      	a + 1 -> a[p]
0001000010 // 2358   L07276:  ...1....1.                      	if a >= c[p]
1100000111 // 2359   L07277:  11.....111  -> L07301           	     then go to tim2
1010010111 // 2360   L07300:  1.1..1.111  -> L07245           	go to wt16
           // 2361                                            
0011010010 // 2362   L07301:  ..11.1..1.                      tim2:	0 -> c[wp]
1011110010 // 2363   L07302:  1.1111..1.                      	0 -> a[wp]
           // 2364                                            
1011001100 // 2365   L07303:  1.11..11..                      	11 -> p			; increment hours
1111100010 // 2366   L07304:  11111...1.                      	a + 1 -> a[p]
1100101011 // 2367   L07305:  11..1.1.11  -> L07312           	if no carry go to tim3
1011101110 // 2368   L07306:  1.111.111.                      	0 -> a[w]
1100001100 // 2369   L07307:  11....11..                      	12 -> p
1111100010 // 2370   L07310:  11111...1.                      	a + 1 -> a[p]
1010011111 // 2371   L07311:  1.1..11111  -> L07247           	if no carry go to wt08
           // 2372                                            
0001000110 // 2373   L07312:  ...1...11.                      tim3:	if a >= c[m]
1100110111 // 2374   L07313:  11..11.111  -> L07315           	     then go to tim4
0000100111 // 2375   L07314:  ....1..111  -> L07011           	go to wt09
           // 2376                                            
1011101110 // 2377   L07315:  1.111.111.                      tim4:	0 -> a[w]
1011001100 // 2378   L07316:  1.11..11..                      	11 -> p
1111100010 // 2379   L07317:  11111...1.                      	a + 1 -> a[p]
0001100111 // 2380   L07320:  ...11..111  -> L07031           	if no carry go to wt06
           // 2381                                            
1010101000 // 2382   L07321:  1.1.1.1...                      retn:	m -> c
0011010010 // 2383   L07322:  ..11.1..1.                      	0 -> c[wp]
0010001100 // 2384   L07323:  ..1...11..                      	2 -> p
0000001010 // 2385   L07324:  ......1.1.                      	if b[x] = 0
1101100011 // 2386   L07325:  11.11...11  -> L07330           	     then go to ret1
0100011000 // 2387   L07326:  .1...11...                      	load constant 4
1101100111 // 2388   L07327:  11.11..111  -> L07331           	go to ret2
           // 2389                                            
0110011000 // 2390   L07330:  .11..11...                      ret1:	load constant 6
0010101000 // 2391   L07331:  ..1.1.1...                      ret2:	c exchange m
0011001110 // 2392   L07332:  ..11..111.                      	0 -> c[w]
1100001100 // 2393   L07333:  11....11..                      	12 -> p
0000101110 // 2394   L07334:  ....1.111.                      	0 -> b[w]
1001110000 // 2395   L07335:  1..111....                      ret3:	c -> data address
1000101110 // 2396   L07336:  1...1.111.                      	b exchange c[w]
1011111000 // 2397   L07337:  1.11111...                      	data -> c
0001100010 // 2398   L07340:  ...11...1.                      	if c[p] >= 1
1110010011 // 2399   L07341:  111..1..11  -> L07344           	     then go to ret4
1110101101 // 2400   L07342:  111.1.11.1  -> L07353           	jsb fixx
1011110000 // 2401   L07343:  1.1111....                      	c -> data
1000101110 // 2402   L07344:  1...1.111.                      ret4:	b exchange c[w]
0111100010 // 2403   L07345:  .1111...1.                      	c + 1 -> c[p]
1101110111 // 2404   L07346:  11.111.111  -> L07335           	if no carry go to ret3
1011000110 // 2405   L07347:  1.11...11.                      	shift right a[m]
1110101110 // 2406   L07350:  111.1.111.                      	a exchange c[w]
1110101101 // 2407   L07351:  111.1.11.1  -> L07353           	jsb fixx
0111111011 // 2408   L07352:  .111111.11  -> L07176           	go to fst1
           // 2409                                            
0110110010 // 2410   L07353:  .11.11..1.                      fixx:	if c[wp] = 0
1111110111 // 2411   L07354:  111111.111  -> L07375           	     then go to rtrn
1110101110 // 2412   L07355:  111.1.111.                      	a exchange c[w]
0100001110 // 2413   L07356:  .1....111.                      	shift left a[w]
1000001100 // 2414   L07357:  1.....11..                      	8 -> p
0100010010 // 2415   L07360:  .1...1..1.                      	shift left a[wp]
0110001100 // 2416   L07361:  .11...11..                      	6 -> p
0100010010 // 2417   L07362:  .1...1..1.                      	shift left a[wp]
0100010010 // 2418   L07363:  .1...1..1.                      	shift left a[wp]
0100010010 // 2419   L07364:  .1...1..1.                      	shift left a[wp]
1100001100 // 2420   L07365:  11....11..                      	12 -> p
1111101010 // 2421   L07366:  11111.1.1.                      	a + 1 -> a[x]
1001100010 // 2422   L07367:  1..11...1.                      fix2:	if a[p] >= 1
1111110011 // 2423   L07370:  111111..11  -> L07374           	     then go to fxrt
1101101010 // 2424   L07371:  11.11.1.1.                      	a - 1 -> a[x]
0100000110 // 2425   L07372:  .1.....11.                      	shift left a[m]
1111011111 // 2426   L07373:  1111.11111  -> L07367           	go to fix2
1110101110 // 2427   L07374:  111.1.111.                      fxrt:	a exchange c[w]
0000110000 // 2428   L07375:  ....11....                      rtrn:	return
           // 2429                                            
0011001110 // 2430   L07376:  ..11..111.                      err2:	0 -> c[w]
0100101101 // 2431   L07377:  .1..1.11.1  -> L07113           	jsb int3
