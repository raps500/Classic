           //    1                ; 35 ROM code disassembled from dump by Peter Monta
           //    2                ; Copyright 2004, 2005 Eric L. Smith <eric@brouhaha.com>
           //    3                ; $Id: 35.asm 850 2005-06-27 23:56:31Z eric $
           //    4                
           //    5                ; Much of the code is similar to the 45 ROM source code, so labels
           //    6                ; have been copied from that.
           //    7                ;
           //    8                ; Some conditional branch instructions ("if no carry go to") may
           //    9                ; effectively be unconditional, but there is no general way to
           //   10                ; automatically detect this.
           //   11                
           //   12                                            	.arch classic
           //   13                                            
           //   14                                            	.rom @00
           //   15                                            
0011011101 //   16   L00000:  ..11.111.1  -> L00067           	jsb l00067		; JSB used as unconditional goto
1011111111 //   17   L00001:  1.11111111  -> L00277           	go to l00277
           //   18                                            	
1000100100 //   19   L00002:  1...1..1..                      l00002:	0 -> s8
0000010111 //   20   L00003:  .....1.111  -> L00005           	go to l00005
           //   21                                            	
0101000100 //   22   L00004:  .1.1...1..                      l00004:	1 -> s5
1001000100 //   23   L00005:  1..1...1..                      l00005:	1 -> s9
0010000100 //   24   L00006:  ..1....1..                      	1 -> s2
0100010000 //   25   L00007:  .1...1....  -> L02010  *****    	select rom 2		; -> l02010
           //   26                                            	
1011010001 //   27   L00010:  1.11.1...1  -> L00264           l00010:	jsb l00264
1111111011 //   28   L00011:  1111111.11  -> L00376           	go to l00376
           //   29                                            	
0001011111 //   30   L00012:  ...1.11111  -> L00027           l00012:	go to l00027
           //   31                                            	
0011000011 //   32   L00013:  ..11....11  -> L00060           l00013:	go to l00060
           //   33                                            
0110101000 //   34   L00014:  .11.1.1...                      	stack -> a
1101100111 //   35   L00015:  11.11..111  -> L00331           	go to l00331
1011101110 //   36   L00016:  1.111.111.                      	0 -> a[w]
1111100010 //   37   L00017:  11111...1.                      	a + 1 -> a[p]
0000101110 //   38   L00020:  ....1.111.                      l00020:	0 -> b[w]
0010010000 //   39   L00021:  ..1..1....  -> L01022  *****    	select rom 1		; -> asn12
           //   40                                            	
1111101010 //   41   L00022:  11111.1.1.                      dig6:	a + 1 -> a[x]
1111101010 //   42   L00023:  11111.1.1.                      dig5:	a + 1 -> a[x]
1111101010 //   43   L00024:  11111.1.1.                      dig4:	a + 1 -> a[x]
0001101011 //   44   L00025:  ...11.1.11  -> L00032           	if no carry go to dig3
           //   45                                            	
1001101001 //   46   L00026:  1..11.1..1  -> L00232           	jsb l00232
0010101000 //   47   L00027:  ..1.1.1...                      l00027:	c exchange m
1010101000 //   48   L00030:  1.1.1.1...                      	m -> c
0011111111 //   49   L00031:  ..11111111  -> L00077           	go to l00077
           //   50                                            
1111101010 //   51   L00032:  11111.1.1.                      dig3:	a + 1 -> a[x]
1111101010 //   52   L00033:  11111.1.1.                      dig2:	a + 1 -> a[x]
1111101010 //   53   L00034:  11111.1.1.                      dig1:	a + 1 -> a[x]
0000110000 //   54   L00035:  ....11....                      	return
           //   55                                            
0011001100 //   56   L00036:  ..11..11..                      l00036:	3 -> p
0010101010 //   57   L00037:  ..1.1.1.1.                      	0 - c -> c[x]
0110101000 //   58   L00040:  .11.1.1...                      l00040:	stack -> a
0001000011 //   59   L00041:  ...1....11  -> L00020           	go to l00020
           //   60                                            	
0111010011 //   61   L00042:  .111.1..11  -> L00164           l00042:	go to l00164
           //   62                                            	
0011001100 //   63   L00043:  ..11..11..                      l00043:	3 -> p
0000110000 //   64   L00044:  ....11....                      	return
           //   65                                            	
0000000000 //   66   L00045:  ..........                      	no operation
           //   67                                            	
0010000011 //   68   L00046:  ..1.....11  -> L00040           L00046:	go to l00040
           //   69                                            
0101000100 //   70   L00047:  .1.1...1..                      l00047:	1 -> s5
0001000100 //   71   L00050:  ...1...1..                      	1 -> s1
0010111011 //   72   L00051:  ..1.111.11  -> L00056           	go to l00056
           //   73                                            	
1001000100 //   74   L00052:  1..1...1..                      l00052:	1 -> s9
0010011111 //   75   L00053:  ..1..11111  -> L00047           	go to l00047
           //   76                                            	
1010000100 //   77   L00054:  1.1....1..                      l00054:	1 -> s10
1100001011 //   78   L00055:  11....1.11  -> L00302           	go to l00302
           //   79                                            	
0000101110 //   80   L00056:  ....1.111.                      l00056:	0 -> b[w]
0010010000 //   81   L00057:  ..1..1....  -> L01060  *****    	select rom 1		; -> l01060
           //   82                                            	
1100101000 //   83   L00060:  11..1.1...                      l00060:	down rotate
1101101111 //   84   L00061:  11.11.1111  -> L00333           	go to l00333
           //   85                                            
1111101010 //   86   L00062:  11111.1.1.                      dig9:	a + 1 -> a[x]
1111101010 //   87   L00063:  11111.1.1.                      dig8:	a + 1 -> a[x]
1111101010 //   88   L00064:  11111.1.1.                      dig7:	a + 1 -> a[x]
0001001011 //   89   L00065:  ...1..1.11  -> L00022           	if no carry go to dig6	; unconditional?
1001100111 //   90   L00066:  1..11..111  -> L00231           	go to sub0
           //   91                                            	
1110101000 //   92   L00067:  111.1.1...                      l00067:	clear registers
0101110001 //   93   L00070:  .1.111...1  -> L00134           	jsb of12
1101110111 //   94   L00071:  11.111.111  -> L00335           l00071:	go to fst2zx
           //   95                                            
1111001011 //   96   L00072:  1111..1.11  -> L00362           l00072:	go to eex2
           //   97                                            	
1011001110 //   98   L00073:  1.11..111.                      l00073:	shift right a[w]
0011000100 //   99   L00074:  ..11...1..                      	1 -> s3
0111011011 //  100   L00075:  .111.11.11  -> L00166           	go to l00166
           //  101                                            	
0100101000 //  102   L00076:  .1..1.1...                      l00076:	c -> stack
0000110100 //  103   L00077:  ....11.1..                      l00077:	clear status
1011001110 //  104   L00100:  1.11..111.                      	shift right a[w]
1101110101 //  105   L00101:  11.111.1.1  -> L00335           	jsb fst2zx
0100101110 //  106   L00102:  .1..1.111.                      l00102:	a -> b[w]
1011111010 //  107   L00103:  1.11111.1.                      	0 -> a[xs]
0100010110 //  108   L00104:  .1...1.11.                      	shift left a[ms]
1101101010 //  109   L00105:  11.11.1.1.                      l00105:	a - 1 -> a[x]
1110000011 //  110   L00106:  111.....11  -> L00340           	if no carry go to l00340
0110111010 //  111   L00107:  .11.111.1.                      	if c[xs] = 0
1110011011 //  112   L00110:  111..11.11  -> L00346           	     then go to l00346
1100110110 //  113   L00111:  11..11.11.                      	a exchange b[ms]
1101001100 //  114   L00112:  11.1..11..                      	13 -> p
1110011011 //  115   L00113:  111..11.11  -> L00346           	go to l00346
           //  116                                            	
0000011100 //  117   L00114:  .....111..                      eex7:	p - 1 -> p
0111101010 //  118   L00115:  .1111.1.1.                      	c + 1 -> c[x]
0000000010 //  119   L00116:  ........1.                      eex8:	if b[p] = 0
0100110011 //  120   L00117:  .1..11..11  -> L00114           	     then go to eex7
1011000100 //  121   L00120:  1.11...1..                      	1 -> s11
1011010110 //  122   L00121:  1.11.1.11.                      	shift right a[ms]
1110100110 //  123   L00122:  111.1..11.                      	a exchange c[m]
0100010100 //  124   L00123:  .1...1.1..                      	if s4 = 0
1000011111 //  125   L00124:  1....11111  -> L00207           	     then go to den1
0101111101 //  126   L00125:  .1.11111.1  -> L00137           	jsb of14
1101110111 //  127   L00126:  11.111.111  -> L00335           	go to fst2zx
           //  128                                            	
0011010010 //  129   L00127:  ..11.1..1.                      of11:	0 -> c[wp]
0101110010 //  130   L00130:  .1.111..1.                      	c - 1 -> c[wp]
0011011010 //  131   L00131:  ..11.11.1.                      	0 -> c[xs]
1110001010 //  132   L00132:  111...1.1.                      	a + b -> a[x]
0101110111 //  133   L00133:  .1.111.111  -> L00135           	if no carry go to of13
           //  134                                            
0011001110 //  135   L00134:  ..11..111.                      of12:	0 -> c[w]
0000110100 //  136   L00135:  ....11.1..                      of13:	clear status
0110001110 //  137   L00136:  .11...111.                      	c -> a[w]
1100001100 //  138   L00137:  11....11..                      of14:	12 -> p
0100101010 //  139   L00140:  .1..1.1.1.                      	a -> b[x]
0110001010 //  140   L00141:  .11...1.1.                      	c -> a[x]
0110111010 //  141   L00142:  .11.111.1.                      	if c[xs] = 0
0110100011 //  142   L00143:  .11.1...11  -> L00150           	     then go to of15
0010101010 //  143   L00144:  ..1.1.1.1.                      	0 - c -> c[x]
0101111010 //  144   L00145:  .1.1111.1.                      	c - 1 -> c[xs]
0101011111 //  145   L00146:  .1.1.11111  -> L00127           	if no carry go to of11
0101001100 //  146   L00147:  .1.1..11..                      	5 -> p
1110101010 //  147   L00150:  111.1.1.1.                      of15:	a exchange c[x]
0100010100 //  148   L00151:  .1...1.1..                      	if s4 = 0
0100001011 //  149   L00152:  .1....1.11  -> L00102           	     then go to l00102
1100101010 //  150   L00153:  11..1.1.1.                      	a exchange b[x]
0000101010 //  151   L00154:  ....1.1.1.                      	0 -> b[x]
1111011101 //  152   L00155:  1111.111.1  -> L00367           	jsb dsp1
0100001010 //  153   L00156:  .1....1.1.                      	shift left a[x]
1011001110 //  154   L00157:  1.11..111.                      eex3:	shift right a[w]
1100101100 //  155   L00160:  11..1.11..                      	if p # 12
1000100111 //  156   L00161:  1...1..111  -> L00211           	     then go to den7
1110110010 //  157   L00162:  111.11..1.                      	a exchange c[wp]
0111101011 //  158   L00163:  .1111.1.11  -> L00172           	go to eex4
           //  159                                            	
1011010001 //  160   L00164:  1.11.1...1  -> L00264           l00164:	jsb l00264
0010010000 //  161   L00165:  ..1..1....  -> L01166  *****    	select rom 1		; -> l01166
           //  162                                            	
0100010100 //  163   L00166:  .1...1.1..                      l00166:	if s4 = 0
1111011011 //  164   L00167:  1111.11.11  -> L00366           	     then go to chs3
1110110010 //  165   L00170:  111.11..1.                      	a exchange c[wp]
0011111010 //  166   L00171:  ..11111.1.                      	0 - c - 1 -> c[xs]
0110001110 //  167   L00172:  .11...111.                      eex4:	c -> a[w]
0110111010 //  168   L00173:  .11.111.1.                      	if c[xs] = 0
0111111111 //  169   L00174:  .111111111  -> L00177           	     then go to eex5
0011011010 //  170   L00175:  ..11.11.1.                      	0 -> c[xs]
0010101010 //  171   L00176:  ..1.1.1.1.                      	0 - c -> c[x]
1101001100 //  172   L00177:  11.1..11..                      eex5:	13 -> p
0100010110 //  173   L00200:  .1...1.11.                      eex6:	shift left a[ms]
0101101010 //  174   L00201:  .1.11.1.1.                      	c - 1 -> c[x]
1001111110 //  175   L00202:  1..111111.                      	if a[s] >= 1
0100111011 //  176   L00203:  .1..111.11  -> L00116           	     then go to eex8
1001110110 //  177   L00204:  1..111.11.                      	if a[ms] >= 1
1000000011 //  178   L00205:  1.......11  -> L00200           	     then go to eex6
0011001010 //  179   L00206:  ..11..1.1.                      	0 -> c[x]
1111011101 //  180   L00207:  1111.111.1  -> L00367           den1:	jsb dsp1
1011010110 //  181   L00210:  1.11.1.11.                      	shift right a[ms]
0110011110 //  182   L00211:  .11..1111.                      den7:	c -> a[s]
1100101100 //  183   L00212:  11..1.11..                      den2:	if p # 12
1001001111 //  184   L00213:  1..1..1111  -> L00223           	     then go to den4
0010001110 //  185   L00214:  ..1...111.                      	b -> c[w]
0111101110 //  186   L00215:  .1111.111.                      	c + 1 -> c[w]
0001001100 //  187   L00216:  ...1..11..                      	1 -> p
0100010010 //  188   L00217:  .1...1..1.                      den3:	shift left a[wp]
0000111100 //  189   L00220:  ....1111..                      	p + 1 -> p
0110100010 //  190   L00221:  .11.1...1.                      	if c[p] = 0
1000111111 //  191   L00222:  1...111111  -> L00217           	     then go to den3
1110101110 //  192   L00223:  111.1.111.                      den4:	a exchange c[w]
0011101100 //  193   L00224:  ..111.11..                      	if p # 3
1111100111 //  194   L00225:  11111..111  -> L00371           	     then go to den5
0011001010 //  195   L00226:  ..11..1.1.                      	0 -> c[x]
0110000100 //  196   L00227:  .11....1..                      	1 -> s6
0111101011 //  197   L00230:  .1111.1.11  -> L00172           	go to eex4
           //  198                                            
0011111110 //  199   L00231:  ..1111111.                      sub0:	0 - c - 1 -> c[s]
0110101000 //  200   L00232:  .11.1.1...                      l00232:	stack -> a
0000101110 //  201   L00233:  ....1.111.                      	0 -> b[w]
1111111010 //  202   L00234:  1111111.1.                      	a + 1 -> a[xs]
1111111010 //  203   L00235:  1111111.1.                      	a + 1 -> a[xs]
0111111010 //  204   L00236:  .111111.1.                      	c + 1 -> c[xs]
0111111010 //  205   L00237:  .111111.1.                      	c + 1 -> c[xs]
0001001010 //  206   L00240:  ...1..1.1.                      	if a >= c[x]
1010001111 //  207   L00241:  1.1...1111  -> L00243           	     then go to add4
1110101110 //  208   L00242:  111.1.111.                      	a exchange c[w]
1110100110 //  209   L00243:  111.1..11.                      add4:	a exchange c[m]
0110100110 //  210   L00244:  .11.1..11.                      	if c[m] = 0
1010011111 //  211   L00245:  1.1..11111  -> L00247           	     then go to add5
1110101110 //  212   L00246:  111.1.111.                      	a exchange c[w]
1000100110 //  213   L00247:  1...1..11.                      add5:	b exchange c[m]
0001001010 //  214   L00250:  ...1..1.1.                      add6:	if a >= c[x]
1011111011 //  215   L00251:  1.11111.11  -> L00276           	     then go to l00276
1010001110 //  216   L00252:  1.1...111.                      	shift right b[w]
1111101010 //  217   L00253:  11111.1.1.                      	a + 1 -> a[x]
0000001110 //  218   L00254:  ......111.                      	if b[w] = 0
1011111011 //  219   L00255:  1.11111.11  -> L00276           	     then go to l00276
1010100011 //  220   L00256:  1.1.1...11  -> L00250           	go to add6
           //  221                                            
1011110110 //  222   L00257:  1.1111.11.                      fst3:	0 -> a[ms]
0011010100 //  223   L00260:  ..11.1.1..                      	if s3 = 0
1011010011 //  224   L00261:  1.11.1..11  -> L00264           	     then go to l00264
1101111110 //  225   L00262:  11.111111.                      	a - 1 -> a[s]
0011111110 //  226   L00263:  ..1111111.                      	0 - c - 1 -> c[s]
0111010100 //  227   L00264:  .111.1.1..                      l00264:	if s7 = 0
1011011111 //  228   L00265:  1.11.11111  -> L00267           	     then go to fst5
0100101000 //  229   L00266:  .1..1.1...                      	c -> stack
0111000100 //  230   L00267:  .111...1..                      fst5:	1 -> s7
0011001110 //  231   L00270:  ..11..111.                      	0 -> c[w]
0101101110 //  232   L00271:  .1.11.111.                      	c - 1 -> c[w]
0010111110 //  233   L00272:  ..1.11111.                      	0 - c -> c[s]
0111111110 //  234   L00273:  .11111111.                      	c + 1 -> c[s]
1000101110 //  235   L00274:  1...1.111.                      	b exchange c[w]
0000110000 //  236   L00275:  ....11....                      	return
           //  237                                            
0010010000 //  238   L00276:  ..1..1....  -> L01277  *****    l00276:	select rom 1		; go to add12
           //  239                                            
0101110001 //  240   L00277:  .1.111...1  -> L00134           l00277:	jsb of12
0101000100 //  241   L00300:  .1.1...1..                      	1 -> s5
1101110111 //  242   L00301:  11.111.111  -> L00335           	go to fst2zx
           //  243                                            
1011001110 //  244   L00302:  1.11..111.                      l00302:	shift right a[w]
0110011110 //  245   L00303:  .11..1111.                      dsp7:	c -> a[s]
1000100100 //  246   L00304:  1...1..1..                      l00304:	0 -> s8
1100111111 //  247   L00305:  11..111111  -> L00317           	go to dsp8
           //  248                                            
0111111010 //  249   L00306:  .111111.1.                      dsp2:	c + 1 -> c[xs]
1000000100 //  250   L00307:  1......1..                      dsp3:	1 -> s8
0101010100 //  251   L00310:  .1.1.1.1..                      	if s5 = 0
1100110111 //  252   L00311:  11..11.111  -> L00315           	     then go to dsp5
0111101010 //  253   L00312:  .1111.1.1.                      	c + 1 -> c[x]
1100011011 //  254   L00313:  11...11.11  -> L00306           	if no carry go to dsp2
0000101000 //  255   L00314:  ....1.1...                      dsp4:	display toggle
0000010100 //  256   L00315:  .....1.1..                      dsp5:	if s0 = 0
1100011111 //  257   L00316:  11...11111  -> L00307           	     then go to dsp3
0000100100 //  258   L00317:  ....1..1..                      dsp8:	0 -> s0
0000011100 //  259   L00320:  .....111..                      dsp6:	p - 1 -> p
1100101100 //  260   L00321:  11..1.11..                      	if p # 12
1101000011 //  261   L00322:  11.1....11  -> L00320           	     then go to dsp6
1000101000 //  262   L00323:  1...1.1...                      	display off
1000010100 //  263   L00324:  1....1.1..                      	if s8 = 0
1100110011 //  264   L00325:  11..11..11  -> L00314           	     then go to dsp4
0100001110 //  265   L00326:  .1....111.                      	shift left a[w]
0101100100 //  266   L00327:  .1.11..1..                      	0 -> s5
0011010000 //  267   L00330:  ..11.1....                      	keys -> rom address
           //  268                                            
0100101000 //  269   L00331:  .1..1.1...                      l00331:	c -> stack
1110101110 //  270   L00332:  111.1.111.                      	a exchange c[w]
0101110101 //  271   L00333:  .1.111.1.1  -> L00135           l00333:	jsb of13
0111000100 //  272   L00334:  .111...1..                      	1 -> s7
1111011101 //  273   L00335:  1111.111.1  -> L00367           fst2zx:	jsb dsp1
1010111101 //  274   L00336:  1.1.1111.1  -> L00257           	jsb fst3
1000101011 //  275   L00337:  1...1.1.11  -> L00212           	go to den2
           //  276                                            
1011010110 //  277   L00340:  1.11.1.11.                      l00340:	shift right a[ms]
0000011100 //  278   L00341:  .....111..                      	p - 1 -> p
0010101100 //  279   L00342:  ..1.1.11..                      	if p # 2
0100010111 //  280   L00343:  .1...1.111  -> L00105           	     then go to l00105
1100001100 //  281   L00344:  11....11..                      	12 -> p
1011101110 //  282   L00345:  1.111.111.                      	0 -> a[w]
1011110110 //  283   L00346:  1.1111.11.                      l00346:	0 -> a[ms]
1111100010 //  284   L00347:  11111...1.                      	a + 1 -> a[p]
1111100010 //  285   L00350:  11111...1.                      	a + 1 -> a[p]
0010001100 //  286   L00351:  ..1...11..                      	2 -> p
0000111100 //  287   L00352:  ....1111..                      l00352:	p + 1 -> p
1101100010 //  288   L00353:  11.11...1.                      	a - 1 -> a[p]
1110111111 //  289   L00354:  111.111111  -> L00357           	if no carry go to l00357
0000000010 //  290   L00355:  ........1.                      	if b[p] = 0
1110101011 //  291   L00356:  111.1.1.11  -> L00352           	     then go to l00352
1111100010 //  292   L00357:  11111...1.                      l00357:	a + 1 -> a[p]
1100101110 //  293   L00360:  11..1.111.                      	a exchange b[w]
0000110000 //  294   L00361:  ....11....                      	return
           //  295                                            
0100000100 //  296   L00362:  .1.....1..                      eex2:	1 -> s4
1011010100 //  297   L00363:  1.11.1.1..                      	if s11 = 0
0001110011 //  298   L00364:  ...111..11  -> L00034           	     then go to dig1
0110111111 //  299   L00365:  .11.111111  -> L00157           	go to eex3
           //  300                                            
0011111110 //  301   L00366:  ..1111111.                      chs3:	0 - c - 1 -> c[s]
1010100100 //  302   L00367:  1.1.1..1..                      dsp1:	0 -> s10
1100001111 //  303   L00370:  11....1111  -> L00303           	go to dsp7
           //  304                                            
0110010100 //  305   L00371:  .11..1.1..                      den5:	if s6 = 0
1111110011 //  306   L00372:  111111..11  -> L00374           	     then go to den6
0000011100 //  307   L00373:  .....111..                      	p - 1 -> p
1010010010 //  308   L00374:  1.1..1..1.                      den6:	shift right b[wp]
0111101001 //  309   L00375:  .1111.1..1  -> L00172           	jsb eex4
1010101000 //  310   L00376:  1.1.1.1...                      l00376:	m -> c
1101101111 //  311   L00377:  11.11.1111  -> L00333           	go to l00333
           //  312                                            
// 00243 a dd4 209
// 00247 a dd5 213
// 00250 a dd6 214
// 00366 c hs3 301
// 00207 d en1 180
// 00212 d en2 183
// 00217 d en3 188
// 00223 d en4 192
// 00371 d en5 305
// 00374 d en6 308
// 00211 d en7 182
// 00034 d ig1 53
// 00033 d ig2 52
// 00032 d ig3 51
// 00024 d ig4 43
// 00023 d ig5 42
// 00022 d ig6 41
// 00064 d ig7 88
// 00063 d ig8 87
// 00062 d ig9 86
// 00367 d sp1 302
// 00306 d sp2 249
// 00307 d sp3 250
// 00314 d sp4 255
// 00315 d sp5 256
// 00320 d sp6 259
// 00303 d sp7 245
// 00317 d sp8 258
// 00362 e ex2 296
// 00157 e ex3 154
// 00172 e ex4 167
// 00177 e ex5 172
// 00200 e ex6 173
// 00114 e ex7 117
// 00116 e ex8 119
// 00335 f st2zx 273
// 00257 f st3 222
// 00267 f st5 230
// 00002 l 00002 19
// 00004 l 00004 22
// 00005 l 00005 23
// 00010 l 00010 27
// 00012 l 00012 30
// 00013 l 00013 32
// 00020 l 00020 38
// 00027 l 00027 47
// 00036 l 00036 56
// 00040 l 00040 58
// 00042 l 00042 61
// 00043 l 00043 63
// 00046 L 00046 68
// 00047 l 00047 70
// 00052 l 00052 74
// 00054 l 00054 77
// 00056 l 00056 80
// 00060 l 00060 83
// 00067 l 00067 92
// 00071 l 00071 94
// 00072 l 00072 96
// 00073 l 00073 98
// 00076 l 00076 102
// 00077 l 00077 103
// 00102 l 00102 106
// 00105 l 00105 109
// 00164 l 00164 160
// 00166 l 00166 163
// 00232 l 00232 200
// 00264 l 00264 227
// 00276 l 00276 238
// 00277 l 00277 240
// 00302 l 00302 244
// 00304 l 00304 246
// 00331 l 00331 269
// 00333 l 00333 271
// 00340 l 00340 277
// 00346 l 00346 283
// 00352 l 00352 287
// 00357 l 00357 292
// 00376 l 00376 310
// 00127 o f11 129
// 00134 o f12 135
// 00135 o f13 136
// 00137 o f14 138
// 00150 o f15 147
// 00231 s ub0 199
           //  314                                            
           //  315                                            	.rom @01
           //  316                                            
1111001111 //  317   L01000:  1111..1111  -> L01763           	go to tan13
           //  318                                            
1100101110 //  319   L01001:  11..1.111.                      tan15:	a exchange b[w]
0010100001 //  320   L01002:  ..1.1....1  -> L01450           	jsb tnm11
0110101000 //  321   L01003:  .11.1.1...                      	stack -> a
0010100001 //  322   L01004:  ..1.1....1  -> L01450           	jsb tnm11
0110101000 //  323   L01005:  .11.1.1...                      	stack -> a
1001010100 //  324   L01006:  1..1.1.1..                      	if s9 = 0
0000100111 //  325   L01007:  ....1..111  -> L01411           	     then go to tan16
1110101110 //  326   L01010:  111.1.111.                      	a exchange c[w]
0101010100 //  327   L01011:  .1.1.1.1..                      tan16:	if s5 = 0
0001001011 //  328   L01012:  ...1..1.11  -> L01422           	     then go to asn12
0011011110 //  329   L01013:  ..11.1111.                      	0 -> c[s]
1010011001 //  330   L01014:  1.1..11..1  -> L01646           	jsb div11
0100101000 //  331   L01015:  .1..1.1...                      l01015:	c -> stack
1010010101 //  332   L01016:  1.1..1.1.1  -> L01645           	jsb mpy11
1001100001 //  333   L01017:  1..11....1  -> L01630           	jsb add10
0010010101 //  334   L01020:  ..1..1.1.1  -> L01445           	jsb sqt11
0110101000 //  335   L01021:  .11.1.1...                      	stack -> a
1010011001 //  336   L01022:  1.1..11..1  -> L01646           asn12:	jsb div11
1010010100 //  337   L01023:  1.1..1.1..                      	if s10 = 0
1101101011 //  338   L01024:  11.11.1.11  -> L01732           	     then go to rtn12
1011101110 //  339   L01025:  1.111.111.                      atn11:	0 -> a[w]
1111100010 //  340   L01026:  11111...1.                      	a + 1 -> a[p]
0100100110 //  341   L01027:  .1..1..11.                      	a -> b[m]
1110100110 //  342   L01030:  111.1..11.                      	a exchange c[m]
0101101010 //  343   L01031:  .1.11.1.1.                      atn12:	c - 1 -> c[x]
1010010010 //  344   L01032:  1.1..1..1.                      	shift right b[wp]
0110111010 //  345   L01033:  .11.111.1.                      	if c[xs] = 0
0001100111 //  346   L01034:  ...11..111  -> L01431           	     then go to atn12
1011010010 //  347   L01035:  1.11.1..1.                      atn13:	shift right a[wp]
0111101010 //  348   L01036:  .1111.1.1.                      	c + 1 -> c[x]
0001110111 //  349   L01037:  ...111.111  -> L01435           	if no carry go to atn13
1011001110 //  350   L01040:  1.11..111.                      	shift right a[w]
1010001110 //  351   L01041:  1.1...111.                      	shift right b[w]
0100101000 //  352   L01042:  .1..1.1...                      	c -> stack
1000101110 //  353   L01043:  1...1.111.                      atn14:	b exchange c[w]
0100000111 //  354   L01044:  .1.....111  -> L01501           	go to atn18
           //  355                                            
1000101110 //  356   L01045:  1...1.111.                      sqt11:	b exchange c[w]
0100001100 //  357   L01046:  .1....11..                      	4 -> p
1101111011 //  358   L01047:  11.1111.11  -> L01736           	go to sqt14
           //  359                                            
0100101000 //  360   L01050:  .1..1.1...                      tnm11:	c -> stack
1110101110 //  361   L01051:  111.1.111.                      	a exchange c[w]
0110100010 //  362   L01052:  .11.1...1.                      	if c[p] = 0
0010110111 //  363   L01053:  ..1.11.111  -> L01455           	     then go to tnm12
0010101110 //  364   L01054:  ..1.1.111.                      	0 - c -> c[w]
0110001110 //  365   L01055:  .11...111.                      tnm12:	c -> a[w]
0010001010 //  366   L01056:  ..1...1.1.                      	b -> c[x]
1100101111 //  367   L01057:  11..1.1111  -> L01713           	go to add15
           //  368                                            
0110001110 //  369   L01060:  .11...111.                      	c -> a[w]
0001010100 //  370   L01061:  ...1.1.1..                      	if s1 = 0
0010010111 //  371   L01062:  ..1..1.111  -> L01445           	     then go to sqt11
1010010100 //  372   L01063:  1.1..1.1..                      	if s10 = 0
0110110111 //  373   L01064:  .11.11.111  -> L01555           	     then go to l01155
0101010100 //  374   L01065:  .1.1.1.1..                      	if s5 = 0
0001010111 //  375   L01066:  ...1.1.111  -> L01425           	     then go to atn11
0011111110 //  376   L01067:  ..1111111.                      	0 - c - 1 -> c[s]
1110111110 //  377   L01070:  111.11111.                      	a exchange c[s]
0000110111 //  378   L01071:  ....11.111  -> L01415           	go to l01015
           //  379                                            
1010010010 //  380   L01072:  1.1..1..1.                      atn15:	shift right b[wp]
1101111110 //  381   L01073:  11.111111.                      atn16:	a - 1 -> a[s]
0011101011 //  382   L01074:  ..111.1.11  -> L01472           	if no carry go to atn15
0111111110 //  383   L01075:  .11111111.                      	c + 1 -> c[s]
1100110010 //  384   L01076:  11..11..1.                      	a exchange b[wp]
0111010010 //  385   L01077:  .111.1..1.                      	a + c -> c[wp]
1100101110 //  386   L01100:  11..1.111.                      	a exchange b[w]
0100101110 //  387   L01101:  .1..1.111.                      atn18:	a -> b[w]
1101010010 //  388   L01102:  11.1.1..1.                      	a - c -> a[wp]
0011101111 //  389   L01103:  ..111.1111  -> L01473           	if no carry go to atn16
0110101000 //  390   L01104:  .11.1.1...                      	stack -> a
1011001110 //  391   L01105:  1.11..111.                      	shift right a[w]
1110110010 //  392   L01106:  111.11..1.                      	a exchange c[wp]
1100101110 //  393   L01107:  11..1.111.                      	a exchange b[w]
0100010010 //  394   L01110:  .1...1..1.                      	shift left a[wp]
0100101000 //  395   L01111:  .1..1.1...                      	c -> stack
1111111110 //  396   L01112:  111111111.                      	a + 1 -> a[s]
1111111110 //  397   L01113:  111111111.                      	a + 1 -> a[s]
0010001111 //  398   L01114:  ..1...1111  -> L01443           	if no carry go to atn14
0011001110 //  399   L01115:  ..11..111.                      	0 -> c[w]
0000101010 //  400   L01116:  ....1.1.1.                      	0 -> b[x]
1011010110 //  401   L01117:  1.11.1.11.                      	shift right a[ms]
1011001001 //  402   L01120:  1.11..1..1  -> L01662           	jsb div14
0101100010 //  403   L01121:  .1.11...1.                      	c - 1 -> c[p]
0110101000 //  404   L01122:  .11.1.1...                      	stack -> a
1110101110 //  405   L01123:  111.1.111.                      	a exchange c[w]
0100001100 //  406   L01124:  .1....11..                      	4 -> p
1010010001 //  407   L01125:  1.1..1...1  -> L01644           	jsb pqo13
0110001100 //  408   L01126:  .11...11..                      	6 -> p
1001101101 //  409   L01127:  1..11.11.1  -> L01633           	jsb pmu11
1000001100 //  410   L01130:  1.....11..                      	8 -> p
1001101101 //  411   L01131:  1..11.11.1  -> L01633           	jsb pmu11
0010001100 //  412   L01132:  ..1...11..                      	2 -> p
1000011000 //  413   L01133:  1....11...                      	load constant 8
1010001100 //  414   L01134:  1.1...11..                      	10 -> p
1001101101 //  415   L01135:  1..11.11.1  -> L01633           	jsb pmu11
1000111001 //  416   L01136:  1...111..1  -> L01616           	jsb atcd1
1001101101 //  417   L01137:  1..11.11.1  -> L01633           	jsb pmu11
1100110001 //  418   L01140:  11..11...1  -> L01714           	jsb atc1
0100001110 //  419   L01141:  .1....111.                      	shift left a[w]
1001101101 //  420   L01142:  1..11.11.1  -> L01633           	jsb pmu11
0010001110 //  421   L01143:  ..1...111.                      	b -> c[w]
1100101101 //  422   L01144:  11..1.11.1  -> L01713           	jsb add15
1100110001 //  423   L01145:  11..11...1  -> L01714           	jsb atc1
1010101110 //  424   L01146:  1.1.1.111.                      	c + c -> c[w]
1010011001 //  425   L01147:  1.1..11..1  -> L01646           	jsb div11
1001010100 //  426   L01150:  1..1.1.1..                      	if s9 = 0
0110110011 //  427   L01151:  .11.11..11  -> L01554           	     then go to l01154
0011111110 //  428   L01152:  ..1111111.                      	0 - c - 1 -> c[s]
1001100001 //  429   L01153:  1..11....1  -> L01630           	jsb add10
0001100100 //  430   L01154:  ...11..1..                      l01154:	0 -> s1
0011001110 //  431   L01155:  ..11..111.                      l01155:	0 -> c[w]
0101100010 //  432   L01156:  .1.11...1.                      	c - 1 -> c[p]
0111101010 //  433   L01157:  .1111.1.1.                      	c + 1 -> c[x]
0001010100 //  434   L01160:  ...1.1.1..                      	if s1 = 0
1010010111 //  435   L01161:  1.1..1.111  -> L01645           	     then go to mpy11
1010011001 //  436   L01162:  1.1..11..1  -> L01646           	jsb div11
1100110001 //  437   L01163:  11..11...1  -> L01714           	jsb atc1
1010101110 //  438   L01164:  1.1.1.111.                      	c + c -> c[w]
1010010101 //  439   L01165:  1.1..1.1.1  -> L01645           	jsb mpy11
1100110001 //  440   L01166:  11..11...1  -> L01714           	jsb atc1
1010101110 //  441   L01167:  1.1.1.111.                      	c + c -> c[w]
1010101110 //  442   L01170:  1.1.1.111.                      	c + c -> c[w]
1001010101 //  443   L01171:  1..1.1.1.1  -> L01625           	jsb rtn11
1010101110 //  444   L01172:  1.1.1.111.                      	c + c -> c[w]
1110101101 //  445   L01173:  111.1.11.1  -> L01753           	jsb pre11
1100110001 //  446   L01174:  11..11...1  -> L01714           	jsb atc1
1010001100 //  447   L01175:  1.1...11..                      	10 -> p
1001110001 //  448   L01176:  1..111...1  -> L01634           	jsb pqo11
1000111001 //  449   L01177:  1...111..1  -> L01616           	jsb atcd1
1000001100 //  450   L01200:  1.....11..                      	8 -> p
1001110101 //  451   L01201:  1..111.1.1  -> L01635           	jsb pqo12
0010001100 //  452   L01202:  ..1...11..                      	2 -> p
1000011000 //  453   L01203:  1....11...                      	load constant 8
0110001100 //  454   L01204:  .11...11..                      	6 -> p
1001110001 //  455   L01205:  1..111...1  -> L01634           	jsb pqo11
0100001100 //  456   L01206:  .1....11..                      	4 -> p
1001110001 //  457   L01207:  1..111...1  -> L01634           	jsb pqo11
1001110001 //  458   L01210:  1..111...1  -> L01634           	jsb pqo11
1100101110 //  459   L01211:  11..1.111.                      	a exchange b[w]
1001001110 //  460   L01212:  1..1..111.                      	shift right c[w]
1101001100 //  461   L01213:  11.1..11..                      	13 -> p
0101011000 //  462   L01214:  .1.1.11...                      	load constant 5
1111101111 //  463   L01215:  11111.1111  -> L01773           	go to tan14
           //  464                                            
0110001100 //  465   L01216:  .11...11..                      atcd1:	6 -> p
1000011000 //  466   L01217:  1....11...                      	load constant 8
0110011000 //  467   L01220:  .11..11...                      	load constant 6
0101011000 //  468   L01221:  .1.1.11...                      	load constant 5
0010011000 //  469   L01222:  ..1..11...                      	load constant 2
0100011000 //  470   L01223:  .1...11...                      	load constant 4
1001011000 //  471   L01224:  1..1.11...                      	load constant 9
0001010100 //  472   L01225:  ...1.1.1..                      rtn11:	if s1 = 0
1101101011 //  473   L01226:  11.11.1.11  -> L01732           	     then go to rtn12
0000110000 //  474   L01227:  ....11....                      	return
           //  475                                            
1011101110 //  476   L01230:  1.111.111.                      add10:	0 -> a[w]
1111100010 //  477   L01231:  11111...1.                      	a + 1 -> a[p]
0000010000 //  478   L01232:  .....1....  -> L00233  *****    	select rom 0		; -> l00233
           //  479                                            
0100010000 //  480   L01233:  .1...1....  -> L02234  *****    pmu11:	select rom 2		; -> pmu21
           //  481                                            
0100001110 //  482   L01234:  .1....111.                      pqo11:	shift left a[w]
1010010110 //  483   L01235:  1.1..1.11.                      pqo12:	shift right b[ms]
1000101110 //  484   L01236:  1...1.111.                      	b exchange c[w]
1010000111 //  485   L01237:  1.1....111  -> L01641           	go to pqo16
           //  486                                            
0111111110 //  487   L01240:  .11111111.                      pqo15:	c + 1 -> c[s]
1100001110 //  488   L01241:  11....111.                      pqo16:	a - b -> a[w]
1010000011 //  489   L01242:  1.1.....11  -> L01640           	if no carry go to pqo15
1110001110 //  490   L01243:  111...111.                      	a + b -> a[w]
0100010000 //  491   L01244:  .1...1....  -> L02245  *****    pqo13:	select rom 2		; -> l02245
           //  492                                            
0100010000 //  493   L01245:  .1...1....  -> L02246  *****    mpy11:	select rom 2		; -> mpy21
           //  494                                            
0101001010 //  495   L01246:  .1.1..1.1.                      div11:	a - c -> c[x]
0100010000 //  496   L01247:  .1...1....  -> L02250  *****    	select rom 2		; -> l02250
           //  497                                            
0111100010 //  498   L01250:  .1111...1.                      sqt15:	c + 1 -> c[p]
1101001110 //  499   L01251:  11.1..111.                      sqt16:	a - c -> a[w]
1010100011 //  500   L01252:  1.1.1...11  -> L01650           	if no carry go to sqt15
1111001110 //  501   L01253:  1111..111.                      	a + c -> a[w]
0100001110 //  502   L01254:  .1....111.                      	shift left a[w]
0000011100 //  503   L01255:  .....111..                      	p - 1 -> p
1001010010 //  504   L01256:  1..1.1..1.                      sqt17:	shift right c[wp]
0000101100 //  505   L01257:  ....1.11..                      	if p # 0
1010100111 //  506   L01260:  1.1.1..111  -> L01651           	     then go to sqt16
0010110111 //  507   L01261:  ..1.11.111  -> L01455           	go to tnm12
           //  508                                            
0111100010 //  509   L01262:  .1111...1.                      div14:	c + 1 -> c[p]
1100010110 //  510   L01263:  11...1.11.                      div15:	a - b -> a[ms]
1011001011 //  511   L01264:  1.11..1.11  -> L01662           	if no carry go to div14
1110010110 //  512   L01265:  111..1.11.                      	a + b -> a[ms]
0100010110 //  513   L01266:  .1...1.11.                      	shift left a[ms]
0000011100 //  514   L01267:  .....111..                      	p - 1 -> p
0000101100 //  515   L01270:  ....1.11..                      	if p # 0
1011001111 //  516   L01271:  1.11..1111  -> L01663           	     then go to div15
0010110111 //  517   L01272:  ..1.11.111  -> L01455           	go to tnm12
           //  518                                            
0000011100 //  519   L01273:  .....111..                      sqt12:	p - 1 -> p
1110010110 //  520   L01274:  111..1.11.                      	a + b -> a[ms]
1101101111 //  521   L01275:  11.11.1111  -> L01733           	if no carry go to sqt18
0000010000 //  522   L01276:  .....1....  -> L00277  *****    	select rom 0		; -> l00277
           //  523                                            
0101111010 //  524   L01277:  .1.1111.1.                      add12:	c - 1 -> c[xs]		; (from rom 00276)
0101111010 //  525   L01300:  .1.1111.1.                      	c - 1 -> c[xs]
1011101010 //  526   L01301:  1.111.1.1.                      	0 -> a[x]
1101011110 //  527   L01302:  11.1.1111.                      	a - c -> a[s]
1001111110 //  528   L01303:  1..111111.                      	if a[s] >= 1
1100011011 //  529   L01304:  11...11.11  -> L01706           	     then go to add13
0100010000 //  530   L01305:  .1...1....  -> L02306  *****    	select rom 2		; -> l02306
           //  531                                            
1000000110 //  532   L01306:  1......11.                      add13:	if a >= b[m]
1100101011 //  533   L01307:  11..1.1.11  -> L01712           	     then go to add14
0011111110 //  534   L01310:  ..1111111.                      	0 - c - 1 -> c[s]
1100101110 //  535   L01311:  11..1.111.                      	a exchange b[w]
1100001110 //  536   L01312:  11....111.                      add14:	a - b -> a[w]
0100010000 //  537   L01313:  .1...1....  -> L02314  *****    add15:	select rom 2		; -> nrm21
           //  538                                            
0011001110 //  539   L01314:  ..11..111.                      atc1:	0 -> c[w]
1011001100 //  540   L01315:  1.11..11..                      	11 -> p
0111011000 //  541   L01316:  .111.11...                      	load constant 7		; load pi/4
1000011000 //  542   L01317:  1....11...                      	load constant 8
0101011000 //  543   L01320:  .1.1.11...                      	load constant 5
0011011000 //  544   L01321:  ..11.11...                      	load constant 3
1001011000 //  545   L01322:  1..1.11...                      	load constant 9
1000011000 //  546   L01323:  1....11...                      	load constant 8
0001011000 //  547   L01324:  ...1.11...                      	load constant 1
0110011000 //  548   L01325:  .11..11...                      	load constant 6
0011011000 //  549   L01326:  ..11.11...                      	load constant 3
0101011000 //  550   L01327:  .1.1.11...                      	load constant 5
1100001100 //  551   L01330:  11....11..                      	12 -> p
0000110000 //  552   L01331:  ....11....                      	return
           //  553                                            
0000010000 //  554   L01332:  .....1....  -> L00333  *****    rtn12:	select rom 0		; -> l00333
           //  555                                            
1110001010 //  556   L01333:  111...1.1.                      sqt18:	a + b -> a[x]
1101111011 //  557   L01334:  11.1111.11  -> L01736           	if no carry go to sqt14
0101100010 //  558   L01335:  .1.11...1.                      	c - 1 -> c[p]
0111111110 //  559   L01336:  .11111111.                      sqt14:	c + 1 -> c[s]
0000101100 //  560   L01337:  ....1.11..                      	if p # 0
1011101111 //  561   L01340:  1.111.1111  -> L01673           	     then go to sqt12
1110101010 //  562   L01341:  111.1.1.1.                      	a exchange c[x]
1011101010 //  563   L01342:  1.111.1.1.                      	0 -> a[x]
0001100010 //  564   L01343:  ...11...1.                      	if c[p] >= 1
1110011011 //  565   L01344:  111..11.11  -> L01746           	     then go to sqt13
1011001110 //  566   L01345:  1.11..111.                      	shift right a[w]
1001001110 //  567   L01346:  1..1..111.                      sqt13:	shift right c[w]
1000101010 //  568   L01347:  1...1.1.1.                      	b exchange c[x]
0011001010 //  569   L01350:  ..11..1.1.                      	0 -> c[x]
1100001100 //  570   L01351:  11....11..                      	12 -> p
1010111011 //  571   L01352:  1.1.111.11  -> L01656           	go to sqt17
           //  572                                            
0100010000 //  573   L01353:  .1...1....  -> L02354  *****    pre11:	select rom 2		; -> pre21
           //  574                                            
1010010010 //  575   L01354:  1.1..1..1.                      tan18:	shift right b[wp]
1010010010 //  576   L01355:  1.1..1..1.                      	shift right b[wp]
0101111110 //  577   L01356:  .1.111111.                      tan19:	c - 1 -> c[s]
1110110011 //  578   L01357:  111.11..11  -> L01754           	if no carry go to tan18
0111010010 //  579   L01360:  .111.1..1.                      	a + c -> c[wp]
1100010010 //  580   L01361:  11...1..1.                      	a - b -> a[wp]
1000110010 //  581   L01362:  1...11..1.                      	b exchange c[wp]
0010001110 //  582   L01363:  ..1...111.                      tan13:	b -> c[w]
1101111110 //  583   L01364:  11.111111.                      	a - 1 -> a[s]
1110111011 //  584   L01365:  111.111.11  -> L01756           	if no carry go to tan19
1110110010 //  585   L01366:  111.11..1.                      	a exchange c[wp]
0110101000 //  586   L01367:  .11.1.1...                      	stack -> a
0000011110 //  587   L01370:  .....1111.                      	if b[s] = 0
0000000111 //  588   L01371:  .......111  -> L01401           	     then go to tan15
0100001110 //  589   L01372:  .1....111.                      	shift left a[w]
1110110010 //  590   L01373:  111.11..1.                      tan14:	a exchange c[wp]
0100101000 //  591   L01374:  .1..1.1...                      	c -> stack
1010010010 //  592   L01375:  1.1..1..1.                      	shift right b[wp]
0101111110 //  593   L01376:  .1.111111.                      	c - 1 -> c[s]
1000111110 //  594   L01377:  1...11111.                      	b exchange c[s]
           //  595                                            
// 00630 a dd10 476
// 00677 a dd12 524
// 00706 a dd13 532
// 00712 a dd14 536
// 00713 a dd15 537
// 00422 a sn12 336
// 00714 a tc1 539
// 00616 a tcd1 465
// 00425 a tn11 339
// 00431 a tn12 343
// 00435 a tn13 347
// 00443 a tn14 353
// 00472 a tn15 380
// 00473 a tn16 381
// 00501 a tn18 387
// 00646 d iv11 495
// 00662 d iv14 509
// 00663 d iv15 510
// 00415 l 01015 331
// 00554 l 01154 430
// 00555 l 01155 431
// 00645 m py11 493
// 00633 p mu11 480
// 00634 p qo11 482
// 00635 p qo12 483
// 00644 p qo13 491
// 00640 p qo15 487
// 00641 p qo16 488
// 00753 p re11 573
// 00625 r tn11 472
// 00732 r tn12 554
// 00445 s qt11 356
// 00673 s qt12 519
// 00746 s qt13 567
// 00736 s qt14 559
// 00650 s qt15 498
// 00651 s qt16 499
// 00656 s qt17 504
// 00733 s qt18 556
// 00763 t an13 582
// 00773 t an14 590
// 00401 t an15 319
// 00411 t an16 327
// 00754 t an18 575
// 00756 t an19 577
// 00450 t nm11 360
// 00455 t nm12 365
           //  597                                            
           //  598                                            	.rom @02
           //  599                                            
0000010000 //  600   L02000:  .....1....  -> L00001  *****    err21:	select rom 0		; -> l00001
           //  601                                            
1100111110 //  602   L02001:  11..11111.                      ln24:	a exchange b[s]
1111111110 //  603   L02002:  111111111.                      	a + 1 -> a[s]
1001010110 //  604   L02003:  1..1.1.11.                      	shift right c[ms]
0100010010 //  605   L02004:  .1...1..1.                      	shift left a[wp]
0001001011 //  606   L02005:  ...1..1.11  -> L021022           	go to ln26
           //  607                                            	
0110101000 //  608   L02006:  .11.1.1...                      xty22:	stack -> a
1010011001 //  609   L02007:  1.1..11..1  -> L021246           	jsb mpy21
0110001110 //  610   L02010:  .11...111.                      	c -> a[w]
1000010100 //  611   L02011:  1....1.1..                      	if s8 = 0
0100001011 //  612   L02012:  .1....1.11  -> L021102           	     then go to exp21
1011101110 //  613   L02013:  1.111.111.                      	0 -> a[w]
1101000110 //  614   L02014:  11.1...11.                      	a - c -> a[m]
0000000011 //  615   L02015:  ........11  -> L021000           	if no carry go to err21
1011001110 //  616   L02016:  1.11..111.                      	shift right a[w]
0101111110 //  617   L02017:  .1.111111.                      	c - 1 -> c[s]
0000000011 //  618   L02020:  ........11  -> L021000           	if no carry go to err21
0111111110 //  619   L02021:  .11111111.                      ln25:	c + 1 -> c[s]
0100101110 //  620   L02022:  .1..1.111.                      ln26:	a -> b[w]
1001011001 //  621   L02023:  1..1.11..1  -> L021226           	jsb eca22
1101100010 //  622   L02024:  11.11...1.                      	a - 1 -> a[p]
0001000111 //  623   L02025:  ...1...111  -> L021021           	if no carry go to ln25
1100110010 //  624   L02026:  11..11..1.                      	a exchange b[wp]
1110011110 //  625   L02027:  111..1111.                      	a + b -> a[s]
0000000111 //  626   L02030:  .......111  -> L021001           	if no carry go to ln24
0111001100 //  627   L02031:  .111..11..                      	7 -> p
0110110101 //  628   L02032:  .11.11.1.1  -> L021155           	jsb pqo23
1000001100 //  629   L02033:  1.....11..                      	8 -> p
1001110101 //  630   L02034:  1..111.1.1  -> L021235           	jsb pmu22
1001001100 //  631   L02035:  1..1..11..                      	9 -> p
1001110001 //  632   L02036:  1..111...1  -> L021234           	jsb pmu21
1111111001 //  633   L02037:  1111111..1  -> L021376           	jsb lncd3
1010001100 //  634   L02040:  1.1...11..                      	10 -> p
1001110001 //  635   L02041:  1..111...1  -> L021234           	jsb pmu21
0111110101 //  636   L02042:  .11111.1.1  -> L021175           	jsb lncd2
1011001100 //  637   L02043:  1.11..11..                      	11 -> p
1001110001 //  638   L02044:  1..111...1  -> L021234           	jsb pmu21
1101111101 //  639   L02045:  11.11111.1  -> L021337           	jsb lncd1
1001110001 //  640   L02046:  1..111...1  -> L021234           	jsb pmu21
1011100101 //  641   L02047:  1.111..1.1  -> L021271           	jsb lnc2
1001110001 //  642   L02050:  1..111...1  -> L021234           	jsb pmu21
1111011001 //  643   L02051:  1111.11..1  -> L021366           	jsb lnc10
1110101110 //  644   L02052:  111.1.111.                      	a exchange c[w]
0101001110 //  645   L02053:  .1.1..111.                      	a - c -> c[w]
0000011010 //  646   L02054:  .....11.1.                      	if b[xs] = 0
0010111111 //  647   L02055:  ..1.111111  -> L021057           	     then go to ln27
0101001110 //  648   L02056:  .1.1..111.                      	a - c -> c[w]
1100101110 //  649   L02057:  11..1.111.                      ln27:	a exchange b[w]
0000011100 //  650   L02060:  .....111..                      ln28:	p - 1 -> p
0100001110 //  651   L02061:  .1....111.                      	shift left a[w]
0001101100 //  652   L02062:  ...11.11..                      	if p # 1
0011000011 //  653   L02063:  ..11....11  -> L021060           	     then go to ln28
1110101110 //  654   L02064:  111.1.111.                      	a exchange c[w]
0110111110 //  655   L02065:  .11.11111.                      	if c[s] = 0
0011100011 //  656   L02066:  ..111...11  -> L021070           	     then go to ln29
0011100110 //  657   L02067:  ..111..11.                      	0 - c - 1 -> c[m]
0111101010 //  658   L02070:  .1111.1.1.                      ln29:	c + 1 -> c[x]
1011001100 //  659   L02071:  1.11..11..                      	11 -> p
1100010101 //  660   L02072:  11...1.1.1  -> L021305           	jsb mpy27
1001010100 //  661   L02073:  1..1.1.1..                      	if s9 = 0
0000011011 //  662   L02074:  .....11.11  -> L021006           	     then go to xty22
0101010100 //  663   L02075:  .1.1.1.1..                      	if s5 = 0
1001010011 //  664   L02076:  1..1.1..11  -> L021224           	     then go to rtn21
1111011001 //  665   L02077:  1111.11..1  -> L021366           	jsb lnc10
1010011101 //  666   L02100:  1.1..111.1  -> L021247           	jsb mpy22
1001010011 //  667   L02101:  1..1.1..11  -> L021224           	go to rtn21
           //  668                                            
1111011001 //  669   L02102:  1111.11..1  -> L021366           exp21:	jsb lnc10
1110110001 //  670   L02103:  111.11...1  -> L021354           	jsb pre21
1011100101 //  671   L02104:  1.111..1.1  -> L021271           	jsb lnc2
1011001100 //  672   L02105:  1.11..11..                      	11 -> p
1001101101 //  673   L02106:  1..11.11.1  -> L021233           	jsb pqo21
1101111101 //  674   L02107:  11.11111.1  -> L021337           	jsb lncd1
1010001100 //  675   L02110:  1.1...11..                      	10 -> p
1001101101 //  676   L02111:  1..11.11.1  -> L021233           	jsb pqo21
0111110101 //  677   L02112:  .11111.1.1  -> L021175           	jsb lncd2
1001001100 //  678   L02113:  1..1..11..                      	9 -> p
1001101101 //  679   L02114:  1..11.11.1  -> L021233           	jsb pqo21
1111111001 //  680   L02115:  1111111..1  -> L021376           	jsb lncd3
1000001100 //  681   L02116:  1.....11..                      	8 -> p
1001101101 //  682   L02117:  1..11.11.1  -> L021233           	jsb pqo21
1001101101 //  683   L02120:  1..11.11.1  -> L021233           	jsb pqo21
1001101101 //  684   L02121:  1..11.11.1  -> L021233           	jsb pqo21
0110001100 //  685   L02122:  .11...11..                      	6 -> p
1011110010 //  686   L02123:  1.1111..1.                      	0 -> a[wp]
1101001100 //  687   L02124:  11.1..11..                      	13 -> p
1000101110 //  688   L02125:  1...1.111.                      	b exchange c[w]
1110101110 //  689   L02126:  111.1.111.                      	a exchange c[w]
0110011000 //  690   L02127:  .11..11...                      	load constant 6
1000111011 //  691   L02130:  1...111.11  -> L021216           	go to exp23
           //  692                                            
0010010100 //  693   L02131:  ..1..1.1..                      pre23:	if s2 = 0
0101111011 //  694   L02132:  .1.1111.11  -> L021136           	     then go to pre24
1111101010 //  695   L02133:  11111.1.1.                      	a + 1 -> a[x]
1001111010 //  696   L02134:  1..1111.1.                      pre29:	if a[xs] >= 1
1100001011 //  697   L02135:  11....1.11  -> L021302           	     then go to pre27
1100010110 //  698   L02136:  11...1.11.                      pre24:	a - b -> a[ms]
0101100111 //  699   L02137:  .1.11..111  -> L021131           	if no carry go to pre23
1110010110 //  700   L02140:  111..1.11.                      	a + b -> a[ms]
0100001110 //  701   L02141:  .1....111.                      	shift left a[w]
0101101010 //  702   L02142:  .1.11.1.1.                      	c - 1 -> c[x]
0101110011 //  703   L02143:  .1.111..11  -> L021134           	if no carry go to pre29
1011001110 //  704   L02144:  1.11..111.                      pre25:	shift right a[w]
0011010010 //  705   L02145:  ..11.1..1.                      	0 -> c[wp]
1110101010 //  706   L02146:  111.1.1.1.                      	a exchange c[x]
0110111110 //  707   L02147:  .11.11111.                      pre26:	if c[s] = 0
0110110011 //  708   L02150:  .11.11..11  -> L021154           	     then go to pre28
1100101110 //  709   L02151:  11..1.111.                      	a exchange b[w]
1100001110 //  710   L02152:  11....111.                      	a - b -> a[w]
0011101110 //  711   L02153:  ..111.111.                      	0 - c - 1 -> c[w]
1011001110 //  712   L02154:  1.11..111.                      pre28:	shift right a[w]
1000101110 //  713   L02155:  1...1.111.                      pqo23:	b exchange c[w]
0011001110 //  714   L02156:  ..11..111.                      	0 -> c[w]
0101100110 //  715   L02157:  .1.11..11.                      	c - 1 -> c[m]
0010010100 //  716   L02160:  ..1..1.1..                      	if s2 = 0
0111011011 //  717   L02161:  .111.11.11  -> L021166           	     then go to pqo28
0100011000 //  718   L02162:  .1...11...                      	load constant 4
0111100110 //  719   L02163:  .1111..11.                      	c + 1 -> c[m]
0111100111 //  720   L02164:  .1111..111  -> L021171           	if no carry go to pqo24
0110011000 //  721   L02165:  .11..11...                      pqo27:	load constant 6
0001101100 //  722   L02166:  ...11.11..                      pqo28:	if p # 1
0111010111 //  723   L02167:  .111.1.111  -> L021165           	     then go to pqo27
1001001110 //  724   L02170:  1..1..111.                      	shift right c[w]
1001001110 //  725   L02171:  1..1..111.                      pqo24:	shift right c[w]
0010010100 //  726   L02172:  ..1..1.1..                      nrm26:	if s2 = 0
1001010011 //  727   L02173:  1..1.1..11  -> L021224           	     then go to rtn21
0000110000 //  728   L02174:  ....11....                      	return
           //  729                                            
0111001100 //  730   L02175:  .111..11..                      lncd2:	7 -> p
0011011000 //  731   L02176:  ..11.11...                      lnc6:	load constant 3
0011011000 //  732   L02177:  ..11.11...                      	load constant 3
0000011000 //  733   L02200:  .....11...                      	load constant 0
1000011000 //  734   L02201:  1....11...                      lnc7:	load constant 8
0101011000 //  735   L02202:  .1.1.11...                      	load constant 5
0000011000 //  736   L02203:  .....11...                      	load constant 0
1001011000 //  737   L02204:  1..1.11...                      	load constant 9
1110101011 //  738   L02205:  111.1.1.11  -> L021352           	go to lnc9
           //  739                                            
1001011001 //  740   L02206:  1..1.11..1  -> L021226           exp29:	jsb eca22
1111100010 //  741   L02207:  11111...1.                      	a + 1 -> a[p]
0100101110 //  742   L02210:  .1..1.111.                      exp22:	a -> b[w]
0101111110 //  743   L02211:  .1.111111.                      	c - 1 -> c[s]
1000011011 //  744   L02212:  1....11.11  -> L021206           	if no carry go to exp29
1011010010 //  745   L02213:  1.11.1..1.                      	shift right a[wp]
1110101110 //  746   L02214:  111.1.111.                      	a exchange c[w]
0100010110 //  747   L02215:  .1...1.11.                      	shift left a[ms]
1110101110 //  748   L02216:  111.1.111.                      exp23:	a exchange c[w]
1101111110 //  749   L02217:  11.111111.                      	a - 1 -> a[s]
1000100011 //  750   L02220:  1...1...11  -> L021210           	if no carry go to exp22
1100101110 //  751   L02221:  11..1.111.                      	a exchange b[w]
1111100010 //  752   L02222:  11111...1.                      	a + 1 -> a[p]
1100110001 //  753   L02223:  11..11...1  -> L021314           	jsb nrm21
0010010000 //  754   L02224:  ..1..1....  -> L01225  *****    rtn21:	select rom 1		; -> rtn11
           //  755                                            
1011010010 //  756   L02225:  1.11.1..1.                      eca21:	shift right a[wp]
1101111110 //  757   L02226:  11.111111.                      eca22:	a - 1 -> a[s]
1001010111 //  758   L02227:  1..1.1.111  -> L021225           	if no carry go to eca21
1011111110 //  759   L02230:  1.1111111.                      	0 -> a[s]
1110001110 //  760   L02231:  111...111.                      	a + b -> a[w]
0000110000 //  761   L02232:  ....11....                      	return
           //  762                                            
0010010000 //  763   L02233:  ..1..1....  -> L01234  *****    pqo21:	select rom 1		; -> pqo11
           //  764                                            
1011001110 //  765   L02234:  1.11..111.                      pmu21:	shift right a[w]
1000101110 //  766   L02235:  1...1.111.                      pmu22:	b exchange c[w]
1010000011 //  767   L02236:  1.1.....11  -> L021240           	go to pmu24
           //  768                                            
1110001110 //  769   L02237:  111...111.                      pmu23:	a + b -> a[w]
0101111110 //  770   L02240:  .1.111111.                      pmu24:	c - 1 -> c[s]
1001111111 //  771   L02241:  1..1111111  -> L021237           	if no carry go to pmu23
1110101110 //  772   L02242:  111.1.111.                      	a exchange c[w]
0100010110 //  773   L02243:  .1...1.11.                      	shift left a[ms]
1110101110 //  774   L02244:  111.1.111.                      	a exchange c[w]
0110110111 //  775   L02245:  .11.11.111  -> L021155           	go to pqo23
           //  776                                            
0011001100 //  777   L02246:  ..11..11..                      mpy21:	3 -> p
0111001010 //  778   L02247:  .111..1.1.                      mpy22:	a + c -> c[x]
0101011110 //  779   L02250:  .1.1.1111.                      	a - c -> c[s]
1010101111 //  780   L02251:  1.1.1.1111  -> L021253           	if no carry go to div22
0010111110 //  781   L02252:  ..1.11111.                      	0 - c -> c[s]
1100100110 //  782   L02253:  11..1..11.                      div22:	a exchange b[m]
1011101110 //  783   L02254:  1.111.111.                      	0 -> a[w]
1100101100 //  784   L02255:  11..1.11..                      	if p # 12
1100010111 //  785   L02256:  11...1.111  -> L021305           	     then go to mpy27
0001100110 //  786   L02257:  ...11..11.                      	if c[m] >= 1
1011011011 //  787   L02260:  1.11.11.11  -> L021266           	     then go to div23
0001010100 //  788   L02261:  ...1.1.1..                      	if s1 = 0
0000000011 //  789   L02262:  ........11  -> L021000           	     then go to err21
0010010010 //  790   L02263:  ..1..1..1.                      	b -> c[wp]
1101100110 //  791   L02264:  11.11..11.                      	a - 1 -> a[m]
0111111010 //  792   L02265:  .111111.1.                      	c + 1 -> c[xs]
1000110010 //  793   L02266:  1...11..1.                      div23:	b exchange c[wp]
1110100110 //  794   L02267:  111.1..11.                      	a exchange c[m]
0010010000 //  795   L02270:  ..1..1....  -> L01271  *****    	select rom 1		; -> l01271
           //  796                                            
1000100100 //  797   L02271:  1...1..1..                      lnc2:	0 -> s8
0110011000 //  798   L02272:  .11..11...                      	load constant 6
1001011000 //  799   L02273:  1..1.11...                      	load constant 9
0011011000 //  800   L02274:  ..11.11...                      	load constant 3
0001011000 //  801   L02275:  ...1.11...                      	load constant 1
0100011000 //  802   L02276:  .1...11...                      	load constant 4
0111011000 //  803   L02277:  .111.11...                      	load constant 7
0001011000 //  804   L02300:  ...1.11...                      	load constant 1
1110011011 //  805   L02301:  111..11.11  -> L021346           	go to lnc8
           //  806                                            
1111100110 //  807   L02302:  11111..11.                      pre27:	a + 1 -> a[m]
0110010011 //  808   L02303:  .11..1..11  -> L021144           	if no carry go to pre25
1110001110 //  809   L02304:  111...111.                      myp26:	a + b -> a[w]
0101100010 //  810   L02305:  .1.11...1.                      mpy27:	c - 1 -> c[p]
1100010011 //  811   L02306:  11...1..11  -> L021304           	if no carry go to myp26
1011001110 //  812   L02307:  1.11..111.                      mpy28:	shift right a[w]
0000111100 //  813   L02310:  ....1111..                      	p + 1 -> p
1101101100 //  814   L02311:  11.11.11..                      	if p # 13
1100010111 //  815   L02312:  11...1.111  -> L021305           	     then go to mpy27
0111101010 //  816   L02313:  .1111.1.1.                      	c + 1 -> c[x]
1011111110 //  817   L02314:  1.1111111.                      nrm21:	0 -> a[s]
1100001100 //  818   L02315:  11....11..                      	12 -> p
0000101110 //  819   L02316:  ....1.111.                      	0 -> b[w]
1001100010 //  820   L02317:  1..11...1.                      nrm23:	if a[p] >= 1
1101011011 //  821   L02320:  11.1.11.11  -> L021326           	     then go to nrm24
0100001110 //  822   L02321:  .1....111.                      	shift left a[w]
0101101010 //  823   L02322:  .1.11.1.1.                      	c - 1 -> c[x]
1001101110 //  824   L02323:  1..11.111.                      	if a[w] >= 1
1100111111 //  825   L02324:  11..111111  -> L021317           	     then go to nrm23
0011001110 //  826   L02325:  ..11..111.                      	0 -> c[w]
0100101010 //  827   L02326:  .1..1.1.1.                      nrm24:	a -> b[x]
1110001110 //  828   L02327:  111...111.                      	a + b -> a[w]
1001111110 //  829   L02330:  1..111111.                      	if a[s] >= 1
1100011111 //  830   L02331:  11...11111  -> L021307           	     then go to mpy28
1110100110 //  831   L02332:  111.1..11.                      	a exchange c[m]
0110001110 //  832   L02333:  .11...111.                      	c -> a[w]
0000101110 //  833   L02334:  ....1.111.                      	0 -> b[w]
1100001100 //  834   L02335:  11....11..                      nrm27:	12 -> p
0111101011 //  835   L02336:  .1111.1.11  -> L021172           	go to nrm26
           //  836                                            
1001001100 //  837   L02337:  1..1..11..                      lncd1:	9 -> p
0011011000 //  838   L02340:  ..11.11...                      	load constant 3
0001011000 //  839   L02341:  ...1.11...                      	load constant 1
0000011000 //  840   L02342:  .....11...                      	load constant 0
0001011000 //  841   L02343:  ...1.11...                      	load constant 1
0111011000 //  842   L02344:  .111.11...                      	load constant 7
1001011000 //  843   L02345:  1..1.11...                      	load constant 9
1000011000 //  844   L02346:  1....11...                      lnc8:	load constant 8
0000011000 //  845   L02347:  .....11...                      	load constant 0
0101011000 //  846   L02350:  .1.1.11...                      	load constant 5
0101011000 //  847   L02351:  .1.1.11...                      	load constant 5
0011011000 //  848   L02352:  ..11.11...                      lnc9:	load constant 3
1101110111 //  849   L02353:  11.111.111  -> L021335           	go to nrm27
           //  850                                            
1110101110 //  851   L02354:  111.1.111.                      pre21:	a exchange c[w]
0100101110 //  852   L02355:  .1..1.111.                      	a -> b[w]
0110000110 //  853   L02356:  .11....11.                      	c -> a[m]
1010111010 //  854   L02357:  1.1.111.1.                      	c + c -> c[xs]
0101111011 //  855   L02360:  .1.1111.11  -> L021136           	if no carry go to pre24
0111111010 //  856   L02361:  .111111.1.                      	c + 1 -> c[xs]
1011001110 //  857   L02362:  1.11..111.                      pre22:	shift right a[w]
0111101010 //  858   L02363:  .1111.1.1.                      	c + 1 -> c[x]
1111001011 //  859   L02364:  1111..1.11  -> L021362           	if no carry go to pre22
0110011111 //  860   L02365:  .11..11111  -> L021147           	go to pre26
           //  861                                            
0011001110 //  862   L02366:  ..11..111.                      lnc10:	0 -> c[w]
1100001100 //  863   L02367:  11....11..                      	12 -> p
0010011000 //  864   L02370:  ..1..11...                      	load constant 2
0011011000 //  865   L02371:  ..11.11...                      	load constant 3
0000011000 //  866   L02372:  .....11...                      	load constant 0
0010011000 //  867   L02373:  ..1..11...                      	load constant 2
0101011000 //  868   L02374:  .1.1.11...                      	load constant 5
1000000111 //  869   L02375:  1......111  -> L021201           	go to lnc7
           //  870                                            
0101001100 //  871   L02376:  .1.1..11..                      lncd3:	5 -> p
0111111011 //  872   L02377:  .111111.11  -> L021176           	go to lnc6
//  873                                            
// 01253 div22 782
// 01266 div23 793
// 01225 eca21 756
// 01226 eca22 757
// 01000 err21 600
// 01102 exp21 669
// 01210 exp22 742
// 01216 exp23 748
// 01206 exp29 740
// 01001 ln24 602
// 01021 ln25 619
// 01022 ln26 620
// 01057 ln27 649
// 01060 ln28 650
// 01070 ln29 658
// 01366 lnc10 862
// 01271 lnc2 797
// 01176 lnc6 731
// 01201 lnc7 734
// 01346 lnc8 844
// 01352 lnc9 848
// 01337 lncd1 837
// 01175 lncd2 730
// 01376 lncd3 871
// 01246 mpy21 777
// 01247 mpy22 778
// 01305 mpy27 810
// 01307 mpy28 812
// 01304 myp26 809
// 01314 nrm21 817
// 01317 nrm23 820
// 01326 nrm24 827
// 01172 nrm26 726
// 01335 nrm27 834
// 01234 pmu21 765
// 01235 pmu22 766
// 01237 pmu23 769
// 01240 pmu24 770
// 01233 pqo21 763
// 01155 pqo23 713
// 01171 pqo24 725
// 01165 pqo27 721
// 01166 pqo28 722
// 01354 pre21 851
// 01362 pre22 857
// 01131 pre23 693
// 01136 pre24 698
// 01144 pre25 704
// 01147 pre26 707
// 01302 pre27 807
// 01154 pre28 712
// 01134 pre29 696
// 01224 rtn21 754
// 01006 xty22 608
// 
// Global symbols:
// 
// 
// 0 errors, 0 warnings
